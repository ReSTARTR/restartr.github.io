<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Octopress on I Will Survive</title>
    <link>http://blog.restartr.com/tags/octopress/</link>
    <description>Recent content in Octopress on I Will Survive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 13 Mar 2016 20:00:00 +0900</lastBuildDate>
    <atom:link href="http://blog.restartr.com/tags/octopress/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>OctopressからHugoに移行</title>
      <link>http://blog.restartr.com/2016/03/13/from-octopress-to-hugo</link>
      <pubDate>Sun, 13 Mar 2016 20:00:00 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2016/03/13/from-octopress-to-hugo</guid>
      <description>

&lt;p&gt;Octopressを使い始めて約2年。&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;に乗り換えました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.restartr.com/2014/04/06/move-from-wordpress-to-octopress/&#34;&gt;WordpressからOctopressに移行&lt;/a&gt;が2014年の4月なので約2年です。
そんなに記事はたくさん書いているわけでなはいのですが、それでも&lt;code&gt;rake preview&lt;/code&gt;しながら編集しているときのストレスはそれなりにありました。
なので、快適さを得るためにHugoに乗り換えました。&lt;/p&gt;

&lt;h3 id=&#34;やったこと:d50ea5a11adcf7e2a2a926330a4f05a0&#34;&gt;やったこと&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hugo new&lt;/code&gt;でプロジェクト生成した

&lt;ul&gt;
&lt;li&gt;Octopressのmarkdownファイルのみ&lt;code&gt;content/post&lt;/code&gt;以下にコピー&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;permalinkの設定を維持できず、シェルスクリプトでslugを追加した

&lt;ul&gt;
&lt;li&gt;config.tomlで&lt;code&gt;post = /:year/:month/:day/:title&lt;/code&gt;とすると&lt;code&gt;/2016/01/01/2016-01-01-hogehoge&lt;/code&gt;のようなパーマリンクになってしまう&lt;/li&gt;
&lt;li&gt;slugを設定しておけばそのままいけるので修正した。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;生成元がマルチバイト含んでるとエスケープ処理まわりで互換性が壊れるのでaliasを設定した

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yet.unresolved.xyz/blog/2015/01/07/how-to-use-multibyte-title-in-hugo/&#34;&gt;Hugoでマルチバイトのタイトルをうまいこと使う - Unresolved&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/extras/aliases/&#34;&gt;https://gohugo.io/extras/aliases/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマのhydeをカスタムして、最低限の要素を取り入れた

&lt;ul&gt;
&lt;li&gt;ページネーション&lt;/li&gt;
&lt;li&gt;ソーシャルボタン&lt;/li&gt;
&lt;li&gt;トップページの要素削減&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマはforkしたリポジトリにpushした

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ReSTARTR/hyde/commit/d98a487257865470f17d5682632fe37568907ea4&#34;&gt;github.com/ReSTARTR/hyde&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;本当はもう少しマシにしたいけどとりあえずここまで。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;最後に手動で1ファイルずつ調整した

&lt;ul&gt;
&lt;li&gt;Wordpress時代の設定とか残ってたり、descrptionが雑だったりしたので最終的に1つずつメタデータを修正&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ファイル名からslugを追記するシェルスクリプト:d50ea5a11adcf7e2a2a926330a4f05a0&#34;&gt;ファイル名からslugを追記するシェルスクリプト&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

for file in $(ls content/post | grep &#39;\.markdown$&#39;); do
  SLUG=&amp;quot;$(echo ${file:11} | sed -E &#39;s/.markdown$//&#39;)&amp;quot;
  [ -z $SLUG ] &amp;amp;&amp;amp; continue

  file=&amp;quot;./content/post/$file&amp;quot;
  echo $file
  cat &amp;lt;&amp;lt;EOF &amp;gt; $file.tmp
---
slug: &amp;quot;${SLUG}&amp;quot;
EOF
  cat $file.tmp
  sed -e &#39;1,1d&#39; ${file} &amp;gt;&amp;gt; $file.tmp
  mv $file.tmp $file
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※シンタックスハイライト効かせたい&amp;hellip;&lt;/p&gt;

&lt;p&gt;これを実行する前に、content/post以下はコミットしておいたほうが安心かと。
で、実行おわったら再度&lt;code&gt;git add&lt;/code&gt;して&lt;code&gt;git commit&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;github-pagesのリポジトリへの登録:d50ea5a11adcf7e2a2a926330a4f05a0&#34;&gt;github pagesのリポジトリへの登録&lt;/h3&gt;

&lt;p&gt;あとは&lt;a href=&#34;https://github.com/ReSTARTR/restartr.github.io&#34;&gt;ReSTARTR/restartr.github.io&lt;/a&gt;をsubmoduleにしてそこに生成ファイルを配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add git@github.com:restartr/restartr.github.io public

# 必要なファイルを生成元にコピー
cp ./public/{CNAME,humans.txt,crossdomain.xml} ./content

# いったん全削除
cd public &amp;amp;&amp;amp; rm -rf ./$(git ls-files | grep -v gitignore) &amp;amp;&amp;amp; cd ..

# コンテンツ生成
hugo -d public

# 別ブランチにcommit &amp;amp;&amp;amp; push
cd publid
git checkout migrate-to-hugo
git add -A .
git commit -m &#39;Migrate to Hugo&#39;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは、githubでプルリクエストつくってマージすればOK。
失敗したらRevertできるので安心です。&lt;/p&gt;

&lt;p&gt;という感じで移行が完了したわけですが、テーマとか周辺環境はOctopressに比べると貧弱です。
が、一度もろもろ設定してしまったらそんなにいじることもないしまぁ問題ないかと思います。&lt;/p&gt;

&lt;p&gt;ストレス感じながら文章かくよりは、気持よく文章書けるほうが良いです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WordpressからOctopressに移行</title>
      <link>http://blog.restartr.com/2014/04/06/move-from-wordpress-to-octopress</link>
      <pubDate>Sun, 06 Apr 2014 13:00:00 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2014/04/06/move-from-wordpress-to-octopress</guid>
      <description>

&lt;p&gt;もともとさくらのレンサバ上でWordpressで構築していたブログを&lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;に移行してGithub Pagesでホスティングするように切り替え。
最初は&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;だけでやろうとしてたけど、ブロクとしての機能を見るとOctopressのほうが良さそうだったので途中で方針転換。&lt;/p&gt;

&lt;h4 id=&#34;手順:c1ded8692eaaa4039286a0220a7e94c6&#34;&gt;手順&lt;/h4&gt;

&lt;p&gt;詳細な手順は面倒なので割愛するとして、だいたいこんな感じの流れで移行。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;作業用環境にjekyll, jekyll-import, mysql2, sequelをgem install&lt;/li&gt;
&lt;li&gt;さくらのレンサバ上のMySQLのデータをmysqldumpしてscp&lt;/li&gt;
&lt;li&gt;dumpデータを作業用環境のMySQLにリストア&lt;/li&gt;
&lt;li&gt;リストアしたデータから&lt;a href=&#34;http://import.jekyllrb.com/docs/wordpress/&#34;&gt;jekyll-import&lt;/a&gt;を使って記事のmarkdownファイルを吐き出す&lt;/li&gt;
&lt;li&gt;octopressをcloneして、&lt;code&gt;rake install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;jekyll-importで吐き出されたファイルをoctopressのsource/_posts以下に移動&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rake preview&lt;/code&gt;で表示を確認しながら、source/_posts以下のmarkdownファイルをひたすら修正&lt;/li&gt;
&lt;li&gt;テーマを調整&amp;amp;元記事のURLパスと同一になるように&lt;code&gt;_config.yml&lt;/code&gt;に設定&lt;/li&gt;
&lt;li&gt;githubにpushしてgithub pagesとして公開&lt;/li&gt;
&lt;li&gt;CNAMEを設定してgithub.ioから元のドメイン(blog.restartr.com)に移行&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;さくらのレンサバ内からしかWordpressのDBに接続できないのと、レンサバ内でrubyを使うのはなんか面倒事が多そうだったので、環境整備済みなvpsで移行作業。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;※wordpressのエクスポート機能で吐き出したxmlからmigrateする方法もあるけど今回は不採用&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;wordpressの時のドメイン-パスを同一にするための設定:c1ded8692eaaa4039286a0220a7e94c6&#34;&gt;Wordpressの時のドメイン、パスを同一にするための設定&lt;/h4&gt;

&lt;p&gt;wordpressでは&lt;code&gt;/year/month/day/title&lt;/code&gt;というpermalinkを設定していたのでそれと同一にするための作業。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ドメインはgithub pagesのカスタムドメインとCNAME設定で解決&lt;/li&gt;
&lt;li&gt;パスは&lt;code&gt;_config.yml&lt;/code&gt;のpermalinkを&lt;code&gt;/:year/:month/:day/:title&lt;/code&gt;にして解決&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;さくらのレンサバ側の独自ドメイン設定:c1ded8692eaaa4039286a0220a7e94c6&#34;&gt;さくらのレンサバ側の独自ドメイン設定&lt;/h4&gt;

&lt;p&gt;これでハマりました。さくらのドメインの設定で&amp;rdquo;blog.restartr.com&amp;rdquo;のCNAMEを設定したのに、DNSへの問い合わせ結果が常にAレコードしか帰ってこなくてかなり悩んでた。
結論は、さくらのレンサバの設定画面で独自ドメインとして&amp;rdquo;blog.restartr.com&amp;rdquo;を登録していて、そっちの設定が邪魔をしていた。&lt;/p&gt;

&lt;p&gt;さくらのレンサバの独自ドメイン設定をはずして、さくらのドメインのCNAME設定を追加したら無事に解決。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;さくらのレンサバの独自ドメインの解除から、2時間以上反映に時間かかるらしい&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;postデータの修正:c1ded8692eaaa4039286a0220a7e94c6&#34;&gt;postデータの修正&lt;/h4&gt;

&lt;p&gt;jekyll-importを使ってmarkdownを吐き出すところまではすんなりいけたけど、なにより面倒だったのが吐き出したmarkdownを修正する作業。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;シンタックスハイライトするために&lt;code&gt;[ccW_python]...[/ccW_python]&lt;/code&gt;とか&lt;code&gt;&amp;lt;pre class=&amp;quot;brush:pyton&amp;quot;&amp;gt;...&amp;lt;/pre&amp;gt;&lt;/code&gt;とか独自タグがある&lt;/li&gt;
&lt;li&gt;amazonのリンク生成用タグ&lt;code&gt;[tmkm-amazon]123456[/tmkm-amazon]&lt;/code&gt;というタグがある&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;タグと&lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;タグの嵐&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらの対応のためにいちいち置換するのが非常に大変。&lt;code&gt;[ccW]&lt;/code&gt;と&lt;code&gt;[tmkm-amazon]&lt;/code&gt;タグは置換できたけど、&lt;code&gt;&amp;lt;pre class=&amp;quot;brush:...&amp;quot;&amp;gt;&lt;/code&gt;についてはハイライトされないだけで表示上問題なさそうなので無視。
あとはmarkdownにhtmlが混じってるのが気持ち悪いので&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;を置換して行間を調整。&lt;/p&gt;

&lt;p&gt;ドラフト記事をリモートにpushしてなくて別のPCから記事の途中からかけなくて困った…とならないように基本的にVPS上にcloneすることにした。
これで記事編集のための苦痛を感じる事無く純粋なmarkdownで記事がかけるようになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考にした記事

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hadihariri.com/2013/12/24/migrating-from-wordpress-to-jekyll/&#34;&gt;Migrating from WordPress.com to Jekyll &amp;#8211; Hadi Hariri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.glidenote.com/blog/2011/12/20/how-to-use-custom-domain-on-github-pages/&#34;&gt;GitHub PagesでCustom Domainを利用する - Glide Note - グライドノート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ベースにしたテーマ

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bijumon/oct2&#34;&gt;bijumon/oct2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>