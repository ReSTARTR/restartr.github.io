<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on I Will Survive</title>
    <link>http://blog.restartr.com/tags/mysql/</link>
    <description>Recent content in Mysql on I Will Survive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 07 Apr 2014 08:12:32 +0900</lastBuildDate>
    <atom:link href="http://blog.restartr.com/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MySQLでutf8mb4を扱う場合は必要なカラムと接続時だけ明示的に指定する</title>
      <link>http://blog.restartr.com/2014/04/07/mysql-character-set-utf8mb4</link>
      <pubDate>Mon, 07 Apr 2014 08:12:32 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2014/04/07/mysql-character-set-utf8mb4</guid>
      <description>

&lt;p&gt;結論はタイトルの通り。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:92573dc8333c8459780952b1c4bbdcda&#34;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;systemのエンコードが&lt;code&gt;character_set_system&lt;/code&gt;に反映される. clientの接続時のデフォルトはシステムのエンコードが使用される（未検証）&lt;/li&gt;
&lt;li&gt;clientの接続時の指定が優先される。ただし、&lt;code&gt;character_set_database&lt;/code&gt;, &lt;code&gt;character_set_filesystem&lt;/code&gt;, &lt;code&gt;character_set_server&lt;/code&gt;については上書きされない。&lt;/li&gt;
&lt;li&gt;my.cnfの&lt;code&gt;mysql.default-character-set&lt;/code&gt;は意味ある？（未検証）&lt;/li&gt;
&lt;li&gt;my.cnfの&lt;code&gt;mysqld.character-set-server&lt;/code&gt;はfilesystemとsystem以外のデフォルトに影響する。clientの接続時に無指定の場合にもデフォルトとして利用される&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下の理由によって、デフォルトはutf8で、必要なカラムとクライアント接続時にだけutf8mb4を適用することとした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;インデックスに使える文字数がutf8だと255文字までに対してutf8mb4だと191文字まで。

&lt;ul&gt;
&lt;li&gt;サーバー側の設定はデフォルトutf8.クライアントの設定はデフォルトutf8mb4.が良い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;検証:92573dc8333c8459780952b1c4bbdcda&#34;&gt;検証&lt;/h3&gt;

&lt;p&gt;server/clientともにremiのMySQL5.5を使用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql --version
mysql  Ver 14.14 Distrib 5.5.37, for Linux (x86_64) using readline 5.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;utf8なカラム&lt;code&gt;name1&lt;/code&gt;と、utf8mb4なカラム&lt;code&gt;name2&lt;/code&gt;を用意.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql -uroot test -e &#39;show create table user2\G&#39;
*************************** 1. row ***************************
       Table: user2
Create Table: CREATE TABLE `user2` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name1` varchar(255) DEFAULT NULL,
  `name2` varchar(255) CHARACTER SET utf8mb4 DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;デフォルトの状態&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql -uroot test -e &#39;show global variables like &amp;quot;character_set%&amp;quot;; show variables like &amp;quot;character_set%&amp;quot;&#39;
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | latin1                     |
| character_set_connection | latin1                     |
| character_set_database   | latin1                     |
| character_set_filesystem | binary                     |
| character_set_results    | latin1                     |
| character_set_server     | latin1                     |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8                       |
| character_set_connection | utf8                       |
| character_set_database   | latin1                     |
| character_set_filesystem | binary                     |
| character_set_results    | utf8                       |
| character_set_server     | latin1                     |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;clientが&lt;code&gt;--default-character-set=utf8mb4&lt;/code&gt;をつけて接続した場合&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql --default-character-set=utf8 -uroot test -e &#39;show global variables like &amp;quot;character_set%&amp;quot;; show variables like &amp;quot;character_set%&amp;quot;&#39;
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | latin1                     |
| character_set_connection | latin1                     |
| character_set_database   | latin1                     |
| character_set_filesystem | binary                     |
| character_set_results    | latin1                     |
| character_set_server     | latin1                     |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8                       |
| character_set_connection | utf8                       |
| character_set_database   | latin1                     |
| character_set_filesystem | binary                     |
| character_set_results    | utf8                       |
| character_set_server     | latin1                     |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;my.cnfに&lt;code&gt;mysql.default-character-set&lt;/code&gt;を指定した場合&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[mysql]
default-character-set=utf8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql -uroot test -e &#39;show global variables like &amp;quot;character_set%&amp;quot;; show variables like &amp;quot;character_set%&amp;quot;&#39;
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | latin1                     |
| character_set_connection | latin1                     |
| character_set_database   | latin1                     |
| character_set_filesystem | binary                     |
| character_set_results    | latin1                     |
| character_set_server     | latin1                     |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8                       |
| character_set_connection | utf8                       |
| character_set_database   | latin1                     |
| character_set_filesystem | binary                     |
| character_set_results    | utf8                       |
| character_set_server     | latin1                     |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;my.cnfに&lt;code&gt;mysqd.character-set-server=utf8&lt;/code&gt;を指定した場合&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[mysqld]
character-set-server=utf8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql -uroot test -e &#39;show global variables like &amp;quot;character_set%&amp;quot;; show variables like &amp;quot;character_set%&amp;quot;&#39;
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8                       |
| character_set_connection | utf8                       |
| character_set_database   | utf8                       |
| character_set_filesystem | binary                     |
| character_set_results    | utf8                       |
| character_set_server     | utf8                       |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8                       |
| character_set_connection | utf8                       |
| character_set_database   | utf8                       |
| character_set_filesystem | binary                     |
| character_set_results    | utf8                       |
| character_set_server     | utf8                       |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rails-activerecord-から接続する場合:92573dc8333c8459780952b1c4bbdcda&#34;&gt;Rails（ActiveRecord）から接続する場合　&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;db:
  encoding: &amp;quot;utf8mb4&amp;quot; # SET NAMES &amp;quot;utf8mb4&amp;quot;と等価
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらに、&lt;code&gt;SET NAMES utf8mb4&lt;/code&gt;は以下全てを実行した場合と等価&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SET character_set_client = utf8mb4;
SET character_set_results = utf8mb4;
SET character_set_connection = utf8mb4;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;utf8なカラムの文字列検索:92573dc8333c8459780952b1c4bbdcda&#34;&gt;utf8なカラムの文字列検索&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;utf8mb4なカラムには、utf8mb4で接続してinsertすること&lt;/li&gt;
&lt;li&gt;utf8なカラムには、utf8でもutf8mb4でもどちらでinsertしてもselectしても問題ない&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql -uroot test -e &#39;set names &amp;quot;utf8mb4&amp;quot;; select * from user2 where name2 like &amp;quot;%だよ%&amp;quot; limit 3&#39;
+----+----------------+------------------+
| id | name1          | name2            |
+----+----------------+------------------+
|  1 | firstだよ♬     | firstだよ♬       |
|  2 | secondだよ     | secondだよ????   |
|  3 | secondだよ?    | secondだよ♨      |
+----+----------------+------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql -uroot test -e &#39;set names &amp;quot;utf8mb4&amp;quot;; select * from user2 where name2 like &amp;quot;%だよ♨&amp;quot; limit 3&#39;
+----+--------------------+---------------------+
| id | name1              | name2               |
+----+--------------------+---------------------+
|  3 | secondだよ?        | secondだよ♨          |
|  8 | テストだよ♬        | テストだよ♨          |
| 13 | テストだよ♬        | テストだよ♨          |
+----+--------------------+---------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただし、utf8mb4なカラムに対して4バイト文字列を投げると、utf8で接続した時にエラーになる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql -uroot test -e &#39;set names &amp;quot;utf8&amp;quot;; select * from user2 where name2 like &amp;quot;%だよ♨&amp;quot; limit 3&#39;
ERROR 1267 (HY000) at line 1: Illegal mix of collations (utf8mb4_general_ci,IMPLICIT) and (utf8_general_ci,COERCIBLE) for operation &#39;like&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なので、データとしてutf8mb4が格納される可能性があるDBに対しては、utf8mb4で必ず接続すること。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql -uroot test -e &#39;set names &amp;quot;utf8mb4&amp;quot;; select * from user2 where name2 like &amp;quot;%だよ♨&amp;quot; limit 3&#39;
+----+--------------------+---------------------+
| id | name1              | name2               |
+----+--------------------+---------------------+
|  3 | secondだよ?        | secondだよ♨          |
|  8 | テストだよ♬        | テストだよ♨          |
| 13 | テストだよ♬        | テストだよ♨          |
+----+--------------------+---------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;クライアントが5-1の場合:92573dc8333c8459780952b1c4bbdcda&#34;&gt;クライアントが5.1の場合&lt;/h3&gt;

&lt;p&gt;my.cnfやmysqlコマンドのオプションに&lt;code&gt;client.default_character_set=utf8mb4&lt;/code&gt;は指定できない&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql --default-character-set=utf8mb4 -h 192.168.1.164 -uroot test -e &#39;select * from user&#39;
mysql: Character set &#39;utf8mb4&#39; is not a compiled character set and is not specified in the &#39;/usr/share/mysql/charsets/Index.xml&#39; file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただし、SQLでの&lt;code&gt;set names utf8mb4&lt;/code&gt;の指定は有効。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql -h 192.168.1.164 -uroot test -e &#39;set names utf8mb4; select * from user&#39;
+----+------------+---------------+
| id | name1      | name2         |
+----+------------+---------------+
| 14 | テスト  | テスト???? |
| 15 | テスト? | テスト♨ |
+----+------------+---------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ActiveRecord等でmysql2を使用している場合、encodingにutf8mb4を指定すると例外が起きる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Character set &#39;utf8mb4&#39; is not a compiled character set and is not specified in the &#39;/usr/share/mysql/charsets/Index.xml&#39; file
/home/yoshida/hoge/vendor/bundle/ruby/2.0.0/gems/mysql2-0.3.13/lib/mysql2/client.rb:58:in `connect&#39;: Can&#39;t initialize character set utf8mb4 (path: /usr/share/mysql/charsets/) (Mysql2::Error)
        from /home/yoshida/hoge/vendor/bundle/ruby/2.0.0/gems/mysql2-0.3.13/lib/mysql2/client.rb:58:in `initialize&#39;
        from test_mysql.rb:3:in `new&#39;
        from test_mysql.rb:3:in `&amp;lt;main&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なので、接続時にset namesすれば良い&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;mysql2&#39;
client = Mysql2::Client.new(:host =&amp;gt; &amp;quot;localhost&amp;quot;, :username =&amp;gt; &amp;quot;root&amp;quot;, db: &#39;test&#39;)
client.query(&#39;SET NAMES utf8mb4&#39;)
puts client.query(&#39;SELECT * FROM user&#39;).map { |r| r[&#39;name2&#39;] }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ruby test.rb
[&amp;quot;テスト????&amp;quot;, &amp;quot;テスト🌸&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考:92573dc8333c8459780952b1c4bbdcda&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.1/ja/charset-database.html&#34;&gt;MySQL ::   MySQL 5.1 リファレンスマニュアル :: 9.3.2 データベースのキャラクタセットおよび照合順序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/maeyan/20090811/1250008156&#34;&gt;MySQLでutf8を扱う場合。 - ×××Diary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://apps.timwhitlock.info/emoji/tables/unicode&#34;&gt;Emoji unicode characters for use on the web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ScalaのORMapperのSquerylを試してみてハマった３つのこと</title>
      <link>http://blog.restartr.com/2011/08/16/3-things-that-i-was-in-trouble-using-squeryl</link>
      <pubDate>Tue, 16 Aug 2011 08:00:15 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2011/08/16/3-things-that-i-was-in-trouble-using-squeryl</guid>
      <description>&lt;p&gt;ScalaのORMとしてSquerylってのがあります。&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://squeryl.org/index.html&#34;&gt;Squeryl - A Scala ORM for SQL Databases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
使い方は上記リンク先を見ればだいたいわかります。&lt;/p&gt;

&lt;p&gt;あと、&lt;a href=&#34;http://twitter.com/jugyo&#34;&gt;@jugyo&lt;/a&gt;さんのブログに導入あたりはまとまっていますし、つまづいたらGoogleGroupで検索すれば何か見つかるかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.twiwt.org/e/f34763&#34;&gt; Twiwt:Blog / jugyo : squeryl を試す &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.twiwt.org/e/7e40ce&#34;&gt;Twiwt:Blog / jugyo : Squeryl の使い方 - セットアップ, モデルの定義, テーブル作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/group/squeryl/about&#34;&gt; Squeryl | Google Groups &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
さて、今回はTwitterっぽいものを想定して機能を試してみたのですが、３つほどハマったところを記しておきます。&lt;/p&gt;

&lt;p&gt;環境はScala2.9.0.1、Sbt0.7.7、MySQL5.5、Squeryl0.9.4です。&lt;/p&gt;

&lt;p&gt;ソースはgistに登録。それを本文末尾にも掲載しておきました。&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;１．プライマリーキーの指定での嵌りどころ&lt;/h3&gt;
1つのカラムがPKとなるテーブルスキーマの場合、org.squeryl.KeyedEntity[T]を継承して使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;
class Users(id: Long, text: String) extends KeyedEntity[Long]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;KeyedEntityにはidというフィールドが用意されていて、継承時に型を指定することで、PKの型に適用させることができます。今回の場合であればLong型のPK「id」ということになります。&lt;/p&gt;

&lt;p&gt;ただし、この場合、PKはautoincrementedになってしまいます。&lt;/p&gt;

&lt;p&gt;コード的には下記のようにKeyedEntity[T]を使わずSchema継承時に定義するのと同等になるわけです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;
class Users(id: Long, text: String)

class Db extends Schema {

  val users = table[User](&amp;quot;users&amp;quot;)

  on(users)(u =&amp;gt; declare(

    u.id is (primaryKey, autoincremented))

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは結構困ります。そんな場合はSchemaを継承するときに定義を上書きすればOK。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;
class Users(id: Long, text: String) extends KeyedEntity[Long]

class Db extends Schema {

  val users = table[User](&amp;quot;users&amp;quot;)

  on(users)(u =&amp;gt; declare(

    u.id is (primaryKey))

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これはSquerylのGoogleGroupに書いてました。&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/squeryl/BTrKBwikMqs&#34;&gt;how to cancel &amp;ldquo;autoincremented&amp;rdquo; from KeyedEntity[T]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;２．DDLのカラムの順番の嵌りどころ&lt;/h3&gt;
Db.printDdlを実行した時にカラムの順番が予測できません。&lt;/p&gt;

&lt;p&gt;PKが最初にくるのかと思えばそうでもないみたい。ここは細かく追ってないですが、これもGoogleGroupに答えがありました。&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/squeryl/ZwiDf5Q-IUI&#34;&gt;CREATE TABLE columns in order of constructor arguments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
答えとしては、org.squeryl.internals.DatabaseAdapter:: writeCreateTableあたりをorverrideしてなんとかしてくれとのこと。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/max-l/Squeryl/blob/master/src/main/scala/org/squeryl/internals/DatabaseAdapter.scala#L255&#34;&gt;https://github.com/max-l/Squeryl/blob/master/src/main/scala/org/squeryl/internals/DatabaseAdapter.scala#L255&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なんか良い方法はないの…&lt;/p&gt;

&lt;p&gt;とりあえず、printDdlした結果をコピーして、順番だけ書き換えて、手動で直接DBにクエリ発行すればなんとかなるでしょう。&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;３．外部キーの利用でのはまりどころ&lt;/h3&gt;
２つのテーブルにRelationを設定してからDb.createした際、外部キーが設定されない問題がありました。&lt;/p&gt;

&lt;p&gt;MySQLは5.5を使っているので外部キーに対応していない訳でもないです。&lt;/p&gt;

&lt;p&gt;問題はAdapterの選定にありました。&lt;/p&gt;

&lt;p&gt;org.squeryl.adapter.MySQLAdapter&lt;/p&gt;

&lt;p&gt;をつかっていたのですが、&lt;/p&gt;

&lt;p&gt;org.squeryl.adapter.MySQLInnoDBAdapter&lt;/p&gt;

&lt;p&gt;を使えばOKでした。&lt;/p&gt;

&lt;p&gt;根本の原因は、org.squeryl.adapter.MySQLAdapterに&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;
override def supportsForeignKeyConstraints = false

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と定義してあり、一方のorg.squeryl.adapter.MySQLInnoDBAdapterには&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;
override def supportsForeignKeyConstraints = true

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と定義してあります。&lt;/p&gt;

&lt;p&gt;この値がtrueになっていないとForeignKeyの制約がDDLに含まれなくなってしまうので注意です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/max-l/Squeryl/blob/master/src/main/scala/org/squeryl/adapters/MySQLAdapter.scala#L75&#34;&gt;Docコメントにも書いてある&lt;/a&gt;ので注意です。&lt;/p&gt;

&lt;p&gt;以上、Squerylを弄ってみて嵌ったことをまとめてみました。&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Squerylの使用感&lt;/h3&gt;
ちょっと前にTwitterのStreamAPIのデータをMySQLに格納するためにSquerylを使ったのと今回少し弄ってみただけなのでまだまだ知らないことだらけです。他にも機能的はたくさん用意されていると思いますし、APIも割となじみやすいので複雑すぎないテーブル定義の場合には積極的にSquerylを使っていこうと思います。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;※ドキュメントや本体のソースを追いかけたりしながら使い方を学ぶのは非常に楽しいです:)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;で、ソースは以下です。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/1146854.js&#34;&gt; &lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>