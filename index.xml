<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>I Will Survive</title>
    <link>http://blog.restartr.com/</link>
    <description>Recent content on I Will Survive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 08 May 2017 08:00:00 +0900</lastBuildDate>
    <atom:link href="http://blog.restartr.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>&#34;RESTful Web Clients&#34;を読んだ</title>
      <link>http://blog.restartr.com/2017/05/08/restful-web-clients</link>
      <pubDate>Mon, 08 May 2017 08:00:00 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2017/05/08/restful-web-clients</guid>
      <description>

&lt;p&gt;米オライリーから出版されている「RESTful Web Clients」という書籍を読みました。最近フロント寄りの開発を行っているのもあって、4月中に毎朝コツコツ読み進めていました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B06X1B71QY/ref=as_li_ss_il?ie=UTF8&amp;qid=1494131950&amp;sr=8-1&amp;keywords=restful+web+clients&amp;linkCode=li2&amp;tag=route36502-22&amp;linkId=63a85815c7f0d583a697582ccd883027&#34; target=&#34;_blank&#34;&gt;&lt;img style=&#34;width:122px;height:160px&#34; border=&#34;0&#34; src=&#34;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B06X1B71QY&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=route36502-22&#34; &gt;&lt;/a&gt;&lt;img src=&#34;https://ir-jp.amazon-adsystem.com/e/ir?t=route36502-22&amp;l=li2&amp;o=9&amp;a=B06X1B71QY&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://shop.oreilly.com/product/0636920037958.do&#34;&gt;RESTful Web Clients - O&amp;rsquo;Reilly Media&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;著者はRESTful Web APIs等を書いたMike Amundsen氏。
直近では&lt;a href=&#34;http://shop.oreilly.com/product/0636920050308.do&#34;&gt;Microservice Architecture&lt;/a&gt;も共同で書いていたようです。&lt;/p&gt;

&lt;h3 id=&#34;reusable-client-appsを目指して:6a6d1d88099dc73c9ebfab138a768072&#34;&gt;Reusable Client Appsを目指して&lt;/h3&gt;

&lt;p&gt;hypermedia clientsをテーマにした書籍です。
変更に強いクライアント実装とはどういう姿なのか。
クライアントはhypermedia APIをどう扱えばよいか。
タスク管理システムを例に具体的なコードを示しながら解説されています。
サーバー視点とクライアント視点両方の側からAPI設計について書かれている点が特徴的だと思います。&lt;/p&gt;

&lt;p&gt;章ごとに、サーバーサイドのBobとクライアントサイドのCarolという二人の会話からはじまり、
その後著者によって具体的な設計・実装が解説されていくという形態をとっています。
そのため開発者が抱きがちな疑問を理解したうえで読み進めることができます。&lt;/p&gt;

&lt;p&gt;一般的に自社内でAPIとそのクライアントを実装する場合、両者は密結合していることが多く、
汎用的な設計というのを意識する機会は少ないのではないでしょうか。
サーバー&amp;amp;クライアント間の整合性が主に開発者間のコミュニケーションによって維持されていたのが旧来だとすると、
事前に取り決められた仕様を介して整合性が維持される、というのが本書で提示されるメディアフォーマットだと思います。
アプリケーションに必要なリソースの動的な状態遷移のハンドリングの主導権が、クライアントからサーバー側に移動するイメージです。&lt;/p&gt;

&lt;h3 id=&#34;対象とする読者像:6a6d1d88099dc73c9ebfab138a768072&#34;&gt;対象とする読者像&lt;/h3&gt;

&lt;p&gt;各メディアフォーマットについてはいずれもドラフトレベルという点には注意が必要ですが、
これまでRESTful APIによる静的なリソース設計にとどまっていた方にとっては、
一歩先にすすむための思考の引き出しをつくるための書籍としては使えるかと。&lt;/p&gt;

&lt;p&gt;逆にhypermedia APIについてある程度知識がある方には、あまり有用とは言えないかもしれません。&lt;/p&gt;

&lt;h3 id=&#34;価格:6a6d1d88099dc73c9ebfab138a768072&#34;&gt;価格&lt;/h3&gt;

&lt;p&gt;ちなみに、Kindle版でも5,000円ちょっとします。
ページ数のわりには値段設定が高すぎる気が。
もし日本語訳でるとしたらいくらになるんだ&amp;hellip;？
価格を考えるとよほど目的がハッキリしていない限りは買わなくても良かったかな…というのが正直な感想です。&lt;/p&gt;

&lt;p&gt;下記にサンプルコードがいくつかあるので、書籍サンプルと合わせて確認したうえで購入を検討することをオススメします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RWCBook/&#34;&gt;RESTful Web Clients Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>フロントエンドエンジニアになった</title>
      <link>http://blog.restartr.com/2017/05/07/frontend-engineer</link>
      <pubDate>Sun, 07 May 2017 08:00:00 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2017/05/07/frontend-engineer</guid>
      <description>&lt;p&gt;4月からお世話になっている常駐先にて、フロントエンドエンジニアとしてプロジェクトに関わっています。
かわりにインフラレイヤーにはほぼ関わらなくなったので、技術レイヤーがフロントにシフトした感じです。
「フロントエンジニアになった」というより「入門した」のほうがしっくりくるかもしれません。&lt;/p&gt;

&lt;p&gt;ここ数年は、サーバーサイドのWebAPIより裏側のアプリケーション設計開発やインフラ運用を中心にやってきました。
フロントエンドまわりに関わってみようと思った発端としては、
たとえばAPI設計においてRESTfulが必ずしも最適解でないこともあるとはいいつつ、
それを肌感として持てるか否かは実際やってみないとわからないよね、という思いがあります。
本当に使いやすいAPI設計ができているのかと…&lt;/p&gt;

&lt;p&gt;また、サービスが提供する機能そのもの（＝ユーザーが直接目にするもの）を手掛けるチャンスがあればという希望もあり、技術的視野を広げるべくフロントエンドにチャレンジしています。&lt;/p&gt;

&lt;p&gt;技術スタックとしては、Rails5+React/Redux製のSPAがGCP上で動いています。
Rails以外は知らぬことばかり。&lt;/p&gt;

&lt;p&gt;小さなバグフィックスから始めて1ヶ月経過してやっと徐々にUIコンポーネントの修正や追加に慣れ始めたところ。
当面はフロントエンド開発を中心にやっていく予定ですが、自分の得意としてきたバックエンドまわりの知識もすぐに陳腐化してしまわないようにメンテしていく必要性も感じています。&lt;/p&gt;

&lt;p&gt;ということで、フルスタック（な視点をもった）エンジニア目指して精進します。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>フリーランス1社目の契約を満了した</title>
      <link>http://blog.restartr.com/2017/04/02/retrospective--a-newbie-freelancer</link>
      <pubDate>Sun, 02 Apr 2017 14:24:40 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2017/04/02/retrospective--a-newbie-freelancer</guid>
      <description>

&lt;p&gt;開業以来お世話になっていた企業との契約が2017年3月末で完了しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;期間: 2016年06月 - 2017年03月 (10ヶ月)&lt;/li&gt;
&lt;li&gt;担当: サーバーアプリケーション開発(ToCスマホアプリのバックエンド)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参画した日がちょうどサービスローンチ日。
出社して席についた時「ちょうど公開したところなんです」と言われたことが強く印象に残っています。
それから2回ほど契約を延長いただき早10ヶ月。3月末で無事契約を満了することとなりました。&lt;/p&gt;

&lt;p&gt;コンシューマー向けスマートフォンアプリ(iOS/Android)のバックエンドAPIの開発運用を主に担当しました。
開発チームのなかで、バックエンドAPIまわりの担当は1〜2人と少人数体制でした。&lt;/p&gt;

&lt;h3 id=&#34;橋渡し的な役割:ee2ed74f14a57708c461489930223b44&#34;&gt;橋渡し的な役割&lt;/h3&gt;

&lt;p&gt;初期はローンチまで開発を担った社員の方から徐々にタスクを引き継ぎつつ、ローンチ後の足場固めを行いました。
中期になると単独でバックエンドAPIまわりを担当し、新規機能追加や日々の運用を行いました。
後期は新しく社員の方がJOINされたのを契機として、主開発者としての引き継ぎやコードレビューによるサポートを主に行いました。&lt;/p&gt;

&lt;p&gt;全体を通してみると、社内の開発リソースが確保できるまでの橋渡し的な役割を果たせたのではないかと思います。&lt;/p&gt;

&lt;h3 id=&#34;go-in-production:ee2ed74f14a57708c461489930223b44&#34;&gt;Go in production&lt;/h3&gt;

&lt;p&gt;これまでGoは趣味プログラミングや社内向けの簡易的なツール程度に使った事しかなく、本番稼働するGoプロダクトの開発は今回が初めてのケースでした。
ディレクトリ構成やインターフェース定義といった詳細なものから、ビルドフローやデプロイ方法まで、開発サイクルをまわすためのノウハウを学びました。
基本的には他のメンバーがすでにレールを敷いてくれていたので、自分はその上を走っていただけですが。&lt;/p&gt;

&lt;p&gt;Goのテストまわりはまだまだ未成熟で、記述スタイルに多様性が生まれやすいかなというのが率直な感想です。
がっちりフレームワークによるサポートがあるわけでもないので、その点は模索が必要であると感じました。&lt;/p&gt;

&lt;h3 id=&#34;microservices-in-production:ee2ed74f14a57708c461489930223b44&#34;&gt;Microservices in production&lt;/h3&gt;

&lt;p&gt;携わったシステムはMicroservices構成をとっていました。
アプリの動作に関わるAPI系だけでも10数個のサービスから成り立っているため、全体を俯瞰するとそれなりの規模感でした。&lt;/p&gt;

&lt;p&gt;ローンチ時点でMicroservices構成をとっているサービスはまだまだ少ないと思います。
チーム構成とシステム構成は密接に関係するため、現状の少人数なチーム構成を鑑みても改善の余地はあるかもしれません。&lt;/p&gt;

&lt;p&gt;ただ、新メンバーにとっては初期の関心事を限定できるというProsも確かに感じましたし、
データアクセス経路を整然としたものに維持していくためにも有用なものと言えるでしょう。&lt;/p&gt;

&lt;p&gt;初期段階での落とし所としては、物理的なサービス分割を見据えた論理的分割が妥当なところなのかな、と。
開発時のリポジトリ（＝サービス）の行き来と、それらの共有物（＝ライブラリ）のコントロールが大変なので、
そのコストに見あるメリットを見いだせるか否かは常に意識しておかないといけないと感じました。&lt;/p&gt;

&lt;p&gt;システムアーキテクチャというのは取捨選択の連続である、ということを改めて実感できたように思います。&lt;/p&gt;

&lt;h3 id=&#34;フリーランスとしての未経験分野への挑戦:ee2ed74f14a57708c461489930223b44&#34;&gt;フリーランスとしての未経験分野への挑戦&lt;/h3&gt;

&lt;p&gt;実際フリーランスになるまでは、フリーランスは基本的にそれまで積み上げてきた技術や知識で戦っていくものだというイメージをもっていました。
ですが、今回の案件に関してGoもMicroservicesも未経験分野にもかかわらず挑戦の機会が得られたことに、そのイメージを良い意味で覆されました。
すべての案件で同じ事が言えるわけではないと思いますが、フリーランスでも当面はやっていけそうです。&lt;/p&gt;

&lt;h3 id=&#34;今後の活動について:ee2ed74f14a57708c461489930223b44&#34;&gt;今後の活動について&lt;/h3&gt;

&lt;p&gt;次の案件も１サービスにフルタイムで参画します。
ただ、並行して案件を受けることも可能と考えているので、ご要望がありましたらお気軽にご相談いただければ幸いです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.restartr.com/#accounts&#34;&gt;contact&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2016年ふりかえり</title>
      <link>http://blog.restartr.com/2016/12/31/things-of-2016</link>
      <pubDate>Sat, 31 Dec 2016 22:00:00 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2016/12/31/things-of-2016</guid>
      <description>

&lt;p&gt;2016年も残りあとわずか。ざっくり個人的ふりかえりをしてみたいと思います。&lt;/p&gt;

&lt;h3 id=&#34;個人的トピック:9fec9f3f6604e168aa628af7104858a7&#34;&gt;個人的トピック&lt;/h3&gt;

&lt;p&gt;2016年5月末で退職して、6月からフリーランスとなりました。
いろいろ迷ったりもしたのですが、結局フリーランスの可能性を捨てきれず思い切った感じです。&lt;/p&gt;

&lt;p&gt;なのですが、フリーランスになってから半年間同じ会社でお世話になっているというのが現状。
その前後で働き方とか大きく変わった感じがあまりないのが心のこりですが、2017年からはもう少し活動の幅を広げていければと考えていたりします。&lt;/p&gt;

&lt;p&gt;あと、アウトプットがなかなか出来ていないのが現実なので、小さいものでもいいからもう少しアウトプットすることを心がけていきたいと思います。&lt;/p&gt;

&lt;h3 id=&#34;やったこと:9fec9f3f6604e168aa628af7104858a7&#34;&gt;やったこと&lt;/h3&gt;

&lt;h4 id=&#34;仕事:9fec9f3f6604e168aa628af7104858a7&#34;&gt;仕事&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;前半

&lt;ul&gt;
&lt;li&gt;国内IaaSからAWS VPC移行&lt;/li&gt;
&lt;li&gt;Railsアプリケーションパフォーマンス改善&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;後半

&lt;ul&gt;
&lt;li&gt;Go製Microservices運用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今年前半は主に最近流行り言葉を借りると「SRE」的な働き方をしていました。
Railsアプリケーションは過去にも経験があるのですが、「レールからはずれたところが改善対象となりやすく、つらみを感じるところであるなぁ」という印象をあらためて抱きました。なかなか難しいですが、目の前のプロダクトと真摯に向き合い目を背けないこと、というのが何より大事だと思います。&lt;/p&gt;

&lt;p&gt;後半はフリーランスとしてGo製Microservicesに対する機能追加や運用なんかをやっていました。
Microservicesといってもすべてのサービスが一人の開発者によって構築されているため、サービス間の行き来のコストが低めなのが有り難い限り。
とはいえ開発者の数に対してサービス数が大きくなりすぎないよう制約を課す、というのが長く運用していくコツなのかなと。&lt;/p&gt;

&lt;h4 id=&#34;個人:9fec9f3f6604e168aa628af7104858a7&#34;&gt;個人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;raspbery pi&lt;/li&gt;
&lt;li&gt;arduino&lt;/li&gt;
&lt;li&gt;Android(Java&amp;amp;Kotlin)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;フィジカルコンピューティングやネイティブアプリ開発に手をだしたりしています。
ずっと裏方の仕事をやってきていて、そっちもまだまだやれることはあるのですが、その一方で技術的視野を広げたい思いもあって個人的に取り組んでいるところです。
来年はもう少し本格的にやっていきたいとか考えてはいるのですが…&lt;/p&gt;

&lt;h3 id=&#34;書籍:9fec9f3f6604e168aa628af7104858a7&#34;&gt;書籍&lt;/h3&gt;

&lt;p&gt;プログラミング&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プログラミング言語Go&lt;/li&gt;
&lt;li&gt;みんなのGo言語&lt;/li&gt;
&lt;li&gt;Kotlinスタートブック -新しいAndroidプログラミング&lt;/li&gt;
&lt;li&gt;基本からしっかり身につくAndroidアプリ開発入門 Android Studio 2.x対応&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;テクノロジー一般&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Site Reliability Engineering&lt;/li&gt;
&lt;li&gt;Soft Skills&lt;/li&gt;
&lt;li&gt;達人プログラマー(2版)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;電子工作・IoT&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;わかる！ 電子工作の基本 100&lt;/li&gt;
&lt;li&gt;MAKERS―21世紀の産業革命が始まる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般教養(?)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;東京一極集中が日本を救う&lt;/li&gt;
&lt;li&gt;人間行動に潜むジレンマ―自分勝手はやめられない？&lt;/li&gt;
&lt;li&gt;まずはこの一冊から 意味がわかる線形代数&lt;/li&gt;
&lt;li&gt;入門 考える技術・書く技術&lt;/li&gt;
&lt;li&gt;ビットコインとブロックチェーン:暗号通貨を支える技術&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということで、2016年中はお世話になりました。
2017年もどうぞよろしくおねがいします :bow:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Re: Goの通信経路選択(net.LookupIP &amp; net.Dial)</title>
      <link>http://blog.restartr.com/2016/09/05/go-netutil</link>
      <pubDate>Mon, 05 Sep 2016 09:00:00 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2016/09/05/go-netutil</guid>
      <description>

&lt;p&gt;先日&lt;a href=&#34;http://blog.restartr.com/2016/08/29/golang-networking/&#34;&gt;Goの通信経路選択(net.LookupIP &amp;amp; net.Dial)&lt;/a&gt;にて、特定のネットワーク内でのDNSRRが効かないという例と対策について書きました。
いろいろ考えた結果、別の解決策が出てきたのでそれをライブラリ化しました。&lt;/p&gt;

&lt;h3 id=&#34;前回の解決策:735331bc13fd604725c856ff665db7d3&#34;&gt;前回の解決策&lt;/h3&gt;

&lt;p&gt;前回は、&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;net.LookupIPでアドレスリストを取得&lt;/li&gt;
&lt;li&gt;アドレスリストからランダムに1つIPを選択&lt;/li&gt;
&lt;li&gt;URLにはホスト名ではなくIPを指定する&lt;/li&gt;
&lt;li&gt;Request.Hostに本来のホスト名(とポート)を指定する&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;という手順で対策を行いました。簡潔にコードを書くとこのようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;addrs, _ := net.Lookup(hostname)
addr := addrs[rand.Intn(len(addrs))]
req.Host = req.URL.Host
req.URL.Host = addr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかし、この手法だとHTTPS接続の際の証明書チェックでコケることになります。
(マスクしてますが実際にはIPは具体的なIPアドレスが入ります)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get https://***.***.***.***/: x509: cannot validate certificate for ***.***.***.*** because it doesn&#39;t contain any IP SANs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さて、この証明書チェックを回避するためにはどうしたら良いでしょう。
どうにもHTTP層では解決できなそうな感じがします。&lt;/p&gt;

&lt;h3 id=&#34;別案-コネクションだけ切り替える:735331bc13fd604725c856ff665db7d3&#34;&gt;別案: コネクションだけ切り替える&lt;/h3&gt;

&lt;p&gt;http.DefaultClientは&lt;code&gt;http.DefaultTransport&lt;/code&gt;を利用しており、この&lt;code&gt;http.DefaultTransport&lt;/code&gt;は&lt;code&gt;Dial&lt;/code&gt;という経路を開く関数への参照を保持しています。
簡単に書くとこんな感じの構造。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;http.Client{
	Transport: http.Transport{
		Dial: (&amp;amp;net.Dialer{}).Dial,
	},
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;Dial&lt;/code&gt;の定義はこんな感じで&lt;code&gt;net.Conn&lt;/code&gt;を返します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Transport struct {
	Dial func(network, addr string) (net.Conn, error)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この関数の中で名前解決とコネクション生成を行っているので、 その前にホスト名をIPに変えてやることができればうまくいきそうです。&lt;/p&gt;

&lt;p&gt;という発想をもとにライブラリを作りました。&lt;/p&gt;

&lt;h3 id=&#34;restartr-go-netutil:735331bc13fd604725c856ff665db7d3&#34;&gt;ReSTARTR/go-netutil&lt;/h3&gt;

&lt;p&gt;良い名前が思いつかなかったので&lt;code&gt;netutil&lt;/code&gt;というパッケージのなかに突っ込みました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ReSTARTR/go-netutil&#34;&gt;github.com/ReSTARTR/go-netutil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このライブラリのなかで&lt;code&gt;netutil.RRDialer&lt;/code&gt;を定義しています。
詳細は&lt;a href=&#34;https://godoc.org/github.com/ReSTARTR/go-netutil&#34;&gt;godoc&lt;/a&gt;をみてもらうのがいちばんですが、やっていることはざっと以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;netutil.RRDialer&lt;/code&gt;のフィールドに実際の接続を行う&lt;code&gt;net.Dialer{}&lt;/code&gt;を保持&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dial(network, address)&lt;/code&gt;で与えられたアドレスをもとに&lt;code&gt;net.LookupIP&lt;/code&gt;から得られたIP(ipv4限定)のリストを取得&lt;/li&gt;
&lt;li&gt;IPリストを任意のルールでソート(デフォルトはランダム)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net.Dialer{}&lt;/code&gt;を使って接続を試みる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実際に使う場合は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &amp;quot;github.com/ReSTARTR/go-netutil&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;したうえで&lt;code&gt;http.Transport.Dial&lt;/code&gt;を入れ替えてやるだけです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;req, _ := http.NewRequest(&amp;quot;GET&amp;quot;, &amp;quot;https://www.google.co.jp/&amp;quot;, nil)
client := http.Client{
	Transport: {
		// 既存のDialを入れ替えてやるだけ
		Dial: netutil.DefaultRRDialer.Dial,
	},
}
res, _ := cleint.Do(req)
fmt.Println(res.Status) // &amp;quot;200 OK&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで、HTTP層は既存の処理を維持したままその下層のコネクションのみ挙動を変えることが出来ます。
ソートアルゴリズムの変更は&lt;code&gt;netutil.RRDialer.Sort&lt;/code&gt;にソート関数を指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;dialer := netutil.RRDialer{
	Sort: func(ips []net.IP) []net.IP {
		return sort.Sort(ByFoo(ips))
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;rfc6724は維持すべきか否か:735331bc13fd604725c856ff665db7d3&#34;&gt;RFC6724は維持すべきか否か&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/rx7/20120413/p1&#34;&gt;DNSラウンドロビンを使った時にアクセス・負荷が偏る話 - 元RX-7乗りの適当な日々&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;ただし、アプリケーション(Firefox等のブラウザとか)によっては、上記のような環境においても、アプリケーション側でラウンドロビンにのっとった実装を行ってくれているようだ。&lt;/p&gt;

&lt;p&gt;ここで言いたかったのは、上記のような可能性がある以上、DNSラウンドロビンを採用している環境で、各IPアドレスでのアクセス・負荷に偏りが出ることは必然であり、RFC準拠である以上、DNSラウンドロビンは場合によっては使い物にならなくなる可能性があるということ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;この記事は2012年とちょっと古くて触れられているのはRFC3484ですが、そのアップデート版がRFC6724になるので意味合い的には変わりません。
アプリケーション側でRFCを上書きするような対応をしている例もある模様。
ということで今回作成したようなライブラリの実装もアリ、という見方で良いような気がします。
(が、実際どうなんでしょうか…)&lt;/p&gt;

&lt;h3 id=&#34;さいごに:735331bc13fd604725c856ff665db7d3&#34;&gt;さいごに&lt;/h3&gt;

&lt;p&gt;以上、前回提案したRFC6724対策案の問題点と、その問題を解決するためのライブラリReSTARTR/go-netutilを作ったお話でした。
今回の対策を考えるにあたって&lt;a href=&#34;https://golang.org/pkg/net/&#34;&gt;net - The Go Programming Language&lt;/a&gt;の実装をかなり読み込んだのですが、
すべてGoで完結しているしコードも読みやすいし変な黒魔術もないからgrepしやすいな、とあらためて思いました。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;※go-netutilでは&lt;code&gt;golang.org/x/net/context&lt;/code&gt;を使っているので&lt;code&gt;context&lt;/code&gt;が同梱される前の1.6でも動くと思います&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Goの通信経路選択(net.LookupIP &amp; net.Dial)</title>
      <link>http://blog.restartr.com/2016/08/29/golang-networking</link>
      <pubDate>Mon, 29 Aug 2016 07:00:00 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2016/08/29/golang-networking</guid>
      <description>

&lt;p&gt;&lt;em&gt;※2016-09-05追記: 本記事の対策では不備があるため&lt;a href=&#34;http://blog.restartr.com/2016/09/05/go-netutil/&#34;&gt;Re: Goの通信経路選択(net.LookupIP &amp;amp; net.Dial)&lt;/a&gt;に続編書きました。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;GoのHTTP通信経路選択の挙動について腑に落ちない点があり、&lt;code&gt;net.LookupIP&lt;/code&gt;/&lt;code&gt;net.Dial&lt;/code&gt;の仕様とそれに伴い生じる接続経路の選択問題、そしてその対策について調べてみました。&lt;/p&gt;

&lt;h3 id=&#34;tl-dr:165353d24c0bb1dfa78b677fc4ac1461&#34;&gt;TL;DR&lt;/h3&gt;

&lt;p&gt;unix環境におけるGoの名前解決まわりの仕様&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;net.LookupIP&lt;/code&gt;はDNSから取得できたアドレスリストをそのまま返すわけではない&lt;/li&gt;
&lt;li&gt;内部ネットワーク間の接続であれば&lt;strong&gt;接続元と接続先がビット列的に近いものを優先したアドレスリスト&lt;/strong&gt;を返す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net.Dial&lt;/code&gt;は&lt;code&gt;net.LookupIP&lt;/code&gt;がかえすアドレスリストの先頭から接続を試みる&lt;/li&gt;
&lt;li&gt;その後、最初に接続が成功したものとのみ通信を行う&lt;/li&gt;
&lt;li&gt;DNSラウンドロビン等で複数アドレスに分散したい場合、この仕様により経路が固定されてしまう可能性がある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前提条件などによって挙動がかわりますので、ここから深掘りしていきます。&lt;/p&gt;

&lt;h3 id=&#34;前提とする環境:165353d24c0bb1dfa78b677fc4ac1461&#34;&gt;前提とする環境&lt;/h3&gt;

&lt;p&gt;今回は以下の環境を想定としています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unix系OSを利用している&lt;/li&gt;
&lt;li&gt;Go1.5以降を利用している&lt;/li&gt;
&lt;li&gt;IPv4を利用している&lt;/li&gt;
&lt;li&gt;AWSのVPCなど内部ネットワークを構築している&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;goの-net-lookupip-と-net-dial-の仕様:165353d24c0bb1dfa78b677fc4ac1461&#34;&gt;Goの&lt;code&gt;net.LookupIP&lt;/code&gt;と&lt;code&gt;net.Dial&lt;/code&gt;の仕様&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/net/#LookupIP&#34;&gt;net.LookupIP - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;net.LookupIP&lt;/code&gt;は以下のような仕様となっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名前解決は&lt;code&gt;getaddrinfo&lt;/code&gt;相当をGoで実装&lt;/li&gt;
&lt;li&gt;解決した結果のアドレスリストを&lt;a href=&#34;https://tools.ietf.org/html/rfc6724&#34;&gt;RFC6724&lt;/a&gt;にもとづいてソートを実施&lt;/li&gt;
&lt;li&gt;ソート済みアドレスリストを呼び出し元に返す&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このRFC6724に基づいたソート処理によって&lt;strong&gt;DNSが返すアドレスリストの順序が変更されてしまう可能性&lt;/strong&gt;があり、
その可能性は接続元と接続先の組み合わせに依存しています。
(※ソート処理実装である&lt;code&gt;sortByRFC6724&lt;/code&gt;の定義は&lt;a href=&#34;https://github.com/golang/go/blob/release-branch.go1.7/src/net/addrselect.go&#34;&gt;go/addrselect.go&lt;/a&gt;を参照)&lt;/p&gt;

&lt;p&gt;ちなみに、このRFC6724によるソートはgo-1.5以降のバージョンに含まれる(&lt;a href=&#34;https://github.com/golang/go/commit/adb1e030136f14ef8434930f15a04a74568a5948&#34;&gt;net: RFC 6724 address selection · golang/go&lt;/a&gt;)ので、それ以前のバージョンでは挙動が異なってくると思います。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;net.Dial&lt;/code&gt;は&lt;code&gt;net.LookupIP&lt;/code&gt;がかえすアドレスリストの先頭から接続を試みていき、最初に接続成功したアドレスを最終的な接続先とします。そのため、最終的なDial先IPは&lt;code&gt;net.LookupIP&lt;/code&gt;の結果に強く依存することになります。&lt;/p&gt;

&lt;h3 id=&#34;sortbyrfc6724-内部のソート仕様:165353d24c0bb1dfa78b677fc4ac1461&#34;&gt;&lt;code&gt;sortByRFC6724&lt;/code&gt;内部のソート仕様&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/blob/release-branch.go1.7/src/net/addrselect.go&#34;&gt;src/net/addrselect.go&lt;/a&gt;をみると、10ルールがソートにつかわれていることがわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Less reports whether i is a better destination address for this
// host than j.
//
// The algorithm and variable names comes from RFC 6724 section 6.
func (s *byRFC6724) Less(i, j int) bool {
        // Rule 1: Avoid unusable destinations.
        // Rule 2: Prefer matching scope.
        // Rule 3: Avoid deprecated addresses.
        // Rule 4: Prefer home addresses.
        // Rule 5: Prefer matching label.
        // Rule 6: Prefer higher precedence.
        // Rule 7: Prefer native transport.
        // Rule 8: Prefer smaller scope.
        // Rule 9: Use longest matching prefix.
        // Rule 10: Otherwise, leave the order unchanged.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このうち、&lt;code&gt;Rule 9: Use longest matching prefix.&lt;/code&gt;が注目すべき処理となります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Rule 9&lt;/code&gt;では&lt;strong&gt;接続元と接続先が特定のブロックに存在している場合に限り、アドレスのビット列の一致する長さをスコアとします。&lt;/strong&gt;
そして&lt;code&gt;sortByRFC6724&lt;/code&gt;はこのスコアの高いものを優先してリストをソートします。&lt;/p&gt;

&lt;h3 id=&#34;ソートのスコア算出処理の検証:165353d24c0bb1dfa78b677fc4ac1461&#34;&gt;ソートのスコア算出処理の検証&lt;/h3&gt;

&lt;p&gt;このスコア算出処理はnetパッケージに閉じられていますが、なんとか動作を検証してみます。&lt;/p&gt;

&lt;p&gt;AWSのVPCにinternalELBを立てた場合を例を以下に記します。&lt;code&gt;10.0.0.0/16&lt;/code&gt;のVPC内に以下4つのサブネットが存在する環境を想定しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10.0.0.0/24
10.0.1.0/24
10.0.2.0/24
10.0.3.0/24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここにinternal ELBを配置した結果、&lt;code&gt;10.0.0.2&lt;/code&gt;のVPC用DNSにELBの名を問い合わせると以下4つのIPが取得できるようになったとします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10.0.0.104
10.0.1.12
10.0.2.8
10.0.3.221
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このELBの名前解決を行う際にsortByRFC6724でどのようにソートされるかをみるために、
以下に重要な関数のコピーして幾つかのパターンを試すサンプルを書きました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.golang.org/p/9P17Lm3-KX&#34;&gt;https://play.golang.org/p/9P17Lm3-KX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これは接続元と接続先のIPの組み合わせにおいて各スコアを表示するプログラムであり、
検証する接続元と接続先IPの組み合わせは以下のとおりです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// destination IPs
dsts := []net.IP{
    net.IP{10, 0, 0, 104}, // 10.0.0.0/24
    net.IP{10, 0, 1, 12},  // 10.0.1.0/24
    net.IP{10, 0, 2, 8},   // 10.0.2.0/24
    net.IP{10, 0, 3, 221}, // 10.0.3.0/24
}

// source IPs
srcs := []net.IP{
    net.IP{123, 4, 5, 6},
    net.IP{10, 0, 1, 3},
    net.IP{10, 0, 1, 199},
    net.IP{10, 0, 4, 211},
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行すると結果はこのようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# case1: 外部から問い合わせた場合
src: 123.4.5.6
-&amp;gt; 10.0.0.104   : 1 (same block=false)
-&amp;gt; 10.0.1.12    : 1 (same block=false)
-&amp;gt; 10.0.2.8     : 1 (same block=false)
-&amp;gt; 10.0.3.221   : 1 (same block=false)

# case2: VPC内部の`10.0.1.0/24`から問い合わせた場合
src: 10.0.1.3
-&amp;gt; 10.0.0.104   : 23 (same block=true)
-&amp;gt; 10.0.1.12    : 28 (same block=true)
-&amp;gt; 10.0.2.8     : 22 (same block=true)
-&amp;gt; 10.0.3.221   : 22 (same block=true)

# case3: VPC内部の`10.0.1.0/24`から問い合わせた場合
src: 10.0.1.199
-&amp;gt; 10.0.0.104   : 23 (same block=true)
-&amp;gt; 10.0.1.12    : 24 (same block=true)
-&amp;gt; 10.0.2.8     : 22 (same block=true)
-&amp;gt; 10.0.3.221   : 22 (same block=true)

# case4: ELBが所属しない別サブネットから問い合わせた場合
src: 10.0.4.211
-&amp;gt; 10.0.0.104   : 21 (same block=true)
-&amp;gt; 10.0.1.12    : 21 (same block=true)
-&amp;gt; 10.0.2.8     : 21 (same block=true)
-&amp;gt; 10.0.3.221   : 21 (same block=true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表示内容は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-&amp;gt; 10.0.1.12    : 24 (same block=true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の場合、&lt;code&gt;10.0.1.12&lt;/code&gt;に対するスコアが&lt;code&gt;24&lt;/code&gt;であり、実際にそのスコアを採用するなら&lt;code&gt;same block=true&lt;/code&gt;になります。&lt;/p&gt;

&lt;p&gt;ここで重要なのは、&lt;strong&gt;VPC外部のIPから問い合わせた場合はスコアはすべておなじ&lt;/strong&gt;であることと、&lt;strong&gt;同じサブネットから問い合わせてもスコアが異なる接続先IPがある&lt;/strong&gt;ことです。&lt;/p&gt;

&lt;p&gt;同じ&lt;code&gt;10.0.1.0/24&lt;/code&gt;から問い合わせても、case3の&lt;code&gt;10.0.1.199&lt;/code&gt;よりcase2の&lt;code&gt;10.0.1.3&lt;/code&gt;のほうが&lt;code&gt;10.0.1.12&lt;/code&gt;に対するスコアが高くなっています。
これは、接続元IPと接続先IPの32bitのビット列から一致するビット長をもとにスコアを算出しているからです。
接続元IPが同じサブネットに所属しているかどうかはスコアに影響しません。&lt;/p&gt;

&lt;h3 id=&#34;経路が固定化されないための対策:165353d24c0bb1dfa78b677fc4ac1461&#34;&gt;経路が固定化されないための対策&lt;/h3&gt;

&lt;p&gt;ここまでで書いたように&lt;code&gt;net.Lookup&lt;/code&gt;が返すアドレスリストは特定の環境下で必ず同じ並びになってしまい、その結果&lt;code&gt;net.Dial&lt;/code&gt;での接続先が固定化されてしまうケースが発生します。
その対策として明示的にランダムなIPで接続する方法が使えます。&lt;/p&gt;

&lt;p&gt;http.Clientを使ったHTTP接続の例だと、手順はこうなります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;net.LookupIP&lt;/code&gt;でアドレスリストを取得&lt;/li&gt;
&lt;li&gt;アドレスリストからランダムに1つIPを選択&lt;/li&gt;
&lt;li&gt;URLにはホスト名ではなくIPを指定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Request.Host&lt;/code&gt;に本来のホスト名(とポート)を指定する&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;簡単な実装例:165353d24c0bb1dfa78b677fc4ac1461&#34;&gt;簡単な実装例&lt;/h4&gt;

&lt;p&gt;何かと貧弱な実装ではありますが、一応ランダムにIPが採用されるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math/rand&amp;quot;
	&amp;quot;net&amp;quot;
	&amp;quot;net/http&amp;quot;
	&amp;quot;net/http/httputil&amp;quot;
	&amp;quot;net/url&amp;quot;
	&amp;quot;strings&amp;quot;
	&amp;quot;time&amp;quot;
)

// random selection from ipaddrs
func pickupIP(host string) (string, error) {
	addrs, err := net.LookupIP(host)
	if err != nil {
		return &amp;quot;&amp;quot;, err
	}
	rand.Seed(time.Now().UnixNano())
	idx := rand.Intn(len(addrs))
	ipaddr := addrs[idx].String()
	return ipaddr, nil

}

func do(req *http.Request) (*http.Response, error) {
	hostport := strings.Split(req.URL.Host, &amp;quot;:&amp;quot;)
	ipaddr, err := pickupIP(hostport[0])
	if err != nil {
		return nil, err
	}

	urlstr := req.URL.Scheme + &amp;quot;://&amp;quot; + ipaddr
	if len(hostport) &amp;gt; 1 {
		urlstr = urlstr + &amp;quot;:&amp;quot; + hostport[1]
	}
	u, err := url.Parse(urlstr)
	if err != nil {
		return nil, err
	}

	// set ipaddr to req.Host and
	// keep the original `Host` header
	req.Host = req.URL.Host
	req.URL.Host = u.Host

	b, err := httputil.DumpRequest(req, true)
	if err != nil {
		return nil, err
	}
	fmt.Println(string(b))

	client := http.DefaultClient
	return client.Do(req)
}

func main() {
	urlstr := &amp;quot;http://internal-user-api-779196100.ap-northeast-1.elb.amazonaws.com:8888/ping&amp;quot;
	req, _ := NewRequest(&amp;quot;GET&amp;quot;, urlstr, nil)
	res, err := do(req)
	if err != nil {
		fmt.Println(err)
	} else {
		fmt.Println(res.Status)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;urlに含まれるホスト名から&lt;code&gt;pickupIP&lt;/code&gt;を使って1つのIPアドレスの文字列を取得しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func pickupIP(host string) (string, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この結果を&lt;a href=&#34;https://golang.org/pkg/net/url/#URL&#34;&gt;&lt;code&gt;url.URL.Host&lt;/code&gt;&lt;/a&gt;に上書きすることで&lt;code&gt;http://10.0.1.104/&lt;/code&gt;のようなIPアドレスによる接続を行います。
さらに、接続先サービスがHostヘッダの値に依存しているケースもあるので&lt;a href=&#34;https://golang.org/pkg/net/http/#Request&#34;&gt;&lt;code&gt;http.Request.Host&lt;/code&gt;&lt;/a&gt;でオリジナルのホスト名を指定しています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// set ipaddr to req.Host and
// keep the original `Host` header
req.Host = req.URL.Host
req.URL.Host = u.Host
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでランダムなIPによる接続が実現できますが、注意点があります。&lt;/p&gt;

&lt;p&gt;HTTP/HTTPSリスナーとしてのELB名から引けるアドレスリストの並びは負荷状況も考慮されています。 しかし、この実装ではそこまで考慮しておらず、単純なランダム選択になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&#34;http://dev.classmethod.jp/cloud/elb-configuration-guide-1/&#34;&gt;AWS ELBの社内向け構成ガイドを公開してみる 負荷分散編 – Cross-Zone Routingを踏まえて ｜ Developers.IO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そもそも、&lt;code&gt;net.LookupIP&lt;/code&gt;にRFC6724によるソートを回避できるオプションがあると嬉しいのですが&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;pure-goとcgoの2つの名前解決の実装:165353d24c0bb1dfa78b677fc4ac1461&#34;&gt;Pure Goとcgoの2つの名前解決の実装&lt;/h3&gt;

&lt;p&gt;今回の主題からはそれますが&lt;code&gt;sortByRFC6724&lt;/code&gt;するまでに行われるDNS問い合わせの実装はPure Goとcgoの2つから選択ができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/net/#hdr-Name_Resolution&#34;&gt;Name Resolution | net - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;デフォルトはPure Goであり、環境変数&lt;code&gt;GODEBUG=netdns=cgo&lt;/code&gt;でcgoを指定できたりします。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default the pure Go resolver is used, because a blocked DNS request consumes only a goroutine, while a blocked C call consumes an operating system thread.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;リソース消費効率がPure Goのほうが良いからというのがPure Goがデフォルトである理由のようです。とくに理由がない限りはデフォルトのままでも良いのではないかなと思っていますが、明示的に指定しなければいけない事例があったら聞いてみたいです。&lt;/p&gt;

&lt;h3 id=&#34;さいごに:165353d24c0bb1dfa78b677fc4ac1461&#34;&gt;さいごに&lt;/h3&gt;

&lt;p&gt;以上がGoの&lt;code&gt;net.LookupIP&lt;/code&gt;/&lt;code&gt;net.Dial&lt;/code&gt;の仕様とそれに伴い生じる接続経路の選択問題、そしてその対策になります。
実際のところELBの場合はよしなにやってくれることが多いのでクリティカルな問題にはつながらない場合がほとんどだとは思いますが、
この内部仕様を知らないことでドハマりすることもありますのでご注意を。私はこの仕様にたどり着くまでに結構手間取ってしまいました😢&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>フリーランスエンジニアになりました</title>
      <link>http://blog.restartr.com/2016/07/04/became-a-freelance-engineer</link>
      <pubDate>Mon, 04 Jul 2016 00:32:23 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2016/07/04/became-a-freelance-engineer</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://gyazo.com/d7f5805614f6be231d145fc2657c8a1d&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/d7f5805614f6be231d145fc2657c8a1d.jpg&#34; alt=&#34;https://gyazo.com/d7f5805614f6be231d145fc2657c8a1d&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2016年06月01日からフリーランスエンジニアとして活動を始めました。
社会人10年目にしてついに脱サラです。&lt;/p&gt;

&lt;h3 id=&#34;フリーランスになるまで:2ba97de1b923b9a6ae21712bf8da01c6&#34;&gt;フリーランスになるまで&lt;/h3&gt;

&lt;p&gt;以前からフリーランスとして活動していきたいと思いながらも、なかなか踏みきれず。だったのですが、ふとしたきっかけで軽く調べてみたら意外となんとかなるんじゃないかということがわかったのがきっかけです。&lt;/p&gt;

&lt;p&gt;実際にフリーランスエンジニアになるにあたり&lt;a href=&#34;https://www.amazon.co.jp/dp/B01GDS0994&#34;&gt;SOFT SKILLS　ソフトウェア開発者の人生マニュアル&lt;/a&gt;を参考にしていたのですが、これには「会社員として副業を営むところから徐々にはじめていくのが良い」みたいに書かれています。ただし、これは米国前提の話であり、どう考えても日本じゃ副業できないパターンがほとんどです。&lt;/p&gt;

&lt;p&gt;ただ、最近はフリーランスのためのエージェントが複数存在していて、案件を安定的に紹介してもらえたりする土壌はあります。さらに契約とかの面倒な部分はエージェントにやってもらえるので、目の前の案件に対して仕事をするだけ。ほとんど会社員時代とあまり変わらなかったりします。&lt;/p&gt;

&lt;p&gt;なので、エージェントを使って安定性を確保しつつ徐々に事業のかたちを固めていければいいな、ということでフリーランスへの道に進むことにしました。&lt;/p&gt;

&lt;p&gt;来年の確定申告だけが気がかりですが、クラウドサービス使ってなんとか切り抜けられると信じています&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;今の仕事とか:2ba97de1b923b9a6ae21712bf8da01c6&#34;&gt;今の仕事とか&lt;/h3&gt;

&lt;p&gt;開業届や青色申告申請書、保険や年金の切替など、個人事業主になってはやめにやらなければいけないことは6月あたまに済ませたので、普通に会社員っぽくオフィスで仕事をしています。すでに一ヶ月経過しましたが、基本的には会社員時代とかわった感じはしません。（些細な違いはもちろんありますが）&lt;/p&gt;

&lt;p&gt;今はアプリケーションエンジニアとしてgoとpythonでプログラムを書いています。ここ3年くらいはruby/railsを中心にAWSまわりの面倒をみることが多かったので、キャリア的にはリセットされたみたいな感じです。pythonは4年位前にで仕事してたけど今はほぼ初心者、goはCLIツールをちょっと作る程度だったのでこれもほぼ初心者。新たに習得べきことは多いですが、得られるものは大きいのでありがたい限りです。&lt;/p&gt;

&lt;p&gt;この先数ヶ月は今の案件に注力するつもりですが、何か面白そうな案件あれば&lt;a href=&#34;http://twitter.com/restartr&#34;&gt;@restartr&lt;/a&gt;までDください🙏&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ErgoDox EZが届いた</title>
      <link>http://blog.restartr.com/2016/03/31/got-my-ergodox-ez</link>
      <pubDate>Thu, 31 Mar 2016 22:39:16 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2016/03/31/got-my-ergodox-ez</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://gyazo.com/e7e0f6876ad58f49a6962df2f3f60a08&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/e7e0f6876ad58f49a6962df2f3f60a08.jpg&#34; alt=&#34;https://gyazo.com/e7e0f6876ad58f49a6962df2f3f60a08&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.restartr.com/2016/02/17/ergodox-ez&#34;&gt;ErgoDox EZを注文した(けどまだ届いてない)&lt;/a&gt;を書いてから1ヶ月半。昨日ようやく到着しました。&lt;/p&gt;

&lt;h3 id=&#34;注文してから届くまで:5f1599e0f50d6ebe05fa15a2c548f9ba&#34;&gt;注文してから届くまで&lt;/h3&gt;

&lt;p&gt;数日前に、ErgoDoxEZのサポートから「不在続きで届けられないからこっちに戻ってきてしまうよ」とメールが届いて事態を把握。
配送業者に問い合わせたところ、住所が間違っていたみたいで、正しい住所を伝えたらすんなり届きました。安心のクロネコヤマトです。着払い1500円也。&lt;/p&gt;

&lt;p&gt;サポートがちゃんとしてるので安心して注文出来ると思います。本当はあと一週間はやく受け取れたはずと思うと少し残念ですが、無事に受け取ったので結果オーライです。&lt;/p&gt;

&lt;p&gt;まだまだ慣れきってない状況ですが、まずはファーストインプレッションをErgoDox EZで書きます。&lt;/p&gt;

&lt;p&gt;既存の環境は&lt;code&gt;MacBook Air + HHKB pro2&lt;/code&gt;であり、それとの比較を交えつつの感想です。&lt;/p&gt;

&lt;h2 id=&#34;届いてみて:5f1599e0f50d6ebe05fa15a2c548f9ba&#34;&gt;届いてみて&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gyazo.com/5c5801ea3dec3f5fae76e5d4a992117e&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/5c5801ea3dec3f5fae76e5d4a992117e.jpg&#34; alt=&#34;https://gyazo.com/5c5801ea3dec3f5fae76e5d4a992117e&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;何より箱がデカくてビビります。だいたいiPad4枚分。
パームレストはどっしり重みのあるゴム製。ティルトさせる前提ならケチらずセットで買うべきです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gyazo.com/491b07cd447c8fda6186e7dcd850b079&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/491b07cd447c8fda6186e7dcd850b079.jpg&#34; alt=&#34;https://gyazo.com/491b07cd447c8fda6186e7dcd850b079&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;左右に3つづつ用意されたティルトテントは調整の幅があって結構自由度が高いです。最初の写真のように中心を上げて手前に少し傾けるのがしっくりきています。&lt;/p&gt;

&lt;p&gt;余談ですが、妙な新品の匂いがします。どことなく嗅いだことのある匂いだけどなんだっけかな。。。ちょっと手に残りますがそのうちとれるでしょう。&lt;/p&gt;

&lt;p&gt;筐体の完成度はかなり高いです。さすがに高級品だけあります。&lt;/p&gt;

&lt;h3 id=&#34;キースイッチ-白軸-について:5f1599e0f50d6ebe05fa15a2c548f9ba&#34;&gt;キースイッチ(白軸)について&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://gyazo.com/bbd65c66610fac24e98bcfd4090a069e&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/bbd65c66610fac24e98bcfd4090a069e.jpg&#34; alt=&#34;https://gyazo.com/bbd65c66610fac24e98bcfd4090a069e&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;静電容量無接点からのりかえても十分に満足できるものだと思います。
HHKBより断然軽く、リアルフォースよりも軽いのではないかと。
打鍵音はメカニカルらしい高めのシャコシャコした感じだけど、そこまで五月蠅いとは感じません。
また、全く反発がないわけではなく、必要最低限に抑えられた感じ。
これ以上軽いとさすがに物足りなさが生まれそうなギリギリのラインかと。&lt;/p&gt;

&lt;p&gt;しばらく白軸を叩いた後でHHKBに戻るとものすごく沈み込み重く、跳ね返りも強く感じるようになりました。
キートップがHHKBと同じPBTなので指先の感触はほぼ同じです。&lt;/p&gt;

&lt;p&gt;軽すぎてミスタイプするといった現象はいまのところ皆無です。gのキーが若干引っかかるのがちょっと気になりますが…&lt;/p&gt;

&lt;p&gt;ErogDoxの魅力の一つがこのCherry互換スイッチを採用しているところ。このErgoDox EZのキーのままでも良いのですが、気分を変えることも容易です。&lt;a href=&#34;https://www.massdrop.com&#34;&gt;Massdrop&lt;/a&gt;とかを覗いてみるとたくさんのCherry互換のキートップが出てきます。これは静電容量無接点界隈にはない魅力ではないかと思っています。&lt;/p&gt;

&lt;h3 id=&#34;使ってみて:5f1599e0f50d6ebe05fa15a2c548f9ba&#34;&gt;使ってみて&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://ergodox-ez.com/ergodox_ez_keymap_highres.png&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/6c78301042c8da169258cb2c5a400b5e.png&#34; alt=&#34;ErgoDox EZ Default Firmware Keymap&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;デフォルトのファームでもそれなりに叩けます。
QWERTYなので英数字は問題ないですが、それ以外のメタキーはどこになにがあるかわからなすぎるのでチートシート必須だし、どうにもならなくなった時の緊急避難先としてHHKBも近くにおいておくと安心です。&lt;/p&gt;

&lt;p&gt;とりあえず今はこのデフォルトの配列のまま操作しています。&lt;/p&gt;

&lt;p&gt;キーの並びが縦に揃っているので上下移動がこれまでとちょっと違ってミスタイプしやすいです。
また、おなじメタキーが複数箇所に配置されていて、どのように使い分けたらよいかよくわからないのですが、これも慣れ次第でしょう。&lt;/p&gt;

&lt;p&gt;左手親指でSpaceとBackspace、右手親指でEnterとTab。右手小指で「ッターン」しないのが新鮮です。&lt;/p&gt;

&lt;p&gt;ファンクションキー等が配置される&amp;rdquo;CoderLayer&amp;rdquo;には一番右下のキーで切り替えを、マウスキーなどが配置される&amp;rdquo;Media Layer&amp;rdquo;には右手小指位置にある&amp;rdquo;:;&amp;ldquo;キーとの組み合わせで操作します。HHKBユーザーであればFnキーによる切り替えで慣れているので違和感は無いかと。&lt;/p&gt;

&lt;p&gt;正直Media Layerまで使うかというとちょっと微妙ですが、使っていくうちに最高の使い方がみつかるかもしれません。&lt;/p&gt;

&lt;h3 id=&#34;vimを操作してみて:5f1599e0f50d6ebe05fa15a2c548f9ba&#34;&gt;vimを操作してみて&lt;/h3&gt;

&lt;p&gt;vimのキーバインドとの相性があまりよくないように思うのですが、なれてないだけなのか、それ用にファーム入れたほうが良いのかまだわかっていないです。CtrlはZ長押しか、右手親指の位置にあるキーのどちらかに割り当てられています。いまのところ右手親指のキーを使っていますがどうにも慣れず。。。&lt;/p&gt;

&lt;p&gt;やはり長年手に染みこんだキーバインドを置き換えるのはちょっとしんどいです。ここは素直に左手小指のAの隣に割り当てるべきと考えています。また別の機会にでもそのあたりを書ければと。&lt;/p&gt;

&lt;p&gt;下記にデフォルトのキーマップがあるのでこれをカスタマイズするのがよさそうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/msc654/qmk_firmware/tree/master/keyboard/ergodox_ez/keymaps/default&#34;&gt;github.com/msc654/qmk_firmware&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;左右に配置された方向キーが思いの外便利。HHKBではFnとの組み合わせで移動するのが面倒でビジュアルモードでの移動を多用していたけど、これならインサートモードのまま左右の親指での移動で事足りる事が多くなりました。&lt;/p&gt;

&lt;h3 id=&#34;結論:5f1599e0f50d6ebe05fa15a2c548f9ba&#34;&gt;結論&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://gyazo.com/52d38352415a964796210d8de25c7d6c&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/52d38352415a964796210d8de25c7d6c.jpg&#34; alt=&#34;https://gyazo.com/52d38352415a964796210d8de25c7d6c&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まだ慣れていない時点で結論付けるのは早い気もしますが、慣れてしまえばきっと最高のツールとして長く使える代物になると思います。&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2016/03/25/203734&#34;&gt;ErgoDoxを購入して人生がバラ色になった - YAMAGUCHI::weblog&lt;/a&gt;でも絶賛されていたとおり。気になる方は今すぐ注文することをオススメします。&lt;/p&gt;

&lt;iframe src=&#34;https://www.indiegogo.com/project/ergodox-ez-an-incredible-mechanical-keyboard/embedded&#34; width=&#34;222px&#34; height=&#34;445px&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;また二週間くらい使い込んでからのインプレッションも書きたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2016-04-10追記: 打鍵音を比較してみました&lt;/em&gt;&lt;/p&gt;

&lt;iframe width=&#34;320&#34; height=&#34;180&#34; src=&#34;https://www.youtube.com/embed/it0dF4jdK4E&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>OctopressからHugoに移行</title>
      <link>http://blog.restartr.com/2016/03/13/from-octopress-to-hugo</link>
      <pubDate>Sun, 13 Mar 2016 20:00:00 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2016/03/13/from-octopress-to-hugo</guid>
      <description>

&lt;p&gt;Octopressを使い始めて約2年。&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;に乗り換えました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.restartr.com/2014/04/06/move-from-wordpress-to-octopress/&#34;&gt;WordpressからOctopressに移行&lt;/a&gt;が2014年の4月なので約2年です。
そんなに記事はたくさん書いているわけでなはいのですが、それでも&lt;code&gt;rake preview&lt;/code&gt;しながら編集しているときのストレスはそれなりにありました。
なので、快適さを得るためにHugoに乗り換えました。&lt;/p&gt;

&lt;h3 id=&#34;やったこと:d50ea5a11adcf7e2a2a926330a4f05a0&#34;&gt;やったこと&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hugo new&lt;/code&gt;でプロジェクト生成した

&lt;ul&gt;
&lt;li&gt;Octopressのmarkdownファイルのみ&lt;code&gt;content/post&lt;/code&gt;以下にコピー&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;permalinkの設定を維持できず、シェルスクリプトでslugを追加した

&lt;ul&gt;
&lt;li&gt;config.tomlで&lt;code&gt;post = /:year/:month/:day/:title&lt;/code&gt;とすると&lt;code&gt;/2016/01/01/2016-01-01-hogehoge&lt;/code&gt;のようなパーマリンクになってしまう&lt;/li&gt;
&lt;li&gt;slugを設定しておけばそのままいけるので修正した。&lt;/li&gt;
&lt;li&gt;生成元がマルチバイト含んでるとエスケープ処理まわりで互換性が壊れるのでaliasを設定した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yet.unresolved.xyz/blog/2015/01/07/how-to-use-multibyte-title-in-hugo/&#34;&gt;Hugoでマルチバイトのタイトルをうまいこと使う - Unresolved&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/extras/aliases/&#34;&gt;https://gohugo.io/extras/aliases/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマのhydeをカスタムして最低限の要素を取り入れた後、&lt;a href=&#34;https://github.com/digitalcraftsman/hugo-cactus-theme&#34;&gt;cactus&lt;/a&gt;に乗り換えた

&lt;ul&gt;
&lt;li&gt;ソーシャルタグとか色日調整とか細かいところに手を入れた&lt;/li&gt;
&lt;li&gt;本当はもう少しマシにしたいけどとりあえずここまで&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;最後に手動で1ファイルずつ調整した

&lt;ul&gt;
&lt;li&gt;Wordpress時代の設定とか残ってたり、descrptionが雑だったりしたので最終的に1つずつメタデータを修正&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ファイル名からslugを追記するシェルスクリプト:d50ea5a11adcf7e2a2a926330a4f05a0&#34;&gt;ファイル名からslugを追記するシェルスクリプト&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

for file in $(ls content/post | grep &#39;\.markdown$&#39;); do
  SLUG=&amp;quot;$(echo ${file:11} | sed -E &#39;s/.markdown$//&#39;)&amp;quot;
  [ -z $SLUG ] &amp;amp;&amp;amp; continue

  file=&amp;quot;./content/post/$file&amp;quot;
  echo $file
  cat &amp;lt;&amp;lt;EOF &amp;gt; $file.tmp
---
slug: &amp;quot;${SLUG}&amp;quot;
EOF
  cat $file.tmp
  sed -e &#39;1,1d&#39; ${file} &amp;gt;&amp;gt; $file.tmp
  mv $file.tmp $file
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行する前に、content/post以下はコミットしておいたほうが安心かと。
で、実行おわったら再度&lt;code&gt;git add&lt;/code&gt;して&lt;code&gt;git commit&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;github-pagesのリポジトリへの登録:d50ea5a11adcf7e2a2a926330a4f05a0&#34;&gt;github pagesのリポジトリへの登録&lt;/h3&gt;

&lt;p&gt;あとは&lt;a href=&#34;https://github.com/ReSTARTR/restartr.github.io&#34;&gt;ReSTARTR/restartr.github.io&lt;/a&gt;をsubmoduleにしてそこに生成ファイルを配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add git@github.com:restartr/restartr.github.io public

# 必要なファイルを生成元にコピー
cp ./public/{CNAME,humans.txt,crossdomain.xml} ./content

# いったん全削除
cd public &amp;amp;&amp;amp; rm -rf ./$(git ls-files | grep -v gitignore) &amp;amp;&amp;amp; cd ..

# コンテンツ生成
hugo -d public

# 別ブランチにcommit &amp;amp;&amp;amp; push
cd publid
git checkout migrate-to-hugo
git add -A .
git commit -m &#39;Migrate to Hugo&#39;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは、githubでプルリクエストつくってマージすればOK。
失敗したらRevertできるので安心です。&lt;/p&gt;

&lt;p&gt;という感じで移行が完了したわけですが、テーマとか周辺環境はOctopressに比べると貧弱です。
が、一度もろもろ設定してしまったらそんなにいじることもないしまぁ問題ないかと思います。&lt;/p&gt;

&lt;p&gt;ストレス感じながら文章かくよりは、気持よく文章書けるほうが良いです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ec2-ls-hosts: EC2インスタンスを一覧するだけのシンプルツール</title>
      <link>http://blog.restartr.com/2016/02/27/ec2-ls-hosts</link>
      <pubDate>Sat, 27 Feb 2016 17:28:53 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2016/02/27/ec2-ls-hosts</guid>
      <description>

&lt;p&gt;EC2インスタンスの一覧を表示するツールをgolangでつくりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ReSTARTR/ec2-ls-hosts&#34;&gt;ReSTARTR/ec2-ls-hosts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下のように、ただインスタンスの情報を列挙するだけのシンプルなツールです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls-hosts
i-00001 10.0.0.1 app01
i-00002 10.0.0.2 app02
i-00003 10.0.0.3 app03
i-00004 10.0.0.4 app04
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;何がうれしいか:b29e9fe288f2c1afa8d247d1c61296b1&#34;&gt;何がうれしいか&lt;/h3&gt;

&lt;p&gt;以下のような状況において、多少便利になるツールです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EC2インスタンスを複数台運用している&lt;/li&gt;
&lt;li&gt;台数が数十台規模である&lt;/li&gt;
&lt;li&gt;AutoScalingを利用していて、IPやドメインが頻繁に変わる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aws ec2 describe-instances&lt;/code&gt;のレスポンスが遅い&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aws ec2 describe-instances&lt;/code&gt;のオプション指定が複雑かつ指定が面倒&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このような状況を改善するため、ec2-ls-hostsをつくりました。
このツールは、&lt;code&gt;aws ec2 describe-instances&lt;/code&gt;に変わる、シンプルなオプションを備えたCLIツールになります。&lt;/p&gt;

&lt;h3 id=&#34;ec2-ls-hostsで出来ること:b29e9fe288f2c1afa8d247d1c61296b1&#34;&gt;ec2-ls-hostsで出来ること&lt;/h3&gt;

&lt;p&gt;主に以下のオプションを備えています&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-filters&lt;/code&gt;: 絞込み条件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-tags&lt;/code&gt;   : タグによる絞込み&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-fileds&lt;/code&gt; : 表示項目の設定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実行時のオプションでも指定できるのですが、いちいち指定するのは面倒なので、&lt;code&gt;~/.ls-hosts&lt;/code&gt; か &lt;code&gt;/etc/ls-hosts&lt;/code&gt; に設定を保存できます。
このファイルが存在していたらそれを読み込みます。(両方ある場合は&lt;code&gt;~/.ls-hosts&lt;/code&gt;のほうが優先されます)
設定はこんなかんじで。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[options]
tags   = Env:production,Role:app
fields = instance-id,tag:Name,public-ip,instance-state
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;認証は以下の優先順位で可能なものを利用します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;環境変数 &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt;, &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SharedCredentials (&lt;code&gt;~/.aws/credentials&lt;/code&gt;のdefaultプロファイルを利用)&lt;/li&gt;
&lt;li&gt;EC2 Instance Profile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;インスタンスプロファイルに対応しているので、たとえばEC2のReadOnly権限をを付与してあるゲートウェイインスタンスに配置することで、認証情報を直接管理せずに利用することもできます。&lt;/p&gt;

&lt;h3 id=&#34;インストール方法:b29e9fe288f2c1afa8d247d1c61296b1&#34;&gt;インストール方法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/ReSTARTR/ec2-ls-hosts.git
cd ./ec2-ls-hosts
make build -B
cp ./build/ls-hosts /path/to/bin/ls-hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;コマンド名は&lt;code&gt;ls-hosts&lt;/code&gt;にしています。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$PATH&lt;/code&gt;の通っているところに配置してください:bow:&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;zsh-pecoでインタラクティブにsshする:b29e9fe288f2c1afa8d247d1c61296b1&#34;&gt;zsh + pecoでインタラクティブにSSHする&lt;/h3&gt;

&lt;p&gt;ec2-ls-hosts単体でも多少便利にはなるのですが、ツールを組み合わせた応用例も書いておきます。&lt;/p&gt;

&lt;p&gt;たとえば以下のような結果が得られるEC2環境があったとします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls-hosts -filters instance-state-name:running -tags Env:production,Role:app -fields private-ip,tag:Name,tag:Role
10.0.0.1 app app01
10.0.0.2 app app02
10.0.0.3 app app03
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをpecoでインタラクティブに選択してそのままSSHするには、以下のようにzshrcを設定しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function peco-ec2-ls-hosts () {
  # NOTE: ~/.ls-hostsに設定したほうがより良いです
  BUFFER=$(
    ls-hosts -filters instance-state-name:running -tags Env:production,Role:app -fields private-ip,tag:Name,tag:Role | \
    peco --prompt &amp;quot;EC2 &amp;gt;&amp;quot; --query &amp;quot;$LBUFFER&amp;quot; | \
    awk &#39;{echo &amp;quot;Login to %s; printf &amp;quot;ssh %s\n&amp;quot;, $3,$1}&#39;
  )
  CURSOR=$#BUFFER
  zle accept-line
  zle clear-screen
}
zle -N peco-ec2-ls-hosts
# キーバインドはおこのみで
bindkey &#39;^oo&#39; peco-ec2-ls-hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすることで、インタラクティブにSSHできてヒストリーにも残ります。
以下キャプチャでは対象インスタンスがダミーなのでSSできてませんがちゃんと使えます。
(実環境の実行結果は載せられないので泣く泣くダミーです&amp;hellip;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gyazo.com/ae45206ad8215934f5e0a897b91b3d2a&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/ae45206ad8215934f5e0a897b91b3d2a.gif&#34; alt=&#34;https://gyazo.com/ae45206ad8215934f5e0a897b91b3d2a&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;※クライアントPCからパブリックIPとかで直接SSHできない場合はプロキシコマンドを利用して踏み台経由とかでプライベートIPできるssh-configを設定しておくと、この応用例を使って透過的にSSHできます（これは別記事としたほうがよいかも？)&lt;/p&gt;

&lt;h3 id=&#34;余談:b29e9fe288f2c1afa8d247d1c61296b1&#34;&gt;余談&lt;/h3&gt;

&lt;p&gt;さいごの応用例はもともとaws-cli + jq + pecoで実現していたのですが、管理台数が増えるに連れてレスポンスが極端に劣化。
キャッシュ機構を入れてみたりしたものの、快適とはいえない状況になったので、「aws-sdk-goで書くだけで軽くなるのでは？」という発想から開発に至りました。&lt;/p&gt;

&lt;p&gt;mackerel導入環境であれば&lt;code&gt;mkr&lt;/code&gt;でも似たようなことができるかもしれないですが、mackerel前提ではないソリューションとしても十分使えるかな、と。&lt;/p&gt;

&lt;p&gt;社内利用に特化したかたちでつくったものの、ちょっとだけ汎用化すればべつに誰でも使えるようなきがしたので、手を加えたうえでgithubにて公開となりました。
まだまだ貧弱ですが、最低限役目は果たしています。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ErgoDox EZを注文した(けどまだ届いてない)</title>
      <link>http://blog.restartr.com/2016/02/17/ergodox-ez</link>
      <pubDate>Wed, 17 Feb 2016 22:57:45 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2016/02/17/ergodox-ez</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/indiegogo-media-prod-cld/image/upload/c_limit,w_620/v1435062448/e209onukdbrkpy4fygew.png&#34; alt=&#34;ErgoDox EZ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;※2016-03-31追記: &lt;a href=&#34;http://blog.restartr.com/2016/03/31/got-my-ergodox-ez/&#34;&gt;ErgoDox EZが届いた&lt;/a&gt;をかきました。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;大きなプロジェクトが一区切りついたこともあって、勢いでErgoDox EZを買いました。&lt;/p&gt;

&lt;p&gt;お高めキーボード遍歴としては、FILCO Majestouch(黒軸)を1年程使った後、ここ5年くらいずっとHHKBpro2(墨黒無刻印)を使っていました。が、ずっとこれに変わるコンパクトかつ親指をもてあまさない最高なキーボードがないかなと思ってました。&lt;/p&gt;

&lt;p&gt;つい最近「&lt;a href=&#34;http://nippondanji.blogspot.jp/2016/01/ergodox.html&#34;&gt;漢(オトコ)のコンピュータ道: キーボードを新しくした話(ErgoDox)&lt;/a&gt;」を目にしたこともあって、また理想のキーボードを探してみることにした結果、ErgoDox EZに行き着いた、といういきさつです。&lt;/p&gt;

&lt;p&gt;本当なら届いてからポストしようと考えてたのですが、確認したら4月あたりまで1ヶ月程かかるらしいので、とりあえず注文するまでに調べたことを書いておきます。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/ReSTARTR&#34;&gt;@restartr&lt;/a&gt; Hello, and thank you for supporting us! We expect to ship current orders around April, working hard to cut down lead times.&lt;/p&gt;&amp;mdash; ErgoDox EZ (@ErgoDoxEZ) &lt;a href=&#34;https://twitter.com/ErgoDoxEZ/status/699937511099863041&#34;&gt;2016, 2月 17&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;まじか&amp;hellip;orz&lt;/p&gt;

&lt;h2 id=&#34;ergodoxを買えるところ:67beeeb1249322c24a3e836816b31d7f&#34;&gt;ErgoDoxを買えるところ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ergodox.org&#34;&gt;ErgoDox&lt;/a&gt;そのものは&lt;a href=&#34;http://www.key64.org&#34;&gt;The Key64 Keyboard&lt;/a&gt;の流れから生まれた設計とかコードが公開されたプロジェクトであり、実際にはパーツを揃えて組み立てたりしないといけないのが敷居の高いところ。
ですが、クラウドファンディングで製造販売する流れができていて非常にありがたいです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.indiegogo.com/projects/ergodox-ez-an-incredible-mechanical-keyboard#/&#34;&gt;ErgoDox EZ: An incredible mechanical keyboard | Indiegogo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://falbatech.pl/prestashop/index.php&#34;&gt;FalbaTech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.massdrop.com/buy/ergodox&#34;&gt;ErgoDox Ergonomic Mechanical Keyboard Kit Drop - Massdrop&lt;/a&gt;(今は買えない)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.massdrop.com/buy/infinity-ergodox&#34;&gt;Infinity ErgoDox Ergonomic Keyboard Kit Drop - Massdrop&lt;/a&gt;(今は買えない)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;完成形だったり、組み立て式だったり、細部の造形がイマイチだったり様々です。&lt;/p&gt;

&lt;p&gt;ErgoDox EZが写真で見る限りかなり質感よさそうですし、傾斜できるスタンドが用意されていたりキートップとスイッチ(後述)を6種類から選べるのが気の利いている点が気に入ってこれにしました。&lt;/p&gt;

&lt;h2 id=&#34;ergodox-ezについて:67beeeb1249322c24a3e836816b31d7f&#34;&gt;ErgoDox EZについて&lt;/h2&gt;

&lt;p&gt;サイトを眺めているといろいろ知らない要素が出てきて「はて?」となったので、ざっと重要なポイントを抜き出しつつ軽く補足をくわえて以下に書き出してみます。&lt;/p&gt;

&lt;h3 id=&#34;概要:67beeeb1249322c24a3e836816b31d7f&#34;&gt;概要&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;完成形（組み立てでない）&lt;/li&gt;
&lt;li&gt;2年保証&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.maruichirubber.co.jp/rubber/newpage2-2.htm&#34;&gt;インジェクションモールドABS製&lt;/a&gt;フレーム

&lt;ul&gt;
&lt;li&gt;他の成形手法より大量生産に向いているが高価、らしい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;刻印のあるキーキャップも選択可能

&lt;ul&gt;
&lt;li&gt;基本は無刻印&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;アクセサリー

&lt;ul&gt;
&lt;li&gt;Tilt/Tentキット&lt;/li&gt;
&lt;li&gt;リストレスト&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;強力なカスタマイズ力、オープンソースなファームウェア(QMK)&lt;/li&gt;
&lt;li&gt;Nキーロールオーバーと&lt;a href=&#34;https://ja.wikipedia.org/wiki/マウスキー&#34;&gt;マウスキー&lt;/a&gt;に対応&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;価格:67beeeb1249322c24a3e836816b31d7f&#34;&gt;価格&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;本体、Tilt/Tentキット、リストレスト $295&lt;/li&gt;
&lt;li&gt;本体のみ(キースイッチあり、キーキャップなし) $205&lt;/li&gt;
&lt;li&gt;本体のみ(無刻印キートップ) $240&lt;/li&gt;
&lt;li&gt;本体のみ(刻印キートップ) $240&lt;/li&gt;
&lt;li&gt;本体のみ(キースイッチあり、キーキャップなし)、Tilt/Tent Kit、リストレスト $260&lt;/li&gt;
&lt;li&gt;Tilt/Tentキット、リストレスト $85&lt;/li&gt;
&lt;li&gt;Tilt/Tentキット $45&lt;/li&gt;
&lt;li&gt;リストレスト $45&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;バラで買うと$240 + $45 + $45の$330なので、全部入りを買うのが良いかと。
あとでキーキャップを変えるにしても揃えるのが大変そうなので。&lt;/p&gt;

&lt;p&gt;全部入りの場合、120円/ドル換算で約35,000円程度です。HHKBpro2とかREALFORCEが2万円強なので、それより1.5倍くらいお高めです。が、Kinesisが定価45,000を超えることを考えるとなかなか良いポジションではないかと思います。(一般的なキーボードからしたら十分すぎるほど高価ですけど&amp;hellip;)&lt;/p&gt;

&lt;h3 id=&#34;キーキャップ:67beeeb1249322c24a3e836816b31d7f&#34;&gt;キーキャップ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;PBT樹脂DCS キーキャップ

&lt;ul&gt;
&lt;li&gt;刻印ありの場合はDSA(DCSよりもフラットな並び)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PBTは樹脂の種類で、ABSに比べて耐久性に優れている

&lt;ul&gt;
&lt;li&gt;HHKBpro2のキーキャップはPBTでケースはABS&lt;a href=&#34;https://www.pfu.fujitsu.com/hhkeyboard/notice.html&#34;&gt;とのこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DCSはキーキャップ形状の一種

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.keycapsdirect.com/pdfs/DCSFamily.pdf&#34;&gt;DCS FAMILY(PDF)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;おそらく&lt;a href=&#34;http://www.gateron.com/page153?product_id=57&#34;&gt;Gateron製&lt;/a&gt;ではないかと思います(キースイッチがgateron製なので)&lt;/p&gt;

&lt;h3 id=&#34;キースイッチ-軸:67beeeb1249322c24a3e836816b31d7f&#34;&gt;キースイッチ（軸）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Gateron製キースイッチ

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gateron.com/page152?product_category=1&amp;amp;brd=1&#34;&gt;机械键盘轴开关，国产cherry轴开关，gateron轴青轴红轴茶轴黑轴gateron官网官方网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cherryスイッチクローン(中国製?)&lt;/li&gt;
&lt;li&gt;Cherryに比べて滑らか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ErgoDox EZでは6つのスイッチから選べます。
このスイッチについてさんざん調べまわった結果、僕は&amp;rdquo;Gateron White&amp;rdquo;を選択しました。&lt;/p&gt;

&lt;p&gt;ちなみに、注文した後のメールに各スイッチの仕様書(PDF)が添付されていますので、そちらも見つつ選ぶと良いです。
(すべての注文処理が終わった後にこの添付ファイルに気づきました&amp;hellip;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gateron White(リニア・35g)&lt;/li&gt;
&lt;li&gt;Gateron Red(リニア・45g =&lt;a href=&#34;https://deskthority.net/wiki/Cherry_MX_Red&#34;&gt;Cherry MX赤軸&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Gateron Black(リニア・50g, =&lt;a href=&#34;https://deskthority.net/wiki/Cherry_MX_Black&#34;&gt;Cherry MX黒軸&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Gateron Yellow(リニア・50g)&lt;/li&gt;
&lt;li&gt;Gateron Brown(タクタイル・45g =&lt;a href=&#34;https://deskthority.net/wiki/Cherry_MX_Brown&#34;&gt;Cherry MX茶軸&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Gateron Blue(タクタイル・55g =&lt;a href=&#34;https://deskthority.net/wiki/Cherry_MX_Blue&#34;&gt;Cherry MX青軸&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PDFに表記されていた図を雑に並べてみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gyazo.com/c6e7e025230e6c79b0727c506b93fff4&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/c6e7e025230e6c79b0727c506b93fff4.png&#34; alt=&#34;https://gyazo.com/c6e7e025230e6c79b0727c506b93fff4&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考までに、他のキースイッチの数値はこんな感じ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HHKB Pro2 荷重45g 4mmストローク&lt;/li&gt;
&lt;li&gt;REALFORCE 荷重30~45g(変荷重と固定の3種)  4mmストローク&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自分の場合、クリック感があるタクタイルより、リニアが好き（FILCO時代は黒軸でした)なので、白、赤、黄、黒あたりが選択肢となります。
HHKB pro2が荷重45gなので、赤軸がいちばん近いです。REALFORCEなら白軸35gが近いでしょうか。&lt;/p&gt;

&lt;p&gt;Youtubeにもいろいろがあがっていましたので、こちらも参考に。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/gy2C1Of0oQk&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/A2Px2f6A5dM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;とまぁそんな感じの製品です。到着までまだまだ待たないといけないのがつらいです。。。
いまのところ注文してから到着まで1ヶ月とのことなので、はやめに注文したほうが良いかと思います。
購入してみようかな？と思った方はこちらからどうぞ:-)&lt;/p&gt;

&lt;iframe src=&#34;https://www.indiegogo.com/project/ergodox-ez-an-incredible-mechanical-keyboard/embedded&#34; width=&#34;222px&#34; height=&#34;445px&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;ちなみに、&lt;a href=&#34;http://www.jw-shop.com/menu-row/keyboard.htm&#34;&gt;キーボード カスタム制作&lt;/a&gt;というサービスもあるみたいです。&lt;/p&gt;

&lt;h2 id=&#34;参考にしたところ:67beeeb1249322c24a3e836816b31d7f&#34;&gt;参考にしたところ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nippondanji.blogspot.jp/2016/01/ergodox.html&#34;&gt;漢(オトコ)のコンピュータ道: キーボードを新しくした話(ErgoDox)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kammers.aa0.netvolante.jp/20150928201048/&#34;&gt;ergodoxを買いました | kammers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://deskthority.net/wiki/ErgoDox&#34;&gt;ErgoDox - Deskthority wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.massdrop.com/buy/gateron-switches&#34;&gt;Gateron Switches Drop - Massdrop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://deskthority.net/wiki/Gateron_KS-3_series&#34;&gt;Gateron KS-3 series - Deskthority wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://g-chan.dip.jp/square/archives/2016/02/nisse_nisse.html&#34;&gt;G-chan Square - [キーボード][NISSE] エスリルのキーボード&amp;rdquo;NISSE&amp;rdquo; 3台目を購入しました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2015年ふりかえり</title>
      <link>http://blog.restartr.com/2015/12/31/things-of-2015</link>
      <pubDate>Thu, 31 Dec 2015 18:59:46 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2015/12/31/things-of-2015</guid>
      <description>

&lt;p&gt;2015年も終わりが近づいているということでご報告もかねてふりかえりを…&lt;/p&gt;

&lt;h3 id=&#34;個人的トピック:54b1dc2a806cccc9f9d83a7637b5250c&#34;&gt;個人的トピック&lt;/h3&gt;

&lt;p&gt;ブログには書いてませんでしたが、8月で2年とすこしお世話になった株式会社VASILYを退職しました。
それからいくつかの会社とお話した後、11月から&lt;a href=&#34;https://www.wantedly.com/companies/hitomedia&#34;&gt;株式会社ヒトメディア&lt;/a&gt;に転職しました。
(あらためて転職エントリを書こうとおもっていたのに年末になってしまい、完全にタイミングを逃した感じです&amp;hellip;)&lt;/p&gt;

&lt;p&gt;といってもあまり本社にはおらず、もっぱら新宿で勤務している日々です。やっていることもいまのところ前職とあまり変わっておらず、アプリケーションの改善やインフラまわり全般をやっています。個人的にはもっとアプリケーションよりの仕事をしていきたいのですが、まずは目先の改善からということで。&lt;/p&gt;

&lt;p&gt;あと、今年とかやったこととか読んだ本のまとめです。&lt;/p&gt;

&lt;h3 id=&#34;やったこと:54b1dc2a806cccc9f9d83a7637b5250c&#34;&gt;やったこと&lt;/h3&gt;

&lt;h4 id=&#34;仕事:54b1dc2a806cccc9f9d83a7637b5250c&#34;&gt;仕事&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Railsアプリのチューニング&lt;/li&gt;
&lt;li&gt;Docker, AWS ECS&lt;/li&gt;
&lt;li&gt;AWSまわり全般&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2014年にくらべるとセキュリティまわりの脆弱性対応もめっきり少なくなって、インフラ的にはありがたい年でした。&lt;/p&gt;

&lt;h4 id=&#34;個人:54b1dc2a806cccc9f9d83a7637b5250c&#34;&gt;個人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Consul&lt;/li&gt;
&lt;li&gt;GCE&lt;/li&gt;
&lt;li&gt;ISUCON5予選のElixir実装&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ElixirConfあたりで興味もちはじめて、そのあと爆発的にElixirがヒットしていったのが印象的でした。Goはすでにスタンダード化しているためか、大きな話題はあまりなかったように思います。年末ギリギリにラズパイ入門したので、来年はフィジカルコンピューティングもやっていく所存です。Rails5は普及するかな？&lt;/p&gt;

&lt;h3 id=&#34;書籍:54b1dc2a806cccc9f9d83a7637b5250c&#34;&gt;書籍&lt;/h3&gt;

&lt;p&gt;プログラミング・設計&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp//dp/4774171417/&#34;&gt;WEB+DB PRESS vol.85&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/dp/4873115892/&#34;&gt;SQLアンチパターン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp//dp/4774171972/&#34;&gt;理論から学ぶ データベース実践入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/dp/B00SY2UKHY/1&#34;&gt;Webエンジニアが知っておきたいインフラの基本 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/dp/B00UX9VJGW/&#34;&gt;実践ドメイン駆動設計&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp//dp/B00PKTGM9O/&#34;&gt;Programming Elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/dp/4774173010/&#34;&gt;SQL実践入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.manning.com/books/the-little-elixir-and-otp-guidebook&#34;&gt;The Little Elixir &amp;amp; OTP Guidebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/dp/4873116937/&#34;&gt;ZooKeeperによる分散システム管理 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/dp/B00T4ACPA0/&#34;&gt;Go Programming Blueprints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;開発体制&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/dp/4774172367/&#34;&gt;スクラム実践入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp//dp/B00MGGW9MI/&#34;&gt;DevOps 逆転だ！究極の継続的デリバリー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp//dp/B00O8GIJ1E/&#34;&gt;カンバン-ソフトウェア開発の変革&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/dp/B00DIM6BMI/&#34;&gt;SCRUM BOOT CAMP THE BOOK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その他&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/dp/1617292397&#34;&gt;Soft Skills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp//dp/4121022823/&#34;&gt;地方消滅-東京一極集中が招く人口急減&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということで、2015年中はお世話になりました。
2016年もどうぞよろしくおねがいします :bow:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elixir/PhoenixでISUCON5予選の参考実装を書いた</title>
      <link>http://blog.restartr.com/2015/10/21/write-an-isucon5-qualify-app-in-elixir-slash-phoenix</link>
      <pubDate>Wed, 21 Oct 2015 19:32:17 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2015/10/21/write-an-isucon5-qualify-app-in-elixir-slash-phoenix</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/isucon/isucon5-qualify&#34;&gt;ISUCON5予選の参考実装&lt;/a&gt;を、Elixir/Phoenixで実装してみました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;It (partially) works! &lt;a href=&#34;https://twitter.com/hashtag/myelixirstatus?src=hash&#34;&gt;#myelixirstatus&lt;/a&gt; &lt;a href=&#34;https://t.co/NuhhufXAwC&#34;&gt;pic.twitter.com/NuhhufXAwC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Masaki YOSHIDA (@ReSTARTR) &lt;a href=&#34;https://twitter.com/ReSTARTR/status/656434698730639360&#34;&gt;2015, 10月 20&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;汚いながらもとりあえずひととおり動いたので現時点でのコードをGithubにpush。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ReSTARTR/isucon5-qualify-elixir&#34;&gt;github.com/ReSTARTR/isucon5-qualify-elixir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;実装について補足:efe39066a01c868bb9b83d761df0ba42&#34;&gt;実装について補足&lt;/h3&gt;

&lt;p&gt;まずは他言語の初期実装と同等のSQLを再現することを目標としました。&lt;/p&gt;

&lt;p&gt;Goの実装を参考に、まずは各ページを実装してブラウザでひととおり機能が実装できているか確認。
その後ベンチマークをすべて通過するまでひたすら修正するという手順ですすめました。&lt;/p&gt;

&lt;p&gt;そのため、テンプレートの細かい表示(時刻フォーマット等)の不備や、ベンチマーカーがチェックしない機能が抜けている可能性があります。&lt;/p&gt;

&lt;h3 id=&#34;注意点:efe39066a01c868bb9b83d761df0ba42&#34;&gt;注意点&lt;/h3&gt;

&lt;p&gt;ベンチマーカーがCSSファイルのサイズを厳密にチェックしていて、なぜか1バイト余計に増えてしまってパスしない問題が発生します。
&lt;a href=&#34;https://github.com/isucon/isucon5-qualify/blob/42cec755d41b1573af3dd4735d78523494fd42dd/bench/src/main/java/net/isucon/isucon5q/bench/scenario/BootstrapChecker.java#L186&#34;&gt;チェック箇所のサイズ&lt;/a&gt;を&lt;code&gt;122540&lt;/code&gt;から&lt;code&gt;122541&lt;/code&gt;にすることで無理やりとおしました。
原因は追って調査ですが、機能的に問題ないはずなので一時しのぎです。&lt;/p&gt;

&lt;h3 id=&#34;ベンチマーク結果:efe39066a01c868bb9b83d761df0ba42&#34;&gt;ベンチマーク結果&lt;/h3&gt;

&lt;p&gt;気になる性能ですが、Goと比較すると以下のような結果となりました。&lt;/p&gt;

&lt;p&gt;※VirtualBox上にたてたMySQLにたいして、ホストのMacOSX上でアプリケーションを実行しています&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Lang&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;requests&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;elapsed&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;success&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;redirect&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;failure&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Elixir/Phoenix&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;76093&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;239&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;93&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Go&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;138&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;106728&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;98&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/isucon/isucon5-qualify/blob/master/eventapp/lib/score.rb&#34;&gt;スコア計算式&lt;/a&gt;をもとに計算してみると以下のようなスコアとなります(eror, exception, violationsはないので減点は無し)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Elixir/Phoenix
irb(main):001:0&amp;gt; base_score = 239 + 93 * 0.1
=&amp;gt; 248.3
# Go
irb(main):002:0&amp;gt; base_score = 98 + 39 * 0.1
=&amp;gt; 101.9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同じクエリを再現したうえで、だいたい2.5倍くらいの性能差？でしょうか。
が、完全に模倣できているか自信はないのであくまで参考程度ということで…&lt;/p&gt;

&lt;p&gt;以下にベンチマーカーの出力内容も貼っておきます。&lt;/p&gt;

&lt;p&gt;elixir/phoenix版の結果&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;valid&amp;quot; : true,
  &amp;quot;requests&amp;quot; : 333,
  &amp;quot;elapsed&amp;quot; : 76093,
  &amp;quot;done&amp;quot; : &amp;quot;[{Isucon5InitExecutor},{BootstrapChecker},{Isucon5Load,Isucon5Load,Isucon5Load,Isucon5Load,Isucon5Checker}]&amp;quot;,
  &amp;quot;responses&amp;quot; : {
    &amp;quot;success&amp;quot; : 239,
    &amp;quot;redirect&amp;quot; : 93,
    &amp;quot;failure&amp;quot; : 1,
    &amp;quot;error&amp;quot; : 0,
    &amp;quot;exception&amp;quot; : 0
  },
  &amp;quot;violations&amp;quot; : [ ]
}

BUILD SUCCESSFUL

Total time: 1 mins 27.449 secs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go版の結果&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;valid&amp;quot; : true,
  &amp;quot;requests&amp;quot; : 138,
  &amp;quot;elapsed&amp;quot; : 106728,
  &amp;quot;done&amp;quot; : &amp;quot;[{Isucon5InitExecutor},{BootstrapChecker},{Isucon5Load,Isucon5Load,Isucon5Load,Isucon5Load,Isucon5Checker}]&amp;quot;,
  &amp;quot;responses&amp;quot; : {
    &amp;quot;success&amp;quot; : 98,
    &amp;quot;redirect&amp;quot; : 39,
    &amp;quot;failure&amp;quot; : 1,
    &amp;quot;error&amp;quot; : 0,
    &amp;quot;exception&amp;quot; : 0
  },
  &amp;quot;violations&amp;quot; : [ ]
}

BUILD SUCCESSFUL

Total time: 1 mins 54.937 secs
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;今後:efe39066a01c868bb9b83d761df0ba42&#34;&gt;今後&lt;/h3&gt;

&lt;p&gt;今回のISUCONアプリは結構機能を積んでいるため、Elixir/Phoenixに慣れるにはちょうど良いテーマなのではないかと思います。&lt;/p&gt;

&lt;p&gt;ただPhoenix初心者ということもあり、実装していたほとんどの時間は&amp;rdquo;Ectoでどうやってクエリを再現するか&amp;rdquo;に使っていて、
ロジックの書き方とか各モジュールの使い分けとかまであまり気にできてません。
Phoenix/Ectoの有効性を台無しにしていること間違いなし…
まぁ、そこんところはおいおい感覚をつかんでいこうかな、と。&lt;/p&gt;

&lt;p&gt;このあとはEctoの抽象化を活かしつつさらに最適化をすすめていったときに、どのような性能を発揮するのか気になるところです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#34;Go Programming Blueprints&#34;を読んだ</title>
      <link>http://blog.restartr.com/2015/10/15/go-programming-blueprints</link>
      <pubDate>Thu, 15 Oct 2015 19:54:29 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2015/10/15/go-programming-blueprints</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/B00T4ACPA0)&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/matryer/goblueprints/master/artwork/bookcover.jpg&#34; alt=&#34;Go Blueprints by Mat Ryer book cover&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/B00T4ACPA0&#34;&gt;Go Programming Blueprints - Solving Development Challenges with Golang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近Kindleで購入したので、でひととおり読んで写経してみました。&lt;/p&gt;

&lt;h3 id=&#34;概要と雑感:8fb6d052d7c346df71849845ab713680&#34;&gt;概要と雑感&lt;/h3&gt;

&lt;p&gt;2015年1月に発売された書籍であり、Goのバージョンでいうと1.3から1.4の頃に書かれたものです。
著者はGolang UK Conference 2015でトークもしていた&lt;a href=&#34;https://twitter.com/matryer&#34;&gt;@matryer&lt;/a&gt;さん。
(&lt;em&gt;※&lt;a href=&#34;https://www.youtube.com/watch?v=tIm8UkSf6RA&#34;&gt;Golang UK Conference 2015 - Mat Ryer - Building APIs - YouTube&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;いくつかのGo製アプリケーション開発を通じて、Goの機能・パターンを学習する、という感じのもの。機能やパターンについて網羅的ではないものの、特定のユースケースをベースにしているため、パターンの理解は容易に感じます。取り扱うトピックも、web/apiサーバーとコマンドラインツールがバランスよく取り上げられています。&lt;/p&gt;

&lt;p&gt;対象読者は「すべてのGoプログラマー」と記載がありますが、&lt;a href=&#34;https://tour.golang.org&#34;&gt;A Tour of Go&lt;/a&gt;をひととおりやったあとくらいがちょうど良い気がします。&lt;/p&gt;

&lt;p&gt;リファレンス的な構成の他書や&lt;a href=&#34;https://golang.org/doc/effective_go.html&#34;&gt;Effective Go&lt;/a&gt;のような公式ドキュメントのものとうまくすみ分けができているのではないかと。&lt;/p&gt;

&lt;p&gt;ただ誤字・脱字が少し目立つかな（章ごとに1,2個程度ですが)という点が残念ではありますが、比較的わかりやすいミスなので読んでいて混乱するほどではありません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/Books&#34;&gt;Go Books&lt;/a&gt;としては比較的マイナーっぽく、日本語圏の情報もないので購入はちょっとしたギャンブルでしたが、ある程度まとまったストーリーとして読めるGo関連の書籍は少ない印象ですし、自分としてはちょうど良い買い物だったかなと思います。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;※ソースコードも&lt;a href=&#34;https://github.com/matryer/goblueprints&#34;&gt;matryer/goblueprints&lt;/a&gt;に公開されています&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_※当然英語ですが、さほど読みにくい感じはなかったです&lt;/p&gt;

&lt;h3 id=&#34;構成:8fb6d052d7c346df71849845ab713680&#34;&gt;構成&lt;/h3&gt;

&lt;p&gt;全8章で作成するアプリケーションのうち、1章で簡潔するものと章をまたがるものがあり、構成は以下のようになっています。&lt;/p&gt;

&lt;h4 id=&#34;1-2-3-websocketによるチャットアプリケーション:8fb6d052d7c346df71849845ab713680&#34;&gt;1, 2, 3: websocketによるチャットアプリケーション&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;http.Handle/HandleFuncの基本的な使い方とか、TDDによるパッケージ開発、&lt;/li&gt;
&lt;li&gt;ソーシャルログイン機能の追加(OAuthは&lt;a href=&#34;https://github.com/stretchr/gomniauth&#34;&gt;stretchr/gomniauth&lt;/a&gt;を利用)&lt;/li&gt;
&lt;li&gt;アイコン画像のアップロード機能の追加&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;4-空きドメイン検索ツール:8fb6d052d7c346df71849845ab713680&#34;&gt;4: 空きドメイン検索ツール&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Unixコマンドのように、STDIN/OUTを使った複数コマンドによる連携

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ 単語生成 | 単語の補正 | TLDの付与 | WHOISチェック&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;これらをos.Command.Stdin,Stdoutで束ねるコマンド&lt;/li&gt;
&lt;li&gt;&lt;em&gt;.o(シェルスクリプトでも良いのではと思いますが、外部プロセスとの連携の練習ということで&amp;hellip;)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;5-6-twitterのリアルタイムカウンター:8fb6d052d7c346df71849845ab713680&#34;&gt;5, 6: Twitterのリアルタイムカウンター&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;複数のプロセスで構成される分散システム

&lt;ol&gt;
&lt;li&gt;twitter streaming apiから拾ったツイートを&lt;a href=&#34;http://nsq.io&#34;&gt;NSQ&lt;/a&gt;に追加するプログラム&lt;/li&gt;
&lt;li&gt;NSQのsubscriberが単語別件数を集計して、1秒ごとにMongoDBを更新するプログラム&lt;/li&gt;
&lt;li&gt;MongoDBの内容を管理・閲覧ツール(RESTful APIとWEBアプリ)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;トピック&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;シグナルトラップによる安全なプロセス終了処理&lt;/li&gt;
&lt;li&gt;sync.Mutexによる協調動作の実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stretchr/graceful&#34;&gt;stretchr/graceful&lt;/a&gt;での安全な終了処理&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;7-google-places-apiを使ったロケーション推薦アプリケーション:8fb6d052d7c346df71849845ab713680&#34;&gt;7: Google Places APIを使ったロケーション推薦アプリケーション&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;iotaによるEnum相当の実現&lt;/li&gt;
&lt;li&gt;TDDでパッケージ開発

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;.o(ここで&lt;a href=&#34;https://github.com/cheekybits&#34;&gt;cheekybits/is&lt;/a&gt;が出てきたけど、全体で統一感出してほしい&amp;hellip;)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;型アサーションによるキャスト&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;8-ファイル自動バックアップシステム:8fb6d052d7c346df71849845ab713680&#34;&gt;8 ファイル自動バックアップシステム&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;2つのCLIツールの作成

&lt;ul&gt;
&lt;li&gt;backup: バックアップする対象リストの管理コマンド

&lt;ul&gt;
&lt;li&gt;メタデータ管理は&lt;a href=&#34;https://github.com/mattyer/filedb&#34;&gt;mattyer/filedb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;backupd: メタデータをもとに実ファイル監視とバックアップ実行する常駐プログラム&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;蛇足:8fb6d052d7c346df71849845ab713680&#34;&gt;蛇足&lt;/h3&gt;

&lt;p&gt;そういえば、カーニハン著のThe Go Programming Languageが11月発売とのこと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/0134190440&#34;&gt;The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>DockerとWeaveを使って1台のマシンでConsulを複数動かしてみる</title>
      <link>http://blog.restartr.com/2015/03/09/consul-cluster-with-docker</link>
      <pubDate>Mon, 09 Mar 2015 00:22:13 +0900</pubDate>
      
      <guid>http://blog.restartr.com/2015/03/09/consul-cluster-with-docker</guid>
      <description>

&lt;p&gt;軽くConsulを試してみたくて、でもVagrantで複数台仮想マシンを立ち上げるのはちょっと気が重い…ということでUbuntu14.10 on MacBookAirにDockerコンテナを複数立ち上げてクラスタを構築してみるテストをしました。&lt;/p&gt;

&lt;p&gt;Dockerfileとか簡単な動かし方(を適当英語で書いたもの)をgithubにあげてあります&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ReSTARTR/test-consul-with-docker&#34;&gt;ReSTARTR/test-consul-with-docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Docker内のプロセスがLISTENするポートに対してコンテナ外から接続する場合、&lt;code&gt;-p&lt;/code&gt;でホストのポートにひもづけるか、&lt;code&gt;--link&lt;/code&gt;でコンテナ同士をつなぐのが最も手軽な方法です。が、consulは複数のポート（HTTP API用、DNS用、ゴシッププロトコル用等）を使うため、この手軽な方法でクラスタを構築することができません。&lt;/p&gt;

&lt;p&gt;Dockerコンテナの接続パターンとしてはいくつかあって、deeeetさんのブログ記事に詳しく書かれています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/12/01/docker-link-pattern/&#34;&gt;Dockerコンテナ接続パターン (2014年冬) | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回は手元のMacBook Airだけで完結させたかったので、weaveを使ったコンテナ間ネットワークを利用することにしました。&lt;/p&gt;

&lt;h3 id=&#34;weave:eb7384652550cf95d9fa5f789a7acdb6&#34;&gt;weave&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://zettio.github.io/weave/&#34;&gt;weave  | weave, the Docker network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;dockerコンテナ間の内部ネットワークを構築するものです。詳しくはjacopenさんのSlideShareを。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/jacopen/weave-40871981&#34;&gt;Weaveを試してみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使い方はとても簡単で、weaveコンテナを立ち上げて、weaveコマンド経由でdockerコマンドを実行するだけ。
これならVagrantのような仮想マシンのためにメモリとディスク容量を割く必要もなくなります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo weave launch
$ sudo docker ps
CONTAINER ID        IMAGE                COMMAND                CREATED             STATUS              PORTS                                            NAMES
2eda921c011e        zettio/weave:0.9.0   &amp;quot;/home/weave/weaver    31 seconds ago      Up 30 seconds       0.0.0.0:6783-&amp;gt;6783/tcp, 0.0.0.0:6783-&amp;gt;6783/udp   weave
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけで仮想ネットワークができあがります。ホストOSで必要なポートは6783だけです。&lt;/p&gt;

&lt;p&gt;あとはweaveコマンドにIPを指定しつつdockerコマンドのオプションを付けて起動すればOK。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ C=$(sudo weave run 10.0.0.1/24 -it ubuntu)
$ sudo docker exec $C -it /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただ、さくらVPSのCentOS6では動きませんでした。面倒なので深く追ってません。。。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo /usr/local/bin/weave launch
WARNING: Linux kernel version 3.5 or newer is required (you have 2.6)
ERROR: ip utility, iproute2-ss091226 does not support network namespaces.
       Please install iproute2-ss111010 or later.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;consul:eb7384652550cf95d9fa5f789a7acdb6&#34;&gt;consul&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.consul.io/&#34;&gt;consul&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hashicorp謹製クラスタのオーケストレーションツール。今更説明する必要もないと思うので詳細は省略します。
consul（と周辺ツールのconsul-templateやenvconsul)を使えば複数のホスト間で設定を共有できる、というのを試すのが今回の目的でしたが、とりあえず複数のconsulを動かすところまでを書きます。&lt;/p&gt;

&lt;h3 id=&#34;consulを起動してクラスタを構築する:eb7384652550cf95d9fa5f789a7acdb6&#34;&gt;consulを起動してクラスタを構築する&lt;/h3&gt;

&lt;p&gt;weaveネットワークに接続したコンテナを4台立ち上げて、consul1, consul2をserverとして、consul3, consul4をclientとして起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo weave run 10.0.0.1/24 -it -v $(pwd -P):/opt --name=consul1 restartr/consul-ready
$ sudo weave run 10.0.0.2/24 -it -v $(pwd -P):/opt --name=consul2 restartr/consul-ready
$ sudo weave run 10.0.0.3/24 -it -v $(pwd -P):/opt --name=consul3 restartr/consul-ready
$ sudo weave run 10.0.0.4/24 -it -v $(pwd -P):/opt --name=consul4 restartr/consul-ready
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとはconsul agentを順に起動するだけ。&lt;/p&gt;

&lt;p&gt;ここで注意するのが&lt;code&gt;-bind&lt;/code&gt;オプション。
これを指定しないとdockerデフォルトのeth0のでクラスタにjoinすることになってしまい、このネットワークは他のコンテナとつながっていないためにクラスタ構築に失敗します。
必ず&lt;code&gt;weave run 10.0.0.X/24&lt;/code&gt;で指定したIPにbindしておきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo docker exec -d consul1 consul agent -server -data-dir=/tmp/consul -bootstrap-expect 1 -bind 10.0.0.1
$ sudo docker exec -d consul2 consul agent -server -data-dir=/tmp/consul -config-dir=/opt/consul.d/web.json -bind 10.0.0.2
$ sudo docker exec -d consul3 consul agent -data-dir=/tmp/consul -config-dir=/opt/consul.d/web.json -bind 10.0.0.3
$ sudo docker exec -d consul4 consul agent -data-dir=/tmp/consul -config-dir=/opt/consul.d/web.json -bind 10.0.0.4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、先に起動したconsul1に対して残りのコンテナ内のconsul agentをjoinさせていきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo docker exec consul2 consul join 10.0.0.1
$ sudo docker exec consul3 consul join 10.0.0.1
$ sudo docker exec consul4 consul join 10.0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、&lt;code&gt;consul members&lt;/code&gt;でjoinしている一覧が見えるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo docker exec consul1 consul members
Node          Address        Status  Type    Build  Protocol
725dca3980ea  10.0.0.1:8301  alive   server  0.5.0  2
f82001d6a7b4  10.0.0.2:8301  alive   server  0.5.0  2
dcf304f77fdf  10.0.0.3:8301  alive   client  0.5.0  2
3be672bd18b1  10.0.0.4:8301  alive   client  0.5.0  2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;クラスタから離れるときは&lt;code&gt;consul leave&lt;/code&gt;です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo docker exec consul4 consul leave
Graceful leave complete

$ sudo docker exec consul1 consul members
Node          Address        Status  Type    Build  Protocol
dcf304f77fdf  10.0.0.3:8301  alive   client  0.5.0  2
3be672bd18b1  10.0.0.4:8301  left    client  0.5.0  2       # &amp;lt;- Statusが&#39;alive&#39;から&#39;left&#39;に変わる
725dca3980ea  10.0.0.1:8301  alive   server  0.5.0  2
f82001d6a7b4  10.0.0.2:8301  alive   server  0.5.0  2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じで、複数のマシンをいじってる感じがまったくしないくらい&lt;code&gt;weave&lt;/code&gt; &amp;amp; &lt;code&gt;docker exec&lt;/code&gt;は便利です。
weaveがプロダクション環境で使えるか、という点については未知ですが。&lt;/p&gt;

&lt;p&gt;次回（があれば）consulを使った設定の管理について試したメモを書きたいと思います。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>