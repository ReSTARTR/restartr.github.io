<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Elixir | I Will Survive]]></title>
  <link href="http://blog.restartr.com/category/elixir/atom.xml" rel="self"/>
  <link href="http://blog.restartr.com/"/>
  <updated>2016-03-06T14:14:17+09:00</updated>
  <id>http://blog.restartr.com/</id>
  <author>
    <name><![CDATA[ReSTARTR]]></name>
    <email><![CDATA[yoshida.masaki+restartr@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elixir/PhoenixでISUCON5予選の参考実装を書いた]]></title>
    <link href="http://blog.restartr.com/2015/10/21/write-an-isucon5-qualify-app-in-elixir-slash-phoenix/"/>
    <updated>2015-10-21T19:32:17+09:00</updated>
    <id>http://blog.restartr.com/2015/10/21/write-an-isucon5-qualify-app-in-elixir-slash-phoenix</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/isucon/isucon5-qualify">ISUCON5予選の参考実装</a>を、Elixir/Phoenixで実装してみました。</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="en" dir="ltr">It (partially) works! <a href="https://twitter.com/hashtag/myelixirstatus?src=hash">#myelixirstatus</a> <a href="https://t.co/NuhhufXAwC">pic.twitter.com/NuhhufXAwC</a></p>&mdash; Masaki YOSHIDA (@ReSTARTR) <a href="https://twitter.com/ReSTARTR/status/656434698730639360">2015, 10月 20</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>汚いながらもとりあえずひととおり動いたので現時点でのコードをGithubにpush。</p>

<ul>
  <li><a href="https://github.com/ReSTARTR/isucon5-qualify-elixir">github.com/ReSTARTR/isucon5-qualify-elixir</a></li>
</ul>

<h3 id="section">実装について補足</h3>

<p>まずは他言語の初期実装と同等のSQLを再現することを目標としました。</p>

<p>Goの実装を参考に、まずは各ページを実装してブラウザでひととおり機能が実装できているか確認。
その後ベンチマークをすべて通過するまでひたすら修正するという手順ですすめました。</p>

<p>そのため、テンプレートの細かい表示(時刻フォーマット等)の不備や、ベンチマーカーがチェックしない機能が抜けている可能性があります。</p>

<h3 id="section-1">注意点</h3>

<p>ベンチマーカーがCSSファイルのサイズを厳密にチェックしていて、なぜか1バイト余計に増えてしまってパスしない問題が発生します。
<a href="https://github.com/isucon/isucon5-qualify/blob/42cec755d41b1573af3dd4735d78523494fd42dd/bench/src/main/java/net/isucon/isucon5q/bench/scenario/BootstrapChecker.java#L186">チェック箇所のサイズ</a>を<code>122540</code>から<code>122541</code>にすることで無理やりとおしました。
原因は追って調査ですが、機能的に問題ないはずなので一時しのぎです。</p>

<h3 id="section-2">ベンチマーク結果</h3>

<p>気になる性能ですが、Goと比較すると以下のような結果となりました。</p>

<p>※VirtualBox上にたてたMySQLにたいして、ホストのMacOSX上でアプリケーションを実行しています</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Lang</th>
      <th style="text-align: right">requests</th>
      <th style="text-align: right">elapsed</th>
      <th style="text-align: right">success</th>
      <th style="text-align: right">redirect</th>
      <th style="text-align: right">failure</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Elixir/Phoenix</td>
      <td style="text-align: right">333</td>
      <td style="text-align: right">76093</td>
      <td style="text-align: right">239</td>
      <td style="text-align: right">93</td>
      <td style="text-align: right">1</td>
    </tr>
    <tr>
      <td style="text-align: left">Go</td>
      <td style="text-align: right">138</td>
      <td style="text-align: right">106728</td>
      <td style="text-align: right">98</td>
      <td style="text-align: right">39</td>
      <td style="text-align: right">1</td>
    </tr>
  </tbody>
</table>

<p><a href="https://github.com/isucon/isucon5-qualify/blob/master/eventapp/lib/score.rb">スコア計算式</a>をもとに計算してみると以下のようなスコアとなります(eror, exception, violationsはないので減点は無し)</p>

<p><code>ruby
# Elixir/Phoenix
irb(main):001:0&gt; base_score = 239 + 93 * 0.1
=&gt; 248.3
# Go
irb(main):002:0&gt; base_score = 98 + 39 * 0.1
=&gt; 101.9
</code></p>

<p>同じクエリを再現したうえで、だいたい2.5倍くらいの性能差？でしょうか。
が、完全に模倣できているか自信はないのであくまで参考程度ということで…</p>

<p>以下にベンチマーカーの出力内容も貼っておきます。</p>

<p>elixir/phoenix版の結果</p>

<p>```json
{
  “valid” : true,
  “requests” : 333,
  “elapsed” : 76093,
  “done” : “[{Isucon5InitExecutor},{BootstrapChecker},{Isucon5Load,Isucon5Load,Isucon5Load,Isucon5Load,Isucon5Checker}]”,
  “responses” : {
    “success” : 239,
    “redirect” : 93,
    “failure” : 1,
    “error” : 0,
    “exception” : 0
  },
  “violations” : [ ]
}</p>

<p>BUILD SUCCESSFUL</p>

<p>Total time: 1 mins 27.449 secs
```</p>

<p>go版の結果</p>

<p>```json
{
  “valid” : true,
  “requests” : 138,
  “elapsed” : 106728,
  “done” : “[{Isucon5InitExecutor},{BootstrapChecker},{Isucon5Load,Isucon5Load,Isucon5Load,Isucon5Load,Isucon5Checker}]”,
  “responses” : {
    “success” : 98,
    “redirect” : 39,
    “failure” : 1,
    “error” : 0,
    “exception” : 0
  },
  “violations” : [ ]
}</p>

<p>BUILD SUCCESSFUL</p>

<p>Total time: 1 mins 54.937 secs
```</p>

<h3 id="section-3">今後</h3>

<p>今回のISUCONアプリは結構機能を積んでいるため、Elixir/Phoenixに慣れるにはちょうど良いテーマなのではないかと思います。</p>

<p>ただPhoenix初心者ということもあり、実装していたほとんどの時間は”Ectoでどうやってクエリを再現するか”に使っていて、
ロジックの書き方とか各モジュールの使い分けとかまであまり気にできてません。
Phoenix/Ectoの有効性を台無しにしていること間違いなし…
まぁ、そこんところはおいおい感覚をつかんでいこうかな、と。</p>

<p>このあとはEctoの抽象化を活かしつつさらに最適化をすすめていったときに、どのような性能を発揮するのか気になるところです。</p>
]]></content>
  </entry>
  
</feed>
