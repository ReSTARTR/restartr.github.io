<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | I Will Survive]]></title>
  <link href="http://blog.restartr.com/category/ruby/atom.xml" rel="self"/>
  <link href="http://blog.restartr.com/"/>
  <updated>2016-02-19T21:08:08+09:00</updated>
  <id>http://blog.restartr.com/</id>
  <author>
    <name><![CDATA[ReSTARTR]]></name>
    <email><![CDATA[yoshida.masaki+restartr@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Peek - Railsアプリのプロファイリングツール]]></title>
    <link href="http://blog.restartr.com/2015/01/18/peek-for-profiling-rails-app/"/>
    <updated>2015-01-18T13:26:53+09:00</updated>
    <id>http://blog.restartr.com/2015/01/18/peek-for-profiling-rails-app</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/peek/peek">Peek</a>という、Railsアプリケーションに組み込めるプロファイリングツール（群）があります。
<a href="https://github.com/blog/1252-how-we-keep-github-fast">How we keep Github fast</a>でも言及されているツールです。(2012年なので少し古いですが。)</p>

<h3 id="section">プロファイリングツールと適正</h3>

<p>プロファイリング用のツールはたくさんあって、時間がかかる特定の処理を改善するために使うものもあれば、常時記録して特異な変化を監視するものもあります。</p>

<p>今回は後者寄りの要件であり、これに見合うものとしてPeekを取り上げました。</p>

<p>Railsでこれ以外のツールとしては、<a href="https://github.com/MiniProfiler/rack-mini-profiler">rack-mini-profiler</a>や<a href="https://github.com/newrelic/rpm">newrelic/rpm</a>などがあり、それらについて今回の要件と照合してみました。</p>

<h4 id="newrelic-rpm">newrelic rpm</h4>

<p>newrelicのサービス上で結果が確認出来るだけではなく、<a href="https://github.com/newrelic/rpm#developer-mode">デベロッパーモード</a>の場合に”/newrelic”にアクセスするとリクエストごとのプロファイル結果が見れます。
ただ、別途”/newrelic”のURLを開く必要があり、パフォーマンスチェックを忘れがちになる可能性があります。</p>

<h4 id="rack-mini-profiler">rack-mini-profiler</h4>

<p>トータルの処理時間は画面隅に表示されるけれど、個々の処理時間については画面隅のボックスをクリックして詳細を開かないといけません。</p>

<h4 id="peek">peek</h4>

<p>Peekは適切な粒度で常に目に入れることができるツールであり、常用するのにちょうど良いのでは、という印象です。</p>

<p>先のGihtubのブログでは”Mission controll bar”いう、スタッフがプロダクション環境でも常にパフォーマンスを確認できる仕組みが整えられています。</p>

<h3 id="peek-1">Peekのしくみ</h3>

<p>しくみは以下ブログ記事が詳しいです。</p>

<ul>
  <li><a href="http://r7kamura.hatenablog.com/entry/2014/09/24/004607">Railsの性能測定用プラグイン peek/peek - ✘╹◡╹✘</a></li>
</ul>

<p>リクエストごとにIDを発行し、そのリクエストごとに各種計測値をデータストア（ファイル、Redis、Memcached等）に保存。
ページ表示後に別リクエスト(“/peek/…“)として非同期で計測値を取得して、画面の要素を置換する、というしくみ。</p>

<h3 id="peek-2">Peekの拡張</h3>

<p>Peek自体はプラットフォームを提供するだけで、実際の個々の値を記録したりするのはそのプラグイン。</p>

<p>対応しているのは<a href="https://github.com/peek/peek#available-peek-views">Available Peek views</a>
に記載されています。仮にほしいものが見つからなかったとしても、わりと手軽に追加できるような仕組みになっています。</p>

<p>ということでmemcached用のプラグインをつくりました。</p>

<ul>
  <li><a href="https://github.com/ReSTARTR/peek-memcached">peek-memcached</a></li>
</ul>

<p><a href="https://github.com/evan/memcached">evan/memcached</a>という、cで実装されたruby用memcachedクライアントがあって、それを使ったmemcachedアクセスを記録するプラグインです。</p>

<p>このプラグインでは<code>Memcached#get</code><code>Memcached#set</code>メソッドにモンキーパッチあてて、回数と時間を記録しています。</p>

<ul>
  <li>呼び出し回数(calls)</li>
  <li>総処理時間(duration)</li>
</ul>

<p>に加えて、下記も記録できるようになっています。</p>

<ul>
  <li>キャッシュヒット数(Get[HIT])</li>
  <li>キャッシュミス数(Get[MISS])</li>
  <li>キャッシュ更新数(Set)</li>
</ul>

<h3 id="peek-3">Peekの惜しいところ</h3>

<p>要素が増えるとブラウザの横幅に収まりきらなくなって、折り返し＆はみ出します。本当に必要な要素に絞る抑止力にはなりますが、もう少しコンパクトに収められるとよりよいかな、と。</p>
]]></content>
  </entry>
  
</feed>
