<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker | I Will Survive]]></title>
  <link href="http://blog.restartr.com/category/docker/atom.xml" rel="self"/>
  <link href="http://blog.restartr.com/"/>
  <updated>2014-08-20T00:15:40+09:00</updated>
  <id>http://blog.restartr.com/</id>
  <author>
    <name><![CDATA[ReSTARTR]]></name>
    <email><![CDATA[yoshida.masaki+restartr@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dockerを使って任意のrubyバージョンのrpmを作成する]]></title>
    <link href="http://blog.restartr.com/2014/05/11/build-rpm-on-docker-container/"/>
    <updated>2014-05-11T00:00:00+09:00</updated>
    <id>http://blog.restartr.com/2014/05/11/build-rpm-on-docker-container</id>
    <content type="html"><![CDATA[<p>CentOSを使ってて不便なのがruby2系のインストール。</p>

<p>rbenvやruby-buildを使うかソースからインストールするのですが、この場合、環境を構築するたびにビルドすることになり時間もかかるし大変面倒です。</p>

<p>なのでDockerを使ってクリーンな環境でRubyの最新rpmをビルドしてみました。</p>

<p>Dockerを使えばビルド環境がすぐに立ち上げられるので、rpmビルドに必要なパッケージを確認したりするのに最適です。</p>

<p>今回のソースはgithubにpushしてあります。</p>

<ul>
  <li><a href="https://github.com/ReSTARTR/ruby-rpmbuild-container">ReSTARTR/ruby-rpmbuild-container</a></li>
</ul>

<h2 id="section">環境</h2>

<ul>
  <li>ゲストOS：Vagrantで起動したUbuntu-14.04</li>
  <li>コンテナ：centos:6.4</li>
</ul>

<h2 id="section-1">ファイルの配置</h2>

<p>以下ファイルを同一ディレクトリに入れておきます。</p>

<ul>
  <li>Vagrantfile</li>
  <li>provision.sh</li>
  <li>Dockerfile</li>
  <li>rubybuild.sh</li>
  <li>ruby-2.0.0-p481.spec</li>
</ul>

<h2 id="section-2">手順</h2>

<ol>
  <li>ゲストOSの起動(Vagrant)</li>
  <li>ゲストOSにsshログイン</li>
  <li>Dockerコンテナのビルド</li>
  <li>Dockerコンテナ内でrpmビルド</li>
</ol>

<h2 id="os">1. ゲストOSの起動</h2>

<p>Vagrantfile</p>

<p>```ruby
# -<em>- mode: ruby -</em>-
# vi: set ft=ruby :
VAGRANTFILE_API_VERSION = “2”</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = “ubuntu/trusty64”</p>

<p>config.vm.synced_folder “.”, “/vagrant”</p>

<p>config.vm.provision “shell”, path: ‘provision.sh’</p>

<p># お好みで
  config.vm.provider :virtualbox do |vb|
    vb.customize [“modifyvm”, :id, “–memory”, “2048”, “–cpus”, “2”, “–ioapic”, “on”]
  end
end
```</p>

<p>provision.sh</p>

<p>```bash
sudo apt-get update
sudo apt-get install -y language-pack-ja</p>

<h1 id="docker">Docker</h1>
<p>sudo apt-get install -y docker.io
sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker
```</p>

<h2 id="osssh">2. ゲストOSにsshログイン</h2>

<p><code>bash
$ vagrant up
$ vagrant ssh
$ cd /vagrant
</code></p>

<h2 id="docker-1">3. Dockerコンテナのビルド</h2>

<p>ビルド用specファイルを用意して、シェルスクリプトでビルドします。</p>

<p>すると、コンテナにマウントしたボリュームにビルド済みのrpmファイルがコピーされます。</p>

<h3 id="spec">ビルド用specシェルスクリプト</h3>

<p>環境変数RUBY_VERSIONに”2.0.0-p481”や”2.0.0-p451”を設定すれば任意のバージョンをビルドします。</p>

<p><em>※デフォルトの2.0.0-p481以外はそれ用のspecファイルが必要になります。</em></p>

<p>rubybuild.sh</p>

<p>```bash
#!/bin/env bash
WORKDIR=/opt/rpmbuild</p>

<p>RUBY_VER=${RUBY_VER:-“2.0.0-p481”}
RUBY_MAJOUR_VER=$(echo $RUBY_VER|cut -d”-“ -f1)
RUBY_MINOR_VER=$(echo $RUBY_VER|cut -d”-“ -f2)
if [ -z “$RUBY_MINOR_VER” ]; then
  RUBY_TARBALL=”ruby-$RUBY_MAJOUR_VER.tar.gz”
else
  RUBY_TARBALL=”ruby-$RUBY_MAJOUR_VER-$RUBY_MINOR_VER.tar.gz”
fi
RUBY_REMOTE_FILE=”http://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOUR_VER:0:3}/$RUBY_TARBALL”</p>

<p>mkdir -p $WORKDIR/rpm/{BUILD,SRPMS,SPECS,SOURCES,RPMS}
echo “%_topdir $WORKDIR/rpm” &gt; $WORKDIR/.rpmmacros
if [ ! -f $WORKDIR/rpm/SOURCES/$RUBY_TARBALL ]; then
  wget $RUBY_REMOTE_FILE -O $WORKDIR/rpm/SOURCES/$RUBY_TARBALL
fi
cp $WORKDIR/ruby-${RUBY_VER}.spec $WORKDIR/rpm/SPECS/ruby.spec
rpmbuild -bb $WORKDIR/rpm/SPECS/ruby.spec</p>

<p>cp $WORKDIR/rpm/RPMS/x86_64/* /shared/
```</p>

<h2 id="dockerrpm">4. Dockerコンテナ内でrpmビルド</h2>

<p>Dockerfile</p>

<p>```
FROM centos:6.4</p>

<h1 id="setup">setup</h1>
<p>RUN yum update -y
RUN yum install -y rpm-build gcc</p>

<h1 id="epel">epel</h1>
<p>RUN rpm –import http://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-6
RUN rpm -ihv http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</p>

<h1 id="ruby-depends">ruby-depends</h1>
<p>RUN yum install —enablerepo=epel -y libyaml-devel
RUN yum install -y byacc readline-devel ncourses-devel tcl-devel openssl-devel gdbm-devel db4-devel</p>

<h1 id="build-rpm">build rpm</h1>
<p>WORKDIR /opt/rpmbuild
ADD rubybuild.sh /opt/rpmbuild/rubybuild.sh
ADD ruby-2.0.0-p481.spec /opt/rpmbuild/ruby-2.0.0-p481.spec
```</p>

<h2 id="rpm">コンテナ起動してrpmをビルド</h2>

<p>コンテナを起動する際に、カレントディレクトリをマウントしておきます。</p>

<p><em>※<code>--rm</code>オプションでrpm作成完了したらコンテナは破棄します</em></p>

<p><code>bash
$ sudo docker build -t &lt;USERNAME&gt;/rpmbuild .
$ sudo docker run --rm -v $PWD:/shared:rw -it &lt;CONTAINER_ID&gt; /bin/sh ./rubybuild.sh
</code></p>

<p>成功すれば、ゲストOSのカレントディレクトリにrpmができてます。</p>

<p><code>
$ ls *.rpm
ruby-2.0.0p481-2.el6.x86_64.rpm
</code></p>

<p>これで、rpmコマンド一発で最新のrubyをインストールできます。</p>

<p>rubyインストール済みコンテナを作るなら、Dockerfileに以下のように書けばruby実行環境のできあがりです。</p>

<p>```
FROM centos:6.4</p>

<h1 id="epel-1">EPEL</h1>
<p>RUN rpm –import http://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-6
RUN rpm -ihv http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</p>

<h1 id="install-ruby-rpm">Install ruby rpm</h1>
<p>ADD ruby-2.0.0p481-2.el6.x86<em>64.rpm ruby-2.0.0p481-2.el6.x86</em>64.rpm
RUN yum install -y –enablerepo=epel libyaml-devel
RUN rpm -ihv ruby-2.0.0p481-2.el6.x86_64.rpm
```</p>
]]></content>
  </entry>
  
</feed>
