<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: architecture | I Will Survive]]></title>
  <link href="http://blog.restartr.com/category/architecture/atom.xml" rel="self"/>
  <link href="http://blog.restartr.com/"/>
  <updated>2016-02-19T21:08:08+09:00</updated>
  <id>http://blog.restartr.com/</id>
  <author>
    <name><![CDATA[ReSTARTR]]></name>
    <email><![CDATA[yoshida.masaki+restartr@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[InfoQ eMAG: Microservicesを少し読んだまとめと感想]]></title>
    <link href="http://blog.restartr.com/2014/08/20/microservices-architecture/"/>
    <updated>2014-08-20T00:14:35+09:00</updated>
    <id>http://blog.restartr.com/2014/08/20/microservices-architecture</id>
    <content type="html"><![CDATA[<p>なんだか、世間的にMicroservicesが次の注目対象になりそうな感じです。</p>

<p>DockerConでも複数のセッションで言及があったり、はてブにもたまに関連記事があがってきたりしてます。</p>

<p>実態はどんなものかイメージしにくかったのですが、最近InfoQで公開されたeMAGが情報としてまとまっている気がしたので、これを読み進めています。</p>

<ul>
  <li><a href="http://www.infoq.com/minibooks/emag-microservices">InfoQ eMAG: Microservices</a></li>
</ul>

<h3 id="section">本に含まれている内容</h3>

<p>この本は、過去のInfoQ記事や各ブログを再構成したもので、以下の記事タイトルがまとめられています。</p>

<ul>
  <li>Microservices: Decomposing Applications for Deployability and Scalability</li>
  <li>Microservices and SOA</li>
  <li>Adrian Cockcroft on Microservices and DevOps</li>
  <li>Microservices? What about Nanoservices?</li>
  <li>Building Products at SoundCloud</li>
  <li>The Strengths and Weaknesses of Microservices</li>
  <li>GOTO Berlin: Microservices as an Alternative to Monoliths</li>
</ul>

<p>そのうち、以下を読んだので、まとめと雑感を書きます。</p>

<ul>
  <li>Microservices: Decomposing Applications for Deployability and Scalability</li>
  <li>Building Products at SoundCloud</li>
</ul>

<p>本の主題はMicroservices Architectureですが、それに伴うソフトウェアの設計手法などの参照もたくさん含まれているので、いろんな情報への入口としても勉強になると思います。</p>

<h4 id="microservices-decomposing-applications-for-deployability-and-scalability">Microservices: Decomposing Applications for Deployability and Scalability</h4>

<ul>
  <li>ドメイン単位で複数に分割されたもの小さなサービスのの集合体をMicroservices Architectureと呼ぶ</li>
  <li>既存フレームワークとかでservice層として定義していた単位が別々のプロセスに切りだされているイメージ</li>
  <li>一方、既存のシステムはMonolithic Architectureと呼ばれる</li>
  <li>システム設計における単一責任原則の適用ともいえる</li>
  <li>現実に則したSOAの焼き直しである</li>
</ul>

<p>メリット</p>

<ul>
  <li>個々にデプロイ可能である</li>
  <li>個々のMicroserviceが独立しているため、サービス全体の可用性向上を期待できる</li>
  <li>開発チームを小さい単位に分割しやすい</li>
  <li>言語やフレームワークの移行が容易になる。変更が小規模なので仮に失敗しても取り戻しやすい。</li>
</ul>

<p>デメリット</p>

<ul>
  <li>個々にはシンプルでも全体の複雑性は増す</li>
  <li>サービス間のIPCメカニズムが必要</li>
  <li>サービス間をまたいだテストがやりにくい</li>
  <li>他サービスに影響する変更のデプロイは手順を十分に検討する必要がある</li>
  <li>運用が大変。ハイレベルな自動化が要求される</li>
</ul>

<h4 id="building-products-at-soundcloud">Building Products at SoundCloud</h4>

<p>SoundCloudのMicroservices移行話は「Building Products at SoundCLoud」という三回分のブログ記事を再構成してまとめた内容になっています。</p>

<ul>
  <li><a href="https://developers.soundcloud.com/blog/building-products-at-soundcloud-part-1-dealing-with-the-monolith">Building Products at SoundCloud—Part I: Dealing with the Monolith</a></li>
  <li><a href="https://developers.soundcloud.com/blog/building-products-at-soundcloud-part-2-breaking-the-monolith">Building Products at SoundCloud—Part II: Breaking the Monolith</a></li>
  <li><a href="https://developers.soundcloud.com/blog/building-products-at-soundcloud-part-3-microservices-in-scala-and-finagle">Building Products at SoundCloud—Part III: Microservices in Scala and Finagle</a></li>
</ul>

<p>MonolithicなRailsアプリからMicroservicesに移行するまでの手順や失敗が紹介されていて、これから移行を進めるチームにとって有益になるでしょう。</p>

<p>彼らは既存アプリの機能をいきなり別言語で切り出すのではなく、</p>

<blockquote>
  <p>分析→リファクタリング→Service分割→新技術の採用</p>
</blockquote>

<p>という手順を踏んでいます。この移行における重要な点は、どのような新技術を採用するかではなく、DDDをベースとしたドメイン分析を行うことにあると思います。分割の単位を誤ったなら個々のサービスの依存性を排除しきれなくなり全体の複雑性は確実に高くなります。</p>

<p>ドメイン分割の一例として、<a href="http://martinfowler.com/bliki/BoundedContext.html">Bounded Context</a>を利用した例が紹介されています。</p>

<p>また、依存性の低い個々のMicroserviceにできることで、それぞれに独立したチームを配置することも可能になります。
ただ、それぞれのチームが無秩序に技術選定を行うことでスキルや情報の局所性(<a href="http://en.wikipedia.org/wiki/Bus_factor">Bus Factor</a>の低下)を招くことになるため、一定のルールを決めることも重要になるようです。結果として彼らはJVMベースのScala,ClojureJRubyを中心としたシステムを作ることを決定しています。(同時にGoとRubyもサポート)</p>

<h4 id="section-1">雑感</h4>

<p>Microservicesへ移行するにはサービス規模・システム規模・開発チーム規模が大きいことが前提であり、そうでない限りはMonolithicなシステムで頑張るほうが良いかな、というのが個人的な意見です。また、DDDのような適切なドメイン分析ができるアーキテクトが存在しない場合にもMicroservicesはあまり良い選択肢とはいえないと思います。それらの前提をクリアできるのであれば、長いプロダクトのライフスパンにおいて、システムそのものだけでなく開発チームも含めて良い影響をもらたすことになるのではないでしょうか。</p>

<p>ということで「Microservicesの本質はドメイン分析であり、デプロイ単位や技術選定などのメリットは副次的なものである」というのがこのeMAGを読んで得たとりあえずの結論です。</p>

<h4 id="section-2">参考リンク</h4>

<p>Martin Fowler氏の記事だけでなく、DockerConでのYelpのスライドやInfoQのbitlyの記事も参考になります。</p>

<ul>
  <li><a href="http://martinfowler.com/articles/microservices.html">Microservices</a></li>
  <li><a href="https://recompile.net/posts/microservices.html">マイクロサービス（microservices）とは何か — recompile.net</a></li>
  <li><a href="http://www.slideshare.net/dotCloud/building-a-smarter">Building a smarter application Stack by Tomas Doran from Yelp</a></li>
  <li><a href="http://www.infoq.com/jp/news/2014/08/bitly-lessons-learned">bitlyでの分散システム構築から学んだこと</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
