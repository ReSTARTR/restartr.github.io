<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 書籍 | I Will Survive]]></title>
  <link href="http://blog.restartr.com/category/shu-ji/atom.xml" rel="self"/>
  <link href="http://blog.restartr.com/"/>
  <updated>2014-04-07T00:13:23+09:00</updated>
  <id>http://blog.restartr.com/</id>
  <author>
    <name><![CDATA[ReSTARTR]]></name>
    <email><![CDATA[yoshida.masaki+restartr@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[エンジニアとしての生き方 -IT技術者たちよ、世界へ出よう！-]]></title>
    <link href="http://blog.restartr.com/2011/04/12/how-to-live-as-an-engineer/"/>
    <updated>2011-04-12T09:30:35+09:00</updated>
    <id>http://blog.restartr.com/2011/04/12/how-to-live-as-an-engineer</id>
    <content type="html"><![CDATA[<ul>
  <li><a href="http://www.amazon.co.jp/dp/4844329944">エンジニアとしての生き方　　IT技術者たちよ、世界へ出よう！ (インプレス選書) [単行本（ソフトカバー）]</a></li>
</ul>

<p>エンジニアとしてのキャリアを見つめ直すための本です。著者のブログや雑誌寄稿を再構成されたもの。私は著者ブログ購読していないので今回が初見なわけですが、内容については同意できることばかりでした。
ということで、ざーっと読んでみて感じたこととかをメモ的に残しておきます。</p>

<p>本の趣旨としては「海外へ出よう」というメッセージなのですが、日本を出ていってしまったら日本の企業は変わらないままなのでは。そうではなくて自分たちが内部から変えるべきなのでしょうか。それとも変わらない会社が淘汰されて日本全体が解体されていくのが望ましいのでしょうか。</p>

<p>企業のあり方については第三章の最後に触れられていて、P115に、米国のやり方が日本でも正しいとは言えないことについて述べられています。</p>

<blockquote>自由競争による貧富の差を広げる。「格差を嫌い、「結果平等」を好む日本人がそんな状況に耐えられるのか疑問である。
</blockquote>
<p>と述べた上で、政府が土台を整備する必要があると下記の言葉で絞めていました。</p>

<p>P116:</p>

<blockquote>結局は日本人の気質にあった「日本なりの資本主義のあり方」というのを見つけて、その枠組のなかで、アジアに進出しようとする日本企業を税制面などで優遇するなどして、日本企業の海外での競争力を高める方向でサポートするのがこれからの政府の役割なんだと思う。
</blockquote>
<p>### 第二章：日本のエンジニアは大丈夫か</p>

<p>P57:</p>

<blockquote>そして最も許せないのが、そういった上流→下流とうい階層構造でプログラムを作る工程そのものだ。
</blockquote>
<p>「最初の設計はおおまかな仮設計であり、プロトタイプをつくりながら仕様を決定していく」ということについては、同意。これってドメイン駆動設計（DDD）にも通じるような。設計から実装まで幅広い範囲のイテレーションを回すアジャイル的スタイル。日本では明確な職業名を与えることで無意識に役割や分業を考えてしまいがちであるけれど、本当は職業名なんて些細なことなのでしょう。というか技術を知らない企画から目的が曖昧な企画出されても、ね…</p>

<p>それから、ものづくりの本質を捉えきれていない点についても触れていて、P81に以下の記述があります。</p>

<blockquote>たぶん、最も強く意識すべきは「合議制」では良いものは作れない」という法則。デザインに関わる人が多ければ多いほど、いろいろな意見が寄せられてしまい、「せっかく有意義な意見を出してもらったのだから」と次々に意見を取り入れられているうちに、機能だけはあるけど魂がなくて妙に使いにくいものができてしまう。
</blockquote>
<p>これについては自分の意見に責任を持てないことの裏返しなのかも知れませんね。みんなで決めたことじゃないと強くプロジェクトを推し進めることができない、とか。
P81に「企画に関わる人を減らして、魂のあるものを作る」とあるが、まさにその通りで、上長の承認が得られないと企画として動き出すことができなかったり、大きな組織であるが故の責任委譲が機能しない傾向にあるのでしょう。</p>

<h3 id="section">第四章：自分を変えて自由になろう</h3>

<h4 id="section-1">4-2 キャリアパスの考え方</h4>

<blockquote>「入社時にスキルを問わない会社」には就職してはいけない
</blockquote>
<p>自分の場合は大学は文系だったし知識もほぼない状態だったけど、スキルが問われなかったおかげで今の会社の就職し、そこから技術なりを身につけていくことができた。可能性が広がる点については評価すべきではないかと思います。とはいえ、たまに使ってしまう「文系なんで」という言葉。これってExcuseとして使っている訳で、反省しないと認識しています。スキルを問わない会社に希望する学生は、これからスキルを磨く強い意思のある人間か、専門的スキルを望まれない会社に就職したいだけの人間のどちらかでしょう。
ただ、このような採用方針は、専門スキルを伸ばせるだけの力が社内にある会社でのみ採用されるべきだと思います。外部研修とOJTによる放置プレイで成長できる人間は稀でしょう。「入社時にスキルを問わない会社」は技術職と採用担当の意思がズレている可能性があるので注意すべきだと思います。</p>

<h4 id="p141-">P141: 自分の適性を見つめ直す</h4>

<blockquote>以上のようなことを考えた上で、自分がこの業界に対してどんな価値を提供できるのか、自分は何が得意で、理想的には何がしたいのかを問いただしてみる。
</blockquote>
<p>これは定期的に見返したいところ。今の会社がなくなったときに自分には何が残るのかを、常に意識しないといけないでしょうね。</p>

<h3 id="section-2">第五章：エンジニアとして世界で成功する</h3>

<p>P192:</p>

<blockquote>学生諸君にお願いしたいのは、この手の課題にどんどん取り組んで「新しい技術をすばやく習得して応用する」テクニックを身につけることである。
</blockquote>
<p>金魚の群れのシミュレーションの例を取り上げてのこのことば。技術は習得してもそれを応用にもっていくことが重要なんだなと。情報そのものはネットにあるので、知識よりも「適応力」や「応用力」がずっと重要と言っている。引き出しとしての知識だけでなく、それがどう活用できるのか、まで考えを巡らせる癖をつける必要がありそうです。</p>

<p>P217:
#### 私がMBAを取得することにした10の理由</p>

<blockquote>5.メインジョブ・エンジニア、サポジョブ・MBAというのが最強だから
</blockquote>
<p>この真意が知りたい。</p>

<p><em>※2011/04/14追記※</em>
後日、Twitterにて著<a href="http://twitter.com/#!/ReSTARTR/status/58511606774108160">者の中島さんに質問</a>したところ、回答ブログを頂きました。</p>

<ul>
<li><a href="http://satoshi.blogs.com/life/2011/04/engineer.html">Life is beautiful: 「メインジョブ・エンジニア、サポジョブ・MBAというのが最強」の意味</a></li>
</ul>
<p>#### P218: リーダーに必要とされる感情知性（Emotional Intelligence）
  * Emotional Intelligenceの5つのの要素
     * self-awareness
     * self-regulation
     * motivation
     * empathy
     * social skill</p>

<p>P244</p>

<h4 id="section-3">5−8 技術書以外の本もよもう−世界を目指すエンジニアのための推薦図書−</h4>

<ul>
  <li><a href="http://www.amazon.co.jp/dp/4798100234">イノベーションのジレンマ―技術革新が巨大企業を滅ぼすとき (Harvard business school press)</a></li>
  <li><a href="http://www.amazon.co.jp/dp/4798101524">キャズム [単行本]</a></li>
  <li><a href="http://www.amazon.co.jp/dp/4121006240">理科系の作文技術 (中公新書 (624)) [新書]</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[600万人の女性に支持されるクックパッドというビジネス]]></title>
    <link href="http://blog.restartr.com/2011/02/14/cookpad-the-business-that-supported-by-600-million-women/"/>
    <updated>2011-02-14T08:00:42+09:00</updated>
    <id>http://blog.restartr.com/2011/02/14/cookpad-the-business-that-supported-by-600-million-women</id>
    <content type="html"><![CDATA[<p>[tmkm-amazon]4827550719[/tmkm-amazon]</p>

<p>2009年5月発刊なので、2年以上前の本です。発刊時から存在は知ってましたが、ブックオフにてちょうど目に入ってきて、興味があったので購入してみました。ボリュームとしては2時間弱。
私自身も同じようにWebサイト（うちの場合ポータルですが）を運営している会社に所属していることもあり、双方を重ねて考えてしまいます。私自身はプログラマーなので、サービス云々については疎いので、こういう本の内容にはすぐ看過されてしまいがちです。
あと、数年前の本ですが、本質的なところは古くなく、今後数年読めるものだと思いました。</p>

<p>ということで私的メモを少々。（※各所レビューの方が100倍的確だと思います。）</p>

<p><a id="more"></a><a id="more-643"></a></p>

<h2 id="section">試行錯誤の過程は無駄ではない</h2>
<p>p88
&gt; <em>完成したものから見ると、一見捨てた90パーセントは無駄なように見えるんですが、そうじゃない。ゴールまでの進み方がわかっていないときの90パーセントというのはすごく重要で、これがなかったらゴールには辿りつけない。
&gt; 〜中略〜
&gt; とにかく、一発で当てるのではなく、たくさん試す。それが、ゴールに行き着くための最短の方法だと思っています。</em></p>

<p>成功の大きさが試行錯誤の数に比例する、と。私自身サービスは数ヶ月使っていた時期があるだけなのですが、実際どのくらいの頻度でどれだけの試行が繰り返されているのか、非常に気になります。社内で検証する段階での試行錯誤だけでなく、サービス開始した後の試行錯誤もある訳だし。</p>

<h2 id="section-1">コミュニケーションが成功したかどうかという指標</h2>
<p>本当の広告効果とは何なのか、という文脈のなかで、</p>

<blockquote>
  <p><em>「本当にどれだけファンが作れて、毎月、商品を買ってくれてる人がどれだけ増やせたか、それこそが、コミュニケーションが成功したかどうか、だと思うんです。”この商品を教えてくれてありがとう”という人を、どれだけ作れたか。それを広告効果として追求していたなければいけないと思っています。」</em></p>
</blockquote>

<p>とあります。
この「コミュニケーションが成功したかどうか」という表現がすごく響いてきました。形式は違えど、電話やメールなどと同じコミュニケーションの手段であるということでしょうか。うん、良い言葉です。</p>

<h2 id="section-2">シンプルなサービスと複雑なサービス</h2>
<p>Twitterのようなシンプルなものがあれば、Facebookのように複雑なものもあったりして。結局サービスって何が受け入れられるのでしょう。
できることを説明書なしにユーザーが気持よく目的を果たせるように工夫した結果として、機能をシンプルにしたのがクックパッドの今の形な訳で。だとすれば、「徹底的に」目的を追求すれば、おのずとサイトの複雑性は決まるのでしょうか。
もう少し視野を広げて見識を深める必要がありそうです。</p>

<p>ここ1年程ちゃんとした料理をしていない私ですが、簡単につくれるレシピをクックパッドで探してみようかな。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数式を使わないデータマイニング入門]]></title>
    <link href="http://blog.restartr.com/2011/02/06/introduction-of-data-mining-without-formul/"/>
    <updated>2011-02-06T22:47:11+09:00</updated>
    <id>http://blog.restartr.com/2011/02/06/introduction-of-data-mining-without-formul</id>
    <content type="html"><![CDATA[<ul>
  <li><a href="http://www.amazon.co.jp/dp/4334033555">数式を使わないデータマイニング入門 隠れた法則を発見する (光文社新書) [新書]</a></li>
</ul>

<p>テキストマイニング書を探していたら、なぜか同じ場所にあったので買いました。</p>

<p>データマイニングって何？という人向けの入門書。１時間もあればサクっと読める軽い内容。データマイニングをはじめる人だけでなく、<strong>データマイニングを依頼する側</strong>が読むと良いのではないでしょうか。</p>

<p><a id="more"></a><a id="more-564"></a></p>

<h4>マイニング＝採鉱</h4>
<p>第一章にも書いてあるけど、</p>

<blockquote><em>マイニングとは、「採鉱」を指す言葉である。データマイニングにおけるマイニングは二段階のプロセスに分かれる。
一段階目は、大量の情報から隠れた法則を見つけ出すこと。
〜中略〜
二段階目は、そこで見つかった法則のなかから、使えるものを探し出すこと。これは意外に認知されていない。</em>

</blockquote>
<p>さらに、</p>

<blockquote><em>多くの人は法則さえ見つかれば、それが有意で、お金にもなると考えている。しかし、実際には役に立たない法則の方が多い。この事実は見過ごされがちだ。</em>
</blockquote>
<p>マイニングを行えば、何かしら答えが見つかるものだと思われがち。結果的に答えが見つかればラッキー。データマイニングを依頼する側には「期待せずに期待してください」としか言えないですね…</p>

<p>ところで、何かしら答えを限られた期間で見つけ出すのは難しいのだとすれば、データ分析者は評価者に対して目標として何をコミットし、どのように結果を評価されるのでしょうか。プログラマーと同じく、明確な数値目標を設定しづらい職業なのかなと思ったり。</p>

<h4>監視社会</h4>
<p>本書中盤にはデータマイニング手法としていくつか概要の説明があり、最後には監視社会について触れています。それまでの流れと少し関連性が低い内容ではあるけれど、興味深い内容。参考図書として挙げられていたもの（下記）が１０年前の書籍なので、関連する最近の書籍をさがしてみる予定。</p>

<ul>
  <li><a href="http://www.amazon.co.jp/dp/4791760085">監視社会 [単行本]</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pythonをはじめるために]]></title>
    <link href="http://blog.restartr.com/2011/01/30/how-to-start-learning-python-programming/"/>
    <updated>2011-01-30T22:04:12+09:00</updated>
    <id>http://blog.restartr.com/2011/01/30/how-to-start-learning-python-programming</id>
    <content type="html"><![CDATA[<p><a href="http://blog.restartr.com/2011/01/10/6-targets-i-want-to-achieve-in-2011/">今年の目標</a>として</p>
<blockquote><p>3.pythonに手を出す</p></blockquote>
<p>というのを掲げていて、「エキスパートPythonプログラミング」を買ったので、pythonの学習をこんな感じではじめてみるつもり、というのを書いておきます。</p>

<ul>
  <li><a href="http://www.amazon.co.jp/dp/4048686291">エキスパートPythonプログラミング</a></li>
</ul>

<p><a id="more"></a><a id="more-544"></a>&lt;/p&gt;</p>
<h3>1.リファレンスを用意する</h3>
<ul>
<li>基礎文法：<a href="http://www.python.jp/doc/release/reference/">Python 言語リファレンス &mdash; Python v2.6.2 documentation</a></li>
<li>チュートリアル：<a href="http://www.python.jp/doc/release/tutorial/index.html">Python チュートリアル &mdash; Python v2.6.2 documentation</a></li>
<li>痒いところ向け：エキスパートPythonプログラミング</li>
<li>PHPから逆引き：<a href="http://www.php2python.com/">Php2Python - Python alternatives to PHP functions, classes and librarie</a>

<p>基礎文法は公式リファレンスで大体まかなえますし、ググれば大体の情報は手に入るので、あえて購入していません。オライリーの「初めてのpython 第3版」は古い上にゴツイので却下しました。（「初めてのpython第4版が洋書は最近出ましたが日本語訳はまだ）</p>
<p>PHP2Pythonは、PHP関数をPythonに置き換えると…というのを投稿できるサイトです。PHP関数から逆引きできるので、目的がはっきりしていれば探しやすくてかなり便利です。</p>
<h3>2.目標を決める</h3>
<p>pythonを学び始めるにあたっては、何をどこまで学ぶのか、というのは明確にすべきでしょう。<br />
私の場合は、こんな感じ。</p>
<h4>他言語との違いを探る</h4>
<p>新しい言語を学んだほうが良いというのはよく言われるところだと思います。たとえ直接的に必要性がなくても。その言語やコミュニティの特徴を知ることで、新しい視点が生まれます。<br />
普段のプログラミングに良い部分を取り入れることができると期待しています。</p>
<p><b>python界隈で知りたいこと</b><br />
その言語に求めるものは、言語毎に異なるもの。私が気になっているのは以下のとおり。</p>
<ul>
<li>オブジェクト指向プログラミング</li>
<li>関数型プログラミング</li>
<li>アプリ開発フロー
<li>
<li>アジャイルへの取り組みやテスト手法</li>
<li>メタプログラミング</li>

<p>これを知るために最適だったのが、上述の「エキスパートPythonプログラミング」でした。</p>
<p>また、特定の目的も一応あって、以下の２つを予定しています。</p>
<p><b>自然言語処理入門</b><br />
積読中の書籍に「入門　自然言語処理」があるのですが、pythonで解説されていますので、コードでつまづかない程度に基礎体力をつけておきます。<br />

* [入門　自然言語処理](http://amazon.co.jp/dp/4873114705)

必要そうな技術はこんな感じ。</p>
<ul>
<li>文字列の取り扱い</li>
<li>NLTK(pythonの言語処理モジュール)の取り扱い</li>
<li>統計処理ライブラリの取り扱い</li>
</ul>
<p><b>GAEアプリ開発</b><br />
Scalaでも少し手をつけていたりますが、JMV系とPythonでどのような違いがあるのかも見てみたいところ。</p>
<ul>
<li>Webフレームワーク(Django, Kay等)の取り扱い</li>
<li>連携する各サービスAPIの取り扱い</li>
</ul>
<p>当分は言語仕様と戯れようと思います。</p>
</li></li></ul></li></ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プログラマが知るべき97のこと]]></title>
    <link href="http://blog.restartr.com/2011/01/15/97things-every-programmers-should-know/"/>
    <updated>2011-01-15T00:39:03+09:00</updated>
    <id>http://blog.restartr.com/2011/01/15/97things-every-programmers-should-know</id>
    <content type="html"><![CDATA[<p>「プログラマが知るべき97のこと」を読みました。</p>

<ul>
  <li><a href="http://www.amazon.co.jp/dp/4873114799">プログラマが知るべき97のこと</a></li>
</ul>

<p>一時期いろいろネタにもされていましたが、読んで損はない本ですね。
内容は、プログラマの精神論から設計のTipsやパターン紹介まで多岐にわたっています。が、ひとつひとつが見開き1ページにまとまっているため、あとで気軽に読み返せますので、ぜひデスクに常備しておきたい一冊となりました。</p>

<p><a id="more"></a><a id="more-518"></a></p>

<p>主に精神論のはなしに惹かれたので少しまとめを。</p>

<h3>問題のあるソフトウェアをつくりだす可能性と、それに対して立ち向かう姿勢</h3>
<p>どれだけ経験を重ねても、度重なる変更やスケジュールからの圧力などによって、品質が悪くなることは往々にしてあります。</p>

<p><strong>24.変更を恐れない     Mike Lewis</strong></p>

<blockquote>
作っている人間がシステムを嫌っているようでは、そんなものを遣わされる側はたまらないでしょう。

</blockquote>
<p>病気なソフトウェアを治すには痛みを伴うが、それを治すことで利益も得られ、治すことはメンバーにとって経験となると言っています。積極的にシステムを改良していくという姿勢はチームに伝播しやすいものであると。</p>

<p><strong>52.「その場しのぎ」が長生きしてしまう     Klaus Marquardt</strong></p>

<blockquote>
いったん「暫定ソリューション」ができてしまうと、既成事実化するのです。

</blockquote>
<p>さらに、暫定ソリューションに対する修正も暫定になってしまいがち。でも、「ソリューション」というだけに必要なものではあるはず。修正の優先度があがる体制づくりをするとか、もっと有用なソリューションを開発すればよい、と言っています。
いつまでたっても暫定のままの暫定ソリューションはいくつも見てきたので、かなり実感湧きます。</p>

<h3>新しいことを学び続ける姿勢</h3>
<p>新しい言語を毎年学ぶと良いというのは、割とよく聞く話しだと思います。</p>

<p><strong>26.言語だけでなく文化も学ぶ     Anders Noras</strong></p>

<blockquote>
そうではなく、新しい言語から新たな発想を得て、同じ問題に対して違った解決策を見つけられるようになることが大事なのです。

</blockquote>
<p>ある言語では言語仕様で対応してくれているけどその他の言語では自分で実装しなければいけなかったり（GCとか）、そういった、各言語ごとの視点を自分に取り入れるのは良いことです。
私は、ふだんPHPでオブジェクト指向プログラミングをやっていて、Scalaという関数言語を学んでいます。Scalaを学ぶことで、なんとなく関数型思考でPHPコードを書いていることもあります。あきらかにその書いたコードにたいする距離感が違っていて、そのコードの根拠が明確になっている気がするのです。</p>

<h3>誰のためのコードか、という意識</h3>
<p>なぜかこのような似通ったテーマをとりあげた人が多くいました。</p>

<p><strong>35.超人の神話     Ryan Brush</strong></p>
<blockquote>
超人は必要ありません。必要なのはエキスパートです。積極的に自分以外にもエキスパートを育てようとする意思をもったエキスパートです。そういう人がいてくれれば、凡人が力をつけ、活躍できる可能性が生まれるでしょう。
</blockquote>
<p><strong>56.未来へのメッセージ     Linda Rising</strong></p>
<blockquote>
「自分の書くコードは、全部、未来の誰かへのメッセージだと思うのよ。その誰かは、あなたの弟さんかもしれない。誰か、とても賢い人に、自分が難しい問題をどう解いたのか、丁寧に説明するつもりで書くの。」
</blockquote>
<p><strong>82.他社への思いやりを意識したコーディング     Aslam Khan</strong></p>
<blockquote>
他人の存在を意識すれば、他人の書くコードにも当然良い影響を与えることになります。チームの同様のことを考え、思いやりを持ってコードを書けば、それは同僚たちにとって価値あるコードとなり、いずれ自分にも良い影響となって帰ってきます。どんなかたちであれ、そのコードに触れた誰もが、触れる前より良い人間、良いプログラマになれる、そういうコードを書くようにすべきでしょう。

</blockquote>
<p><strong>88.コードは生涯サポートするつもりで書く     Yuriy Zubarev</strong></p>
<blockquote>
「生涯サポートしなくてはならない」と考えながら仕事をするようになれば、素晴らしいことが起きるでしょう。
</blockquote>
<p>チームで開発するのが当然な現場では当たり前のことですが意外と意識できていなかったりします。私も、新しく知り得たパターンとかついつい自分の判断で取り入れてしまい、誰が見てもわかりにくいコードを書いたこともあります。今でもそういうコードになっているかもしれません。</p>

<p>こういうことを無意識にできるように、ペアプログラミングをするのも効果的かもしれません。隣で同じ画面を見ている「他人の目」が常にあり、自分も他人も納得のいく設計が結果的にできるわけですから。</p>

<p>と、ここまで書かれた複数人の内容をひとりじめするような内容の人がいましたw</p>

<p><strong>91.良いプログラマになるには     Pete Goodliffe</strong></p>
<blockquote />
<p>‘とりあえず’という意識を捨て、他人や未来の自分のためにわかりやすいコードを書き、新しいことを学び続けよう、ということを彼は言っています。
※前述のテーマについては、それぞれにエピソードが違うので、どれを読んでも面白いものなので、まとめのようなものがあっても別に構わないのですが。</p>

<p>目の前のコードに集中しがちですが、冷静になって、こういった基本姿勢を思い返すようにしたいものです。</p>

<p>「達人プログラマー」や、「リファクタリング」など、引用された本で未読のものがいくつかあったので、これらについても今後読んでみようと思います。</p>

]]></content>
  </entry>
  
</feed>
