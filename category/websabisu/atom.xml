<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Webサービス | I Will Survive]]></title>
  <link href="http://blog.restartr.com/category/websabisu/atom.xml" rel="self"/>
  <link href="http://blog.restartr.com/"/>
  <updated>2014-04-19T13:25:27+09:00</updated>
  <id>http://blog.restartr.com/</id>
  <author>
    <name><![CDATA[ReSTARTR]]></name>
    <email><![CDATA[yoshida.masaki+restartr@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[EventStatsをConnpassに対応させました]]></title>
    <link href="http://blog.restartr.com/2012/12/22/eventstats-support-connpass/"/>
    <updated>2012-12-22T22:54:54+09:00</updated>
    <id>http://blog.restartr.com/2012/12/22/eventstats-support-connpass</id>
    <content type="html"><![CDATA[<p>ふと思い立って、イベントの登録者数の推移が見れるEventStatsをConnpassにも対応させました。</p>

<ul>
  <li><a href="http://eventstats.restartr.com">EventStats - イベントの統計情報が見れます</a></li>
</ul>

<p><a href="http://connpass.com/about/api/">ConnpassのAPI</a>はイベントの参加者リストまでは取得できませんが、イベント検索はほぼatnd準拠。なので追加したコード量はわずかでした。</p>

<p>作った当初は何かいろいろやってたくさんの人に使ってもらえるWebサービスにしたかったれけど、結局は参加者数の推移を見る以外に何の取り柄もないままです。</p>

<h5 id="section">余談</h5>

<p>このWebサービス、クローラーはPython、WebサイトはScalaで書いていて、一年近く前に書いたコードなのでちょっとだけ時間かかりました。仕事で使っているpythonに比べて、シンタックスを見るのも数ヶ月ぶりなScalaは何をやっているか思い出すのにもひと苦労です。もっとScalaにも取り組みたいのですが…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EventStatsはherokuとMongoLabとさくらVPSで動いている]]></title>
    <link href="http://blog.restartr.com/2011/12/28/eventstats-consist-of-heroku-mongolab-and-sakura-vps/"/>
    <updated>2011-12-28T21:27:52+09:00</updated>
    <id>http://blog.restartr.com/2011/12/28/eventstats-consist-of-heroku-mongolab-and-sakura-vps</id>
    <content type="html"><![CDATA[<p>今月頭に<a href="/2011/12/10/eventststs">ブログ書きました</a>が、EventStatsという勉強会の参加者の推移が見れるサービスを公開しました。</p>

<ul>
  <li><a href="http://eventstats.restartr.com">EventStats - イベントの統計情報が見れます</a></li>
</ul>

<p>まぁ自分が欲しかっただけなんですけど、使ってみて頂ければ幸いです。
今回はそのサービスの構成とかについて書いてみます。</p>

<h3 id="section">アジェンダ</h3>

<ol>
  <li>全体像</li>
  <li>システム構成</li>
  <li>Gitリポジトリ</li>
  <li>MongoDBのPaaS</li>
  <li>各イベント管理サービスAPIの違い</li>
  <li>開発メモ</li>
</ol>

<h3 id="section-1">1.全体像</h3>

<p>開発環境も含めて全体像を図にしてみました。(初Cacooですが超べんりですね！)</p>

<p>赤い線がGit操作で、黒い点線がMongoDBへのアクセスです。</p>

<p><a href="https://cacoo.com/diagrams/Cp2yo6tQNlxCm5av"><img border="1" alt="全体像" src="https://cacoo.com/diagrams/Cp2yo6tQNlxCm5av-2260A.png" /></a></p>

<h3 id="section-2">2.システム構成</h3>

<p>大きく分けてwebとクローラーの２つです。
webはherokuに、クローラーはさくらのVPSに配置。</p>

<p>まずは優先してデータ蓄積を…ということでクローラーをpythonとmongodbで作成しました。
(サービス的にはやいとこデータためないと意味ないので。)</p>

<p>クローラーは５分おきに起動するのでScalaよりPythonを選択しました。起動コスト重視です。
(Scalaでサクサク開発できる程のスキルではないというのもありますが… )</p>

<p>実行場所はherokuのworkerも考えたましたが、最終的に既に利用していたさくらVPSでcronジョブとして運用することに。</p>

<p>ということでScalaのWebはデータ参照のみで、データの更新はしません。</p>

<h3 id="git">3.Gitリポジトリ</h3>

<p>webとクローラーは分けてGitで管理。リモートリポジトリはどちらもさくらのVPS上においています。
ただし、本番リリースは開発PCからherokuに別途pushします。</p>

<p>※webもさくらVPSにリモートリポジトリを持って、本番データを参照するステージング環境として利用しています。</p>

<h4 id="eventstats-web">eventstats-web</h4>

<ul>
  <li>host: <a href="http://www.heroku.com/">heroku</a> (Chedar)</li>
  <li>scala
    <ul>
      <li>フレームワーク: <a href="https://github.com/unfiltered/unfiltered">unfiltered</a> 0.5.1</li>
      <li>mongodb接続: <a href="http://api.mongodb.org/scala/casbah/2.1.5.0/">casbah</a> 2.1.5-1</li>
      <li>テンプレートエンジン: <a href="https://github.com/unfiltered/unfiltered/tree/master/scalate">unfiltered-scalate</a> (ssp)</li>
      <li>テスティングライブラリ: <a href="https://github.com/unfiltered/unfiltered/tree/master/spec">unfiltered-specs</a></li>
    </ul>
  </li>
  <li>チャートのレンダリング: <a href="http://code.google.com/apis/chart/index.html">Google Chart Tools</a></li>
</ul>

<h4 id="eventstats-crawler">eventstats-crawler</h4>

<ul>
  <li>host: さくらのvps</li>
  <li>python 2.6
    <ul>
      <li>フレームワーク: なし</li>
      <li>mongodb接続: <a href="http://api.mongodb.org/python/1.11/">pymongo</a> 1.11</li>
      <li>テスティングライブラリ: <a href="http://readthedocs.org/docs/nose/en/latest/">nose</a></li>
      <li>その他: <a href="http://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a> (<em>partake.inのwebスクレイピングに利用</em>)</li>
    </ul>
  </li>
</ul>

<h3 id="mongodbpaas">4.MongoDBのPaas</h3>

<p>herokuプラグインとして<a href="https://addons.heroku.com/mongolab">MongoLab</a>と<a href="https://addons.heroku.com/mongohq">MongoHQ</a>の２つが提供されています。どちらも無料枠があるのですが、MongoLabの方が無料で利用できる容量が大きいのでこちらを選択。</p>

<p>月額の利用料金は以下です。（括弧内は1MBあたりの金額の目安です）
<em>これ以上の容量も利用可能ですが個人で払う範囲ではないと思い除外してます。</em></p>

<h4 id="mongolab">MongoLab</h4>
<ul>
  <li>$ 0.00/240MB</li>
  <li>$10.00/0.5GB  ($0.020/MB)</li>
  <li>$20.00/2.0GB  ($0.009/MB)</li>
</ul>

<h4 id="mongohq">MongoHQ</h4>

<ul>
  <li>$ 0.00/ 16MB</li>
  <li>$ 5.00/256MB  ($0.019/MB)</li>
  <li>$15.00/2.0GB  ($0.007/MB)</li>
</ul>

<h3 id="api">5.各イベント管理サービスAPIの違い</h3>

<p>まずは<strong>atnd, zusaar, partake.inの３サービスに対応</strong>。</p>

<p>それぞれ検索APIを提供してくれているのですが、当然ながら規格とかもないのでリクエストもレスポンスも違いがあります。</p>

<p>データ蓄積する際にそのAPIの差異を吸収して、webアプリから参照する際は気にしなくていい戦略をとりました。
APIの違い検索のみに特化して違いをまとめると以下の通りです。</p>

<h4 id="atnd">atnd</h4>

<p>イベント数も多いので、このAPIをスタンダードに設定。
* API仕様
 * <a href="http://api.atnd.org/">http://api.atnd.org/</a>
* リクエストパス
 * <a href="http://api.atnd.org/events/">/events/</a>
   * イベントの検索
 * <a href="http://api.atnd.org/events/users/">/events/users/</a>
   * イベントに参加しているユーザーの検索</p>

<h4 id="zusaar">zusaar</h4>

<p>基本的にはatnd準拠っぽい感じだけど細かい違いがあります。
 * API仕様
   * <a href="http://www.zusaar.com/doc/api.html">http://www.zusaar.com/doc/api.html</a>
 * リクエストパス
   * <a href="http://www.zusaar.com/api/event/">/api/event/</a>
     * イベントの検索
   * <a href="http://www.zusaar.com/api/event/user/">/api/event/user/</a>
     * イベントに参加しているユーザーの検索
atndとの違い
 * エントリポイントやデータのキー名が単数形
   * events→event
   * users→user
 * 明確なフィールドとしてのtwitter_idが無い
    * 管理者も参加ユーザーも
 * ハッシュタグがない
 * レスポンスはjson一択</p>

<h4 id="partakein">partake.in</h4>

<p>全然違うAPI。APIリストにあっても未実装がほとんどなので、利用する際はソースを確認したほうが良いです。
今回必要になりそうなAPIは２つくらいでした。</p>

<ul>
  <li>API仕様
    <ul>
      <li><a href="http://code.google.com/p/partakein/wiki/PublicWebAPI">http://code.google.com/p/partakein/wiki/PublicWebAPI</a></li>
    </ul>
  </li>
  <li>リクエストパス
    <ul>
      <li><a href="http://partake.in/api/event/search/">/api/event/search</a>
        <ul>
          <li>イベントの検索</li>
        </ul>
      </li>
      <li><a href="http://partake.in/api/event/get/">/api/event/get</a>
        <ul>
          <li>イベントの詳細データ取得</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>APIのソース(抜粋)
    <ul>
      <li><a href="http://code.google.com/p/partakein/source/browse/trunk/Partake/src/main/java/in/partake/controller/api/event/SearchAction.java">in.partake.controller.api.event.SearchAction.java</a></li>
      <li><a href="http://code.google.com/p/partakein/source/browse/trunk/Partake/src/main/java/in/partake/controller/api/event/EventAction.java">in.partake.controller.api.event.EventAction.java</a></li>
    </ul>
  </li>
</ul>

<p>その他の特徴は以下。</p>

<ul>
  <li>複数イベントを特定して一括取得するAPIはない</li>
  <li>フィールド名がcamelCase形式</li>
  <li>レスポンスはjson一択</li>
  <li>検索パラメータも特殊かつ少数</li>
  <li>検索APIで取得できるのはイベントの固定情報のみ
    <ul>
      <li>参加枠数はAPIから取得可能</li>
      <li>変動するユーザー数は取得不可能</li>
      <li>→Webページをスクレイピングするしかないという結論</li>
    </ul>
  </li>
</ul>

<p>上記をふまえ、atnd/zusaarはJSON形式でAPIからデータ取得。</p>

<p>partake.inのみイベントのリストをAPIから取得して、ユーザー数はWebページのスクレイピングで対応しました。</p>

<h3 id="section-3">6.開発メモ</h3>

<h4 id="webherokuvps">web(heroku)からもクローラー(さくらのvps)からも離れた場所にある</h4>

<p>開発PC上だと気にならなかったのですが、1件1件findしてinsertやupdateをしていると当然遅いです。なのである程度まとめて一気にinsertする方針に変更しました(ベンチ結果はありません ^^;)。
更新はクローラーの１プロセスからのみ実行されるので、トランザクションとか意識しなくて良いです。なので比較的自由な構成がとれます。</p>

<h4 id="scalajson-api">ScalaでJSON API</h4>

<p>まずはUnfilteredでJSON APIを作成。けど、jsでjson取得〜チャート生成の実行時間が思いの外大きいので、jsonも１枚のHTMLに埋め込む方針に変更。</p>

<h3 id="section-4">さいごに</h3>

<p>ざっと書きだすとこんな感じです。まぁこんな構成もあるよ、ってくらいにしか言えませんが。</p>

<p>webとクローラーを分けたことで、開発中のスキーマ変更が柔軟に行えたのは良かったのですが、スキーマ定義を共通で管理していないので、そのあたりうまく管理できると良いなと思ったり。
当初はもう少しwebの機能も多かったのですが、効率化をしているうちにシンプルな形に落ち着きました。Scalaのコードもかなり小規模なものになっています。
イベント管理者の方からのご意見ご要望などいただけると嬉しいです :)</p>

<ul>
  <li><a href="http://eventstats.restartr.com">EventStats - イベントの統計情報が見れます</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[イベントの参加人数の遷移が見れるサービス『EventStats』を作りました。 #atnd #zusaar #partake]]></title>
    <link href="http://blog.restartr.com/2011/12/10/eventstats/"/>
    <updated>2011-12-10T18:58:51+09:00</updated>
    <id>http://blog.restartr.com/2011/12/10/eventstats</id>
    <content type="html"><![CDATA[<h3>イベント管理サービスについて</h3>
<p>勉強会などでよく利用されるのが、イベント管理サービス。

ATNDやZusaar,Partakeなど、様々なサービスがあり、現在も新しいものが生まれている状況。</p>
<p>今や勉強会を開催する上で必須のサービスとなっていますよね。</p>
<p>ですが、主催者や参加者にとってそれらのサービスで閲覧できるのは『今どのような状況か』ということだけです。それまでどのように参加者が増えてきたのか、その後も参加者が増えそうか、ということまでは見ることができません。</p>
<p>「今」ではなく「過去」を知りたい。(by @ReSTARTR)</p>
<p>ということで作りました。</p>
<h3>イベントごとに登録数、補欠数、枠数を記録するサービス「EventStats｣</h3>
<ul>
<li><a href="http://eventstats.restartr.com">EventStats - イベントの統計情報が見れます</a></li>
</ul>
<p>簡単にいうと<a href="http://klout.com">Klout</a>の勉強会バージョン（のとっかかり）です。

このサービスを使えば、登録数と枠数の推移を時系列のチャートで確認することができます。

5分おきに各イベント管理サービスの情報を取得して蓄積し、情報を表示しているだけのシンプルなサービスです。

<em>(※ SVGベースのチャートのため、androidでは2.4/3.0以降でないと見れません)</em></p>
<p>あと、2011年11月頭くらいからデータ蓄積開始したのでそれ以前のイベントの履歴は見れない場合があるのと、Partakeの枠数が0人なのも蓄積ミスです。</p>
<h3>使い方</h3>
<ol>
<li><a href="javascript:(function(){s=window.location.href.split('/');type='';if(s[2]=='atnd.org'&amp;&amp;s[3]=='events')type='atnd';else if(s[2]=='www.zusaar.com'&amp;&amp;s[3]=='event')type='zusaar';else if(s[2]=='partake.in'&amp;&amp;s[3]=='events')type='partake';else return false; window.location.href=['http://eventstats.restartr.com/events/'+type,s[4]].join('/');})();">ブックマークレット</a>をブラウザに登録する</li>
<li>履歴を知りたいイベント管理サービスの詳細ページに移動する</li>
<li>ブックマークレットを実行する</li>
</ol>
<h3>技術的なこと</h3>
<p>とりあえずHeroku上でScalaのUnfilteredを使って動かしています。

技術的な話しは追々。</p>
<h3>今後どう料理するか</h3>
<p>実はMA7の締切りぎりぎりに公開してました。（証拠↓）</p>
<p><a href="https://ma7.mashupaward.jp/works/478?locale=ja">https://ma7.mashupaward.jp/works/478?locale=ja</a></p>
<p>が、リソースが足りてないさくらのVPSで動かしていたので、公開したことはとくにアナウンスとかしてませんでした。（MA7には当然のごとく選考漏れでしたが。）で、それからHerokuへの移行を進めつつ機能の修正などをやってたという訳です。</p>
<p>今後は蓄積したデータをもとに、勉強会運営や勉強会への参加の助けとなる数値を加えていければいいなと。

実はテストとか負荷試験とかあんまりできてないのであまりイジメないでください^^;</p>
<ul>
<li><a href="http://eventstats.restartr.com">EventStats - イベントの統計情報が見れます</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
