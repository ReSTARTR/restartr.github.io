<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.8.1" created="2014-04-04 15:58" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>I Will Survive</title>
	<link>http://blog.restartr.com</link>
	<description>PythonとかScalaとか弄ります。</description>
	<pubDate>Fri, 04 Apr 2014 15:58:40 +0000</pubDate>
	<language>ja</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://blog.restartr.com</wp:base_site_url>
	<wp:base_blog_url>http://blog.restartr.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>yoshida.masaki+blog@gmail.com</wp:author_email><wp:author_display_name><![CDATA[ReSTARTR]]></wp:author_display_name><wp:author_first_name><![CDATA[Masaki]]></wp:author_first_name><wp:author_last_name><![CDATA[YOSHIDA]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>51</wp:term_id><wp:category_nicename>gadget</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[gadget]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>81</wp:term_id><wp:category_nicename>golang</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[golang]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>13</wp:term_id><wp:category_nicename>hadoop</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[hadoop]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4</wp:term_id><wp:category_nicename>php</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[PHP]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>39</wp:term_id><wp:category_nicename>python</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[python]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>23</wp:term_id><wp:category_nicename>scala</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Scala]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>67</wp:term_id><wp:category_nicename>web%e3%82%b5%e3%83%bc%e3%83%93%e3%82%b9</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Webサービス]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>16</wp:term_id><wp:category_nicename>%e3%83%87%e3%83%bc%e3%82%bf%e3%83%9e%e3%82%a4%e3%83%8b%e3%83%b3%e3%82%b0</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[データマイニング]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>77</wp:term_id><wp:category_nicename>%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[プログラミング]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>40</wp:term_id><wp:category_nicename>%e5%85%a5%e9%96%80-%e8%87%aa%e7%84%b6%e8%a8%80%e8%aa%9e%e5%87%a6%e7%90%86</wp:category_nicename><wp:category_parent>%e3%83%87%e3%83%bc%e3%82%bf%e3%83%9e%e3%82%a4%e3%83%8b%e3%83%b3%e3%82%b0</wp:category_parent><wp:cat_name><![CDATA[入門 自然言語処理]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>12</wp:term_id><wp:category_nicename>%e5%88%86%e6%95%a3%e5%87%a6%e7%90%86</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[分散処理]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>38</wp:term_id><wp:category_nicename>books</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[書籍]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename>etc</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[雑記]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>9</wp:term_id><wp:tag_slug>2010%e5%b9%b4</wp:tag_slug><wp:tag_name><![CDATA[2010年]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>50</wp:term_id><wp:tag_slug>android</wp:tag_slug><wp:tag_name><![CDATA[android]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>60</wp:term_id><wp:tag_slug>cache</wp:tag_slug><wp:tag_name><![CDATA[cache]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug>cakephp</wp:tag_slug><wp:tag_name><![CDATA[cakephp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>45</wp:term_id><wp:tag_slug>casbah</wp:tag_slug><wp:tag_name><![CDATA[casbah]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>79</wp:term_id><wp:tag_slug>closure</wp:tag_slug><wp:tag_name><![CDATA[closure]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>65</wp:term_id><wp:tag_slug>config</wp:tag_slug><wp:tag_name><![CDATA[config]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>24</wp:term_id><wp:tag_slug>csv</wp:tag_slug><wp:tag_name><![CDATA[csv]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>49</wp:term_id><wp:tag_slug>desire-s</wp:tag_slug><wp:tag_name><![CDATA[desire s]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug>diy</wp:tag_slug><wp:tag_name><![CDATA[DIY]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>76</wp:term_id><wp:tag_slug>document</wp:tag_slug><wp:tag_name><![CDATA[document]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>57</wp:term_id><wp:tag_slug>dotcloud</wp:tag_slug><wp:tag_name><![CDATA[dotcloud]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug>ebook</wp:tag_slug><wp:tag_name><![CDATA[ebook]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug>erlang</wp:tag_slug><wp:tag_name><![CDATA[Erlang]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>68</wp:term_id><wp:tag_slug>eventstats</wp:tag_slug><wp:tag_name><![CDATA[eventstats]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>fileio</wp:tag_slug><wp:tag_name><![CDATA[fileio]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>48</wp:term_id><wp:tag_slug>foursquare</wp:tag_slug><wp:tag_name><![CDATA[foursquare]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>fujirock2010</wp:tag_slug><wp:tag_name><![CDATA[fujirock2010]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>80</wp:term_id><wp:tag_slug>functools</wp:tag_slug><wp:tag_name><![CDATA[functools]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug>gearman</wp:tag_slug><wp:tag_name><![CDATA[gearman]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>82</wp:term_id><wp:tag_slug>go</wp:tag_slug><wp:tag_name><![CDATA[go]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>81</wp:term_id><wp:tag_slug>golang</wp:tag_slug><wp:tag_name><![CDATA[golang]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>hadoop</wp:tag_slug><wp:tag_name><![CDATA[hadoop]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>hdfs</wp:tag_slug><wp:tag_name><![CDATA[hdfs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>71</wp:term_id><wp:tag_slug>heroku</wp:tag_slug><wp:tag_name><![CDATA[heroku]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>iphone</wp:tag_slug><wp:tag_name><![CDATA[iphone]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>iphone-diy</wp:tag_slug><wp:tag_name><![CDATA[iphone DIY]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug>iphone3gs</wp:tag_slug><wp:tag_name><![CDATA[iphone3gs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>53</wp:term_id><wp:tag_slug>iphone4</wp:tag_slug><wp:tag_name><![CDATA[iphone4]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>47</wp:term_id><wp:tag_slug>jetty</wp:tag_slug><wp:tag_name><![CDATA[jetty]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug>jobqueue</wp:tag_slug><wp:tag_name><![CDATA[jobqueue]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>kindle3</wp:tag_slug><wp:tag_name><![CDATA[kindle3]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>kmeans</wp:tag_slug><wp:tag_name><![CDATA[kmeans]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>78</wp:term_id><wp:tag_slug>lambda</wp:tag_slug><wp:tag_name><![CDATA[lambda]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>66</wp:term_id><wp:tag_slug>library</wp:tag_slug><wp:tag_name><![CDATA[library]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>lithium</wp:tag_slug><wp:tag_name><![CDATA[lithium]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>55</wp:term_id><wp:tag_slug>mms</wp:tag_slug><wp:tag_name><![CDATA[mms]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>44</wp:term_id><wp:tag_slug>mongodb</wp:tag_slug><wp:tag_name><![CDATA[mongodb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>64</wp:term_id><wp:tag_slug>mysql</wp:tag_slug><wp:tag_name><![CDATA[mysql]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>37</wp:term_id><wp:tag_slug>netty</wp:tag_slug><wp:tag_name><![CDATA[netty]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>54</wp:term_id><wp:tag_slug>nexus-s</wp:tag_slug><wp:tag_name><![CDATA[nexus s]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>42</wp:term_id><wp:tag_slug>nicotextmining</wp:tag_slug><wp:tag_name><![CDATA[nicoTextMining]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>41</wp:term_id><wp:tag_slug>nlp</wp:tag_slug><wp:tag_name><![CDATA[nlp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>74</wp:term_id><wp:tag_slug>oop</wp:tag_slug><wp:tag_name><![CDATA[oop]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>62</wp:term_id><wp:tag_slug>orm</wp:tag_slug><wp:tag_name><![CDATA[ORM]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>58</wp:term_id><wp:tag_slug>paas</wp:tag_slug><wp:tag_name><![CDATA[paas]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>4</wp:term_id><wp:tag_slug>php</wp:tag_slug><wp:tag_name><![CDATA[PHP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>28</wp:term_id><wp:tag_slug>phpmatsuri</wp:tag_slug><wp:tag_name><![CDATA[phpmatsuri]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>pig</wp:tag_slug><wp:tag_name><![CDATA[pig]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>75</wp:term_id><wp:tag_slug>programming</wp:tag_slug><wp:tag_name><![CDATA[programming]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>70</wp:term_id><wp:tag_slug>pymongo</wp:tag_slug><wp:tag_name><![CDATA[pymongo]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>39</wp:term_id><wp:tag_slug>python</wp:tag_slug><wp:tag_name><![CDATA[python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug>r</wp:tag_slug><wp:tag_name><![CDATA[R]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>56</wp:term_id><wp:tag_slug>sbt</wp:tag_slug><wp:tag_name><![CDATA[sbt]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>23</wp:term_id><wp:tag_slug>scala</wp:tag_slug><wp:tag_name><![CDATA[Scala]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug>scala-netty</wp:tag_slug><wp:tag_name><![CDATA[scala netty]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>scalability</wp:tag_slug><wp:tag_name><![CDATA[Scalability]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>7</wp:term_id><wp:tag_slug>smarty</wp:tag_slug><wp:tag_name><![CDATA[smarty]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>63</wp:term_id><wp:tag_slug>squeryl</wp:tag_slug><wp:tag_name><![CDATA[squeryl]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>61</wp:term_id><wp:tag_slug>study</wp:tag_slug><wp:tag_name><![CDATA[study]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug>symfony</wp:tag_slug><wp:tag_name><![CDATA[symfony]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>5</wp:term_id><wp:tag_slug>templateengine</wp:tag_slug><wp:tag_name><![CDATA[TemplateEngine]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>72</wp:term_id><wp:tag_slug>tumblr</wp:tag_slug><wp:tag_name><![CDATA[tumblr]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>6</wp:term_id><wp:tag_slug>twig</wp:tag_slug><wp:tag_name><![CDATA[twig]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>46</wp:term_id><wp:tag_slug>twitter</wp:tag_slug><wp:tag_name><![CDATA[twitter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>73</wp:term_id><wp:tag_slug>uml</wp:tag_slug><wp:tag_name><![CDATA[uml]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>69</wp:term_id><wp:tag_slug>unfiltered</wp:tag_slug><wp:tag_name><![CDATA[unfiltered]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>59</wp:term_id><wp:tag_slug>varnish</wp:tag_slug><wp:tag_name><![CDATA[varnish]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>websocket</wp:tag_slug><wp:tag_name><![CDATA[websocket]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>83</wp:term_id><wp:tag_slug>zeromq</wp:tag_slug><wp:tag_name><![CDATA[zeromq]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug>%e3%82%b3%e3%83%bc%e3%83%87%e3%82%a3%e3%83%b3%e3%82%b0%e8%a6%8f%e7%b4%84</wp:tag_slug><wp:tag_name><![CDATA[コーディング規約]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>43</wp:term_id><wp:tag_slug>%e5%8b%89%e5%bc%b7%e4%bc%9a</wp:tag_slug><wp:tag_name><![CDATA[勉強会]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>%e7%9b%ae%e6%a8%99</wp:tag_slug><wp:tag_name><![CDATA[目標]]></wp:tag_name></wp:tag>

	<generator>http://wordpress.org/?v=3.8.1</generator>

	<item>
				<title>プロフィール</title>
		<link>http://blog.restartr.com/about/</link>
		<pubDate>Wed, 30 Dec 2009 13:51:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://msky.sakura.ne.jp/myblog/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="_mcePaste">1983年12月：滋賀県で生活開始。</div>
<div>2002年04月：徳島で大学生活開始</div>
<div>2006年04月：東京進出してプログラマとしての日々を開始。某ポータルサイトの中の人。PHP5(ZendFramework)でサイト構築やHadoopを使ったログ解析基盤等を担当。</div>
<div>2011年12月：退職</div>
<div>2012年01月：転職。某アドテク企業のエンジニアに。nginx + python + werkzeug + uwsgi + MySQL + Redis + memcachedで広告配信システムの開発に従事。</div>
<div>2013年03月：退職</div>
<br />
<div>現在求職中です。</div>
<div>

<ul>
<li><a href="https://github.com/ReSTARTR">Github</a></li>
<li><a href="https://twitter.com/ReSTARTR">Twitter</a></li>
</ul>

他ソーシャル系は以下でやってます。

</div>
<div>
<ul>
	<li>twitter:<a href="http://twitter.com/ReSTARTR" target="_blank">http://twitter.com/ReSTARTR</a></li>
	<li>hatena:<a href="http://www.hatena.ne.jp/restartr/" target="_blank">http://www.hatena.ne.jp/restartr/</a></li>
	<li>delicious:<a href="http://delicious.com/msk_y" target="_blank">http://delicious.com/msk_y</a></li>
</ul>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2009-12-30 13:51:29</wp:post_date>
		<wp:post_date_gmt>2009-12-30 13:51:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>phpのテンプレートエンジンtwigとは</title>
		<link>http://blog.restartr.com/2009/12/31/twig-is-the-template-engine-written-in-php/</link>
		<pubDate>Wed, 30 Dec 2009 17:10:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://msky.sakura.ne.jp/myblog/?p=3</guid>
		<description></description>
		<content:encoded><![CDATA[<div>最近、PHPのテンプレートエンジン<a href="http://www.twig-project.org/" target="_blank">Twig</a>の紹介記事をちらほら見かけるようになってきました。</div>
<div>
<ul>
	<li><span style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace; line-height: 18px; font-size: 12px; white-space: pre;"><a href="http://labs.unoh.net/2009/12/phptwig.html" target="_blank">ウノウラボ Unoh Labs: PHPテンプレートエンジンTwigをいじってみました</a></span></li>
	<li><span style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace; line-height: 18px; font-size: 12px; white-space: pre;"><a href="http://d.hatena.ne.jp/anatoo/20091225/1261749843" target="_blank">テンプレートエンジンを素のPHPからTwigに乗り換えた理由 - id:anatooのブログ</a></span></li>
	<li><a href="http://blog.nully.org/archives/154">[Twig]なにやら話題のテンプレートエンジンTwigを使ってみた | Nullyのぶろぐ</a></li>
</ul>
</div>
<div>自分自身も気になってはいたのですが、試してみるきっかけがなく今に至ってしまいました。現在のプロジェクトではviewは関わらないのですが、それまではSmarty2を使っていました。Smarty3や他テンプレートエンジンも気になるところですが、次はTwigがくるだろうと勝手に予測しています。</div>
<div>とりあえず今回はTwigの特徴と他テンプレートエンジンとの比較をまとめてみます。</div>
<div><!--more--></div>
<h2>Twigの特徴</h2>
公式サイトから英訳（適当に）してみました。
<div>
<ul>
	<li>簡潔に書ける</li>
	<li>テンプレート指向文法である</li>
	<li>自動エスケープなど必要なものをすべてサポートしている</li>
	<li>文法を簡単に学習できる（※他テンプレートエンジンはPHP4ベースで作られていたりして、web開発においてベストプラクティスとして採用できない。）</li>
	<li>高い拡張性で独自DSLも作れる</li>
	<li>ユニットテストされているのでライブラリは堅牢で、大きなプロジェクトにもすぐに使える。</li>
	<li>ちゃんとドキュメント化されている：</li>
	<li>セキュリティでは自動出力エスケープやsandboxモードによって安全性を確保</li>
	<li>詳細なエラーメッセージでデバッグもカンタン</li>
	<li>テンプレートを素のPHPコードにコンパイルするので、普通のPHPコードに比べてオーバーヘッドを最小限に抑えることができる。</li>
</ul>
</div>
<h2>開発者について</h2>
<div>Symfony開発者でもある<a href="http://fabien.potencier.org/article/34/templating-engines-in-php" target="_blank">Fabienのブログ記事</a>（と<a href="http://fabien.potencier.org/article/35/templating-engines-in-php-follow-up" target="_blank">そのフォロー記事</a>）を見れば、開発の経緯や他テンプレートエンジンとの比較、それからPHP自体テンプレートエンジンじゃないかという点について言及しています。</div>
<div>素のPHPをViewとして使いたい人はSymfonyTemplateComponentがスタンドアロンで動作するのでそれを使うと良いと。ViewでPHP的な文法を用いることに疑問を持っていたようです。</div>
<div>
<h2>既存テンプレートエンジンとの比較</h2>
</div>
<div>
<div>もともと彼は以下機能を求めてテンプレートエンジンを探していたので、この観点でそれぞれのテンプレートエンジンを評価しています。(なのでこれがそのままTwigの特徴になっています。）</div>
<div>
<div>
<ul>
	<li>Concision (記述が簡潔)</li>
	<li>Template oriented syntax (テンプレート指向な文法)</li>
	<li>Reusability (再利用性)</li>
	<li>Security (安全性)</li>
	<li>Sandbox mode (砂場モード)</li>
</ul>
</div>
</div>
</div>
<div>
<div><strong><a href="http://www.smarty.net/" target="_blank">Smarty</a></strong><strong>:<span style="font-weight: normal;">Smarty3で機能要求を満たしているものの、パフォーマンスが悪い。
<strong><a href="http://phptal.org/" target="_blank">PHPTAL</a></strong><strong>:<span style="font-weight: normal;">よく設計されていて、機能もあるが、webデザイナにはとっつきにくく、テンプレートの継承的なことは特にそう。</span></strong></span></strong></div>
<div><strong><span style="font-weight: normal;"><strong><a href="http://www.ezcomponents.org/docs/tutorials/Template" target="_blank">ezComponents Template</a></strong><strong>:<span style="font-weight: normal;">よく設計されていて、多くの機能を持つが、継承をサポートしていないのと、パフォーマンスが他よりかなり劣る。
<strong><a href="http://dwoo.org/" target="_blank">Dowoo</a></strong><strong>:<span style="font-weight: normal;">Smartyの代替プロジェクトとしてSmartyを真似てつくられていて、継承などの新機能も追加されている。パフォーマンスもSmartyより良いけど、sandboxがないのと、コアシステムの拡張性が十分でない。
<strong><a href="http://www.beberlei.de/calypso/" target="_blank">Calyps</a></strong><strong><a href="http://www.beberlei.de/calypso/" target="_blank">o</a></strong><strong>:</strong>DjangoのPHPクローンだけど諸問題により開発停止している。</span></strong></span></strong></span></strong></div>
</div>
<h3>ベンチマーク</h3>
既存のテンプレートエンジンに関するベンチマーク結果です。
<h4>ベンチマーク方法</h4>
<div>
<div id="_mcePaste">
<ul>
	<li>３つのアイテムをループさせ、シンプルな装飾のレイアウト出力の比較。</li>
	<li>10000回表示するテストを１０回実行した平均値。</li>
	<li>継承はヘッダとフィッタを代わりに使用。</li>
	<li>自動出力エスケープができないものは手動でエスケープ処理。</li>
	<li>コマンドラインでPHPAcceleratorなどを使用しない環境で実行</li>
</ul>
</div>
<h4>処理時間とメモリ消費</h4>
</div>
<div>
<table border="1">
<tbody>
<tr>
<th>Library</th>
<th>Time (sec)</th>
<th>Memory (Ko)</th>
<th>Templates rendered per second</th>
</tr>
<tr>
<th>Twig</th>
<td>3</td>
<td>1,190</td>
<td>3,333</td>
</tr>
<tr>
<th>PHPTAL</th>
<td>3.8</td>
<td>2,100</td>
<td>2,632</td>
</tr>
<tr>
<th>Dwoo</th>
<td>6.9</td>
<td>1,870</td>
<td>1,449</td>
</tr>
<tr>
<th>Smarty 2</th>
<td>12.9</td>
<td>2,350</td>
<td>775</td>
</tr>
<tr>
<th>Smarty 3</th>
<td>14.9</td>
<td>3,230</td>
<td>671</td>
</tr>
<tr>
<th>Calypso</th>
<td>34.3</td>
<td>620</td>
<td>292</td>
</tr>
<tr>
<th>eZ Templates</th>
<td>53</td>
<td>5,850</td>
<td>189</td>
</tr>
</tbody>
</table>
</div>
<h4>コンパイル後のメモリ消費</h4>
※フォロー記事の方がSmartyの数値が妥当らしいのでそっちを引用しています。
<table border="1">
<tbody>
<tr>
<th>Library</th>
<td>Time(sec)</td>
<td>Memory without compilation (Ko)</td>
</tr>
<tr>
<th>Plain PHP</th>
<td>2.4</td>
<td>114</td>
</tr>
<tr>
<th>Twig</th>
<td>3</td>
<td>383</td>
</tr>
<tr>
<th>PHPTAL</th>
<td>3.8</td>
<td>598</td>
</tr>
<tr>
<th>Dwoo</th>
<td>6.9</td>
<td>1,645</td>
</tr>
<tr>
<th>Smarty 2</th>
<td>12.9</td>
<td>610</td>
</tr>
<tr>
<th>Smarty 3</th>
<td>14.9</td>
<td>799</td>
</tr>
<tr>
<th>Calypso</th>
<td>34.3</td>
<td>614</td>
</tr>
<tr>
<th>eZ Templates</th>
<td>53</td>
<td>2,783</td>
</tr>
</tbody>
</table>
<h2>まとめ</h2>
<div>機能性だけでなく速さも兼ね備えたテンプレートエンジンTwig。</div>
<div>便利なテンプレートエンジンはSmartyがデファクトでしたが、Twigはそれを追い抜くかもしれませんね。</div>
<div>Symfony2.0でオプションのViewとして用意するかも、とFabienは個人的見解として言っているので、そうなると日本語圏でも利用が加速するかもしれません。ただ、Symfony2.0はPHP5.3以上必須なのでPHP5.3への移行に依存しますかね。Smarty3が正式リリースまでにどこまでパフォーマンス改善してくるかも楽しみなところです。</div>
<div>

Smartyから乗り換える場合はプログラマよりデザイナの移行コストが高いと思われるのですが、それがクリアできるならぜひ移行してみたいですね。素のPHPよりは断然読みやすく理解しやすですし。

</div>
次は機能的なところをまとめたいと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date>2009-12-31 02:10:55</wp:post_date>
		<wp:post_date_gmt>2009-12-30 17:10:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>twig-is-the-template-engine-written-in-php</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="templateengine"><![CDATA[TemplateEngine]]></category>
		<category domain="post_tag" nicename="twig"><![CDATA[twig]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cJ4dIF]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[1690f5f839d69891f9f39985dcebce5a]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>はじめまして、WP。</title>
		<link>http://blog.restartr.com/2009/12/31/hello-word-press/</link>
		<pubDate>Wed, 30 Dec 2009 15:25:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://msky.sakura.ne.jp/myblog/?p=20</guid>
		<description></description>
		<content:encoded><![CDATA[２００９年も残すところ２４時間を切りました。

新規ブログを立ち上げてみます。

新しいブログを立ち上げるのはもう何度目かわかりませんw

<!--more-->まずは

<strong>１年間継続して記事を書く</strong>

を目標に続けていきたいと思っています。

気ままに、気の赴くままに…

Twitterでは<a title="msk_y" href="http://twitter.com/msk_y" target="_blank">msk_y</a>という名前でやってます。
お気軽にフォローどうぞ。

※ReSTARTERではなくmsk_yという名前でやってます。

msk_yはあまり気に入ってないのですが今更変えられず…

あ、SUPERCARの曲名からパクりましたw]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2009-12-31 00:25:03</wp:post_date>
		<wp:post_date_gmt>2009-12-30 15:25:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello-word-press</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/bSHI98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[5a6090f110bc21b03c2a224134bcb6de]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>zozotown.user</title>
		<link>http://blog.restartr.com/?attachment_id=188</link>
		<pubDate>Sun, 03 Jan 2010 13:02:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/wp-content/uploads/2010/01/zozotown.user_.js</guid>
		<description></description>
		<content:encoded><![CDATA[greasemonkey script]]></content:encoded>
		<excerpt:encoded><![CDATA[greasemonkey script]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date>2010-01-03 22:02:03</wp:post_date>
		<wp:post_date_gmt>2010-01-03 13:02:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zozotown-user</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.restartr.com/wp-content/uploads/2010/01/zozotown.user_.js</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/01/zozotown.user_.js]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>GearmanでMapReduce</title>
		<link>http://blog.restartr.com/?p=208</link>
		<pubDate>Sat, 30 Jan 2010 15:23:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=208</guid>
		<description></description>
		<content:encoded><![CDATA[Zend_queueには
http://framework.zend.com/wiki/display/ZFPROP/Zend_Queue+-+Justin+Plock

MapReduce
http://www.mysqlconf.com/mysql2009/public/schedule/detail/7346
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date>2010-01-31 00:23:04</wp:post_date>
		<wp:post_date_gmt>2010-01-30 15:23:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mapreduce-by-gearman</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>フジロック2010のアーティストをRでクラスタリングしてみた</title>
		<link>http://blog.restartr.com/?p=240</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=240</guid>
		<description></description>
		<content:encoded><![CDATA[Fuji Rock Festival 2010 のアーティストがほぼ揃ったところで、どれを見たら良いか途方にくれ気味の私です。

ということで、最近学習中のRを使い、Last.fmのデータを使ってクラスタリングしてみることにしました。精度は疑問ですが、とりあえず第一段階として公開してみます。

手順はこんな感じです。
<ol>
<li>アーティストリストをつくる</li>
<li>Last.fmのトップタグをもとにアーティスト×タグのCSVファイルを作成</li>
<li>Rでcsvを読み込み、kmeansでクラスタリング</li>
</ol>

<!--more-->
<h3>1:アーティストリストを作る</h3>
公式サイトからコピペして、一覧をつくります。

<h4>artist_list.txt</h4>

<pre class="brush:php">
MUSE
THEM CROOKED VULTURES
ASH
THE BAWDIES
BEARDYMAN
BROKEN BELLS
BROKEN SOCIAL SCENE
Char
!!!
＜中略＞
</pre>

<h3>2:Last.fmのトップタグをもとにアーティスト×タグのCSVファイルを作成</h3>
<h4>toptags.php</h4>
<pre class="brush:php">
$artists = explode("\n",file_get_contents("artist_list.txt"));
$alltags = array();

$list = array();
$nolist = array();

foreach($artists as $name) {
	if (!$name) continue;
	$url = "http://ws.audioscrobbler.com/2.0/?method=artist.getTopTags&api_key=<API_KEY>&artist=".urlencode($name);
	try {
		$response = &file_get_contents($url);
		if(!$response) continue;

		$xml = new SimpleXMLElement($response);
		$tags = array();
		$i = 0;
		foreach($xml->toptags->tag as $tag) {
			$tags[(string)$tag->name] = (int)$tag->count;
			$alltags[(string)$tag->name] = 1;
		}
		if (count($tags)) {
			$list[] = array('name' => $name, 'tags' => $tags);
		} else {
			$nolist[] = array('name' => $name, 'tags' => $tags);
		}
	} catch (Exception $e) {
		//echo $e->getMessage()."\n";
	}
}
arsort($alltags);
$keys = array_keys($alltags);

$fix_list = array();
// ヘッダの出力
echo "\"artist\",\"".implode('","', $keys)."\"\n"; 
// 行ごとにすべてのタグを出力
foreach($list as $artist) {
	$ts = array();
	foreach($keys as $k) {
		$ts[$k] = (array_key_exists($k, $artist["tags"])) ? $artist["tags"][$k] : null;
	}
	echo '"'.$artist["name"].'",'.implode(",", $ts)."\n";
}
</pre>

<h4>実行コマンド</h4>
<pre class="brush:bash">
php toptags.php > artist_tags.csv
</pre>
ここで、データが取得できずWarningが出るので、csvファイルからWarningを取り除いておきます。
※本当ならもっと丁寧にプログラミングすべきですが…

<h3>Rでcsvファイルを読み込み、kmeansでクラスタリング</h3>
<h4>clustering.r</h4>
<pre class="brush:ruby">
data <- read.csv("artsit_tags.csv",header=T,row.name=1)
km <- kmeans(data, 15)
tapply(names(km$cluster), km$cluster, unique)
</pre>

<h3>結果</h3>
<pre class="brush:php"> 
$`1`
[1] "!!!"             "miike snow"      "mgmt"            "parachute"      
[5] "HOT CHIP"        "LCD SOUNDSYSTEM" "RIDDIM SAUNTER"  "SCISSOR SISTERS"

$`2`
[1] "magma"        "magnetic man" "rusko"       

$`3`
[1] "john butler trio"                "overground acoustic underground"
[3] "DONAVON FRANKENREITER"          

$`4`
 [1] "broken bells"        "broken social scene" "dirty projectors"   
 [4] "mutemath"            "detroit social club" "moriarty"           
 [7] "ALBERTA CROSS"       "BELLE AND SEBASTIAN" "FOALS"              
[10] "THE MIDDLE EAST"     "VAMPIRE WEEKEND"     "YEASAYER"           

$`5`
[1] "Z-trip"

$`6`
[1] "la ruda"  "MALLACAN"

$`7`
 [1] "beardyman"                                        
 [2] "the cribes"                                       
 [3] "the entrance band"                                
 [4] "jaga jazzist"                                     
 [5] "mad professor"                                    
 [6] "special others"                                   
 [7] "toe"                                              
 [8] "zappa plays zappa"                                
 [9] "derek trucks & susan tedeschi band"               
[10] "Dexpistols & roc trax crew"                       
[11] "Ego-wrappin' and the gossip of jaxx"              
[12] "emeline michel"                                   
[13] "jamie cullum"                                     
[14] "kitty daisy&lewis"                                
[15] "marines big band"                                 
[16] "豊田勇造"                                         
[17] "伊藤ふみお"                                       
[18] "JJ GREY&MOFRO"                                    
[19] "MATT&KIM"                                         
[20] "守屋純子 Special Big Band For Fuji Rock"          
[21] "難波章浩 -AKIHIRO NAMBA-"                         
[22] "OZOMATLI"                                         
[23] "quasimode"                                        
[24] "Sandii featuring SandiiBunbun and Earth Conscious"
[25] "Y.Sunahara"                                       

$`8`
[1] "ATOMS FOR PEACE"

$`9`
 [1] "green velvet"         "ヒカシュー"           "ken ishii"           
 [4] "takkyu ishino"        "boys noize"           "mylo"                
 [7] "riva starr"           "MASSIVE ATTACK"       "AIR"                 
[10] "BOOM BOOM SATELLITES"

$`10`
 [1] "the bawdies"              "char"                    
 [3] "grapevine"                "キセル"                  
 [5] "ogre you asshole"         "super junky monkey"      
 [7] "superfly"                 "怒髪天"                  
 [9] "theatre brook"            "triceratops"             
[11] "ASIAN KUNG-FU GENERATION" "BUFFALO DAUGHTER"        

$`11`
[1] "muse"                "ash"                 "22-20s"             
[4] "kula shaker"         "straightener"        "CODEINE VELVET CLUB"
[7] "IAN BROWN"           "OCEAN COLOUR SCENE" 

$`12`
[1] "corinne bailey rae" "DIANE BIRCH"       

$`13`
[1] "サンハウス"

$`14`
[1] "ken yokoyama"       "ザ・クロマニヨンズ" "flogging molly"    
[4] "hawaiian6"          "GOOD 4 NOTHING"    

$`15`
[1] "them crooked vultures" "roxy music"            "john fogerty"         
[4] "moe." 
</pre>

※$`7`に含まれるアーティストは、タグがないので固まってしまってます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date>2010-05-17 23:16:20</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clustering-fujirock-2010-artists-by-r</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fujirock2010"><![CDATA[fujirock2010]]></category>
		<category domain="post_tag" nicename="kmeans"><![CDATA[kmeans]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="r"><![CDATA[R]]></category>
		<category domain="category" nicename="%e3%83%87%e3%83%bc%e3%82%bf%e3%83%9e%e3%82%a4%e3%83%8b%e3%83%b3%e3%82%b0"><![CDATA[データマイニング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>今年達成したい目標 中間レビュー</title>
		<link>http://blog.restartr.com/?p=266</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=266</guid>
		<description></description>
		<content:encoded><![CDATA[年明けに掲げた<a href="http://blog.restartr.com/2010/01/01/10-targets-that-i-want-to-achieve-in-2010/">2010年の抱負</a>があります。
<blockquote>
<ul>
<ol>禁煙を継続する</ol>
<ol>間食は一日一回</ol>
<ol>ヤフオクは一ヶ月に一回まで</ol>
<ol>春までにいらないものを積極的に(捨てて|売って)身軽になる</ol>
<ol>身軽になったところで家を引っ越す</ol>
<ol>ブログを一週間に一回は更新する</ol>
<ol>何かひとつオリジナルのwebサービスを公開する</ol>
<ol>PHP以外の言語にも積極的に取り組む(c++/java/python/erlang?)</ol>
<ol>自然言語処理に詳しくなる</ol>
<ol>英語と数学をちゃんと勉強し直す</ol>
<ul>
</blockquote>

なんとなく掲げてから半年以上経ったので、見返してみました。
<blockquote>禁煙を継続する</blockquote>
続いています。

<blockquote>間食は一日一回</blockquote>
これは…ダメですね。ついついおやつを購入してしまいます。

<blockquote>ヤフオクは一ヶ月に一回まで</blockquote>
平均したらこれくらいだと思います。
利用率は一時期に比べると減りました。

<blockquote>春までにいらないものを積極的に(捨てて|売って)身軽になる</blockquote>
だいたい捨てたり売ったりしました。

<blockquote>身軽になったところで家を引っ越す</blockquote>
引っ越しました。これを掲げてから一ヶ月程後にｗ

<blockquote>ブログを一週間に一回は更新する</blockquote>
全然ダメですｗ これから。これから。

<blockquote>何かひとつオリジナルのwebサービスを公開する</blockquote>
まだ考えられていません。

<blockquote>PHP以外の言語にも積極的に取り組む(c++/java/python/erlang?)</blockquote>
C++/Pythonは少しやってみた程度。今はScalaを学習中です。

<blockquote>自然言語処理に詳しくなる</blockquote>
最近めっきり取り組まなくなってしまいました。

<blockquote>英語と数学をちゃんと勉強し直す</blockquote>
なんとなく本読んだり。英語は聞き取りが全くダメなまま。ちょっと本腰いれていかないと。

とまぁこんな感じです。
仕事内容にずいぶん左右されますが、少しずつ達成に向けて取り組んでいく所存です。。。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date>2010-08-15 23:00:25</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>targets-want-to-archive-lookback</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>PHPMATSURI</title>
		<link>http://blog.restartr.com/2010/10/03/phpmatsuri-hack-days-by-php-hackers/bunner/</link>
		<pubDate>Sun, 03 Oct 2010 10:15:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/wp-content/uploads/2010/10/bunner.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>341</wp:post_id>
		<wp:post_date>2010-10-03 19:15:16</wp:post_date>
		<wp:post_date_gmt>2010-10-03 10:15:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bunner</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>335</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.restartr.com/wp-content/uploads/2010/10/bunner.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/10/bunner.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"430";s:6:"height";s:3:"190";s:14:"hwstring_small";s:23:"height='56' width='128'";s:4:"file";s:18:"2010/10/bunner.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:18:"bunner-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:18:"bunner-300x132.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"132";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>XHProfPanel-screenshot</title>
		<link>http://blog.restartr.com/2010/10/10/the-xhprofpanel-debugkit-custom-panel-cakephp/%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88%ef%bc%882010-10-03-11-27-17%ef%bc%89/</link>
		<pubDate>Sat, 09 Oct 2010 15:09:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/wp-content/uploads/2010/10/256d829a326e5fc745e5659600527bde.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>390</wp:post_id>
		<wp:post_date>2010-10-10 00:09:06</wp:post_date>
		<wp:post_date_gmt>2010-10-09 15:09:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88%ef%bc%882010-10-03-11-27-17%ef%bc%89</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>367</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.restartr.com/wp-content/uploads/2010/10/256d829a326e5fc745e5659600527bde.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/10/256d829a326e5fc745e5659600527bde.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"464";s:6:"height";s:2:"42";s:14:"hwstring_small";s:23:"height='11' width='128'";s:4:"file";s:44:"2010/10/256d829a326e5fc745e5659600527bde.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:43:"256d829a326e5fc745e5659600527bde-150x42.png";s:5:"width";s:3:"150";s:6:"height";s:2:"42";}s:6:"medium";a:3:{s:4:"file";s:43:"256d829a326e5fc745e5659600527bde-300x27.png";s:5:"width";s:3:"300";s:6:"height";s:2:"27";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>xhprofpanel-opened-screenshot</title>
		<link>http://blog.restartr.com/2010/10/10/the-xhprofpanel-debugkit-custom-panel-cakephp/%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88%ef%bc%882010-10-10-0-10-48%ef%bc%89/</link>
		<pubDate>Sat, 09 Oct 2010 15:11:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/wp-content/uploads/2010/10/3e2a2b80a04846c0e62982eac40e1f9e.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>392</wp:post_id>
		<wp:post_date>2010-10-10 00:11:18</wp:post_date>
		<wp:post_date_gmt>2010-10-09 15:11:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88%ef%bc%882010-10-10-0-10-48%ef%bc%89</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>367</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.restartr.com/wp-content/uploads/2010/10/3e2a2b80a04846c0e62982eac40e1f9e.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/10/3e2a2b80a04846c0e62982eac40e1f9e.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"885";s:6:"height";s:3:"382";s:14:"hwstring_small";s:23:"height='55' width='128'";s:4:"file";s:44:"2010/10/3e2a2b80a04846c0e62982eac40e1f9e.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:44:"3e2a2b80a04846c0e62982eac40e1f9e-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:44:"3e2a2b80a04846c0e62982eac40e1f9e-300x129.png";s:5:"width";s:3:"300";s:6:"height";s:3:"129";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>xhprofpanel-opened-screenshot</title>
		<link>http://blog.restartr.com/2010/10/10/the-xhprofpanel-debugkit-custom-panel-cakephp/%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88%ef%bc%882010-10-10-0-15-54%ef%bc%89/</link>
		<pubDate>Sat, 09 Oct 2010 15:16:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/wp-content/uploads/2010/10/1bae7dfeae5155b16a1ab5dd2de8bab3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>395</wp:post_id>
		<wp:post_date>2010-10-10 00:16:25</wp:post_date>
		<wp:post_date_gmt>2010-10-09 15:16:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88%ef%bc%882010-10-10-0-15-54%ef%bc%89</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>367</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.restartr.com/wp-content/uploads/2010/10/1bae7dfeae5155b16a1ab5dd2de8bab3.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/10/1bae7dfeae5155b16a1ab5dd2de8bab3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"849";s:6:"height";s:3:"475";s:14:"hwstring_small";s:23:"height='71' width='127'";s:4:"file";s:44:"2010/10/1bae7dfeae5155b16a1ab5dd2de8bab3.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:44:"1bae7dfeae5155b16a1ab5dd2de8bab3-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:44:"1bae7dfeae5155b16a1ab5dd2de8bab3-300x167.png";s:5:"width";s:3:"300";s:6:"height";s:3:"167";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>xhprofpanel-opned-screenshot</title>
		<link>http://blog.restartr.com/2010/10/10/the-xhprofpanel-debugkit-custom-panel-cakephp/%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88%ef%bc%882010-10-10-0-41-22%ef%bc%89/</link>
		<pubDate>Sat, 09 Oct 2010 15:41:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/wp-content/uploads/2010/10/f0c2dac263680a94429c57bd5c1e81ff.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>399</wp:post_id>
		<wp:post_date>2010-10-10 00:41:54</wp:post_date>
		<wp:post_date_gmt>2010-10-09 15:41:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88%ef%bc%882010-10-10-0-41-22%ef%bc%89</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>367</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.restartr.com/wp-content/uploads/2010/10/f0c2dac263680a94429c57bd5c1e81ff.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/10/f0c2dac263680a94429c57bd5c1e81ff.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"846";s:6:"height";s:3:"482";s:14:"hwstring_small";s:23:"height='72' width='128'";s:4:"file";s:44:"2010/10/f0c2dac263680a94429c57bd5c1e81ff.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:44:"f0c2dac263680a94429c57bd5c1e81ff-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:44:"f0c2dac263680a94429c57bd5c1e81ff-300x170.png";s:5:"width";s:3:"300";s:6:"height";s:3:"170";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Scalaコーディング規約</title>
		<link>http://blog.restartr.com/?p=437</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=437</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>1:概要</h3>
<h3>2:インデント</h3>
<ul>
	<li>インデントはスペース2個</li>
	<li>行の折り返し：基本80文字まで。演算途中の場合は演算子で折り返す</li>
	<li>引数が多い場合は2文字インデントして改行
<pre class="brush:scala">foo (
  longLongName,
  longLongName2)</pre>
</li>
	<li>50文字以上改行されない場合は右辺を改行する(2,3個に留めるべきだけど）
<pre class="brush:scala">val myLongLongLongLongLongLongLongLongLongLongName =
  foo (
    longLongName,
    longLongName2)</pre>
</li>
</ul>
<h3>3:名前付けの慣例</h3>
<dl> <dt>クラス・トレイト</dt> <dd>頭大文字のCamelCase。
<pre class="brush:scala">class MyClass {}</pre>
</dd> <dd> </dd> <dt>オブジェクト</dt> <dd>頭小文字のCamelCase。
<pre class="brush:scala">object myObject {}</pre>
</dd> <dt>パッケージ</dt> <dd>javaと同じ
<pre class="brush:scala">package com.restartr.foobar</pre>
</dd> <dt>メソッド,フィールド</dt> <dd> camelCaseで。
<pre class="brush:scala">package com.restartr.mypkg
class MyClass {
  // フィールド
  val myField = ...

  // メソッド
  def myMethod = ...</pre>
</dd> <dt>型パラメータ(ジェネリクス)</dt> <dd> 大文字一字で。
<pre class="brush:scala">class List[A] {
  def map[B](f: A): List[B] = ...
}</pre>
</dd> <dt>型エイリアス</dt>同じ文字を使うこと。

<dd> type StringList = List[String] </dd> <dt>アノテーション</dt> <dd> </dd> <dt>簡潔に書くために</dt> <dd>
<pre class="brush:scala">def add(a: Int, b: Int) = a + b</pre>
</dd>
<h3>4:型</h3>
<pre class="brush:scala">// インターフェース
val name = "ReSTARTR"

// 関数型
val ls: List[String] = ...
ls map { str =@textgreater[] str.toInt }

// 'void'メソッド
def printName { // def printName():Unit = {
  println("ReSTARTR")
}

// アノテーション
value: Type // 基本形
value ::: // ちょっと見にくい例
value : Type // 'two space'の記述

// 属性
Nil: List[String]
Set(values: _*)
"Daniel": AnyRef

// 関数
// 型の前と「=&gt;」の前後にスペースを入れる
def foo(f: Int =&gt; String) = ...
def bar(f: (Boolean, Double) =&gt; LIst[String]) = ...

// 項数１
// 項数が１の場合は丸括弧をはずせる。
def foo(f: Int =&gt; String =&gt; Double) = ...

// 構造型
// 構造型は１行で５０文字以内で記述。
def foo(a: { var bar: String }) = ...
// ただし、長くなりすぎることもある
def foo(a: { def bar(a: Int, b: Int): String; val baz: List[String =&gt; String] }) = ...
// その場合は型を定義しておく
private type FooParam = {
  val baz: List[String =&gt; String]
  def bar(a: Int, b: Int): String
}
def foo(a: FooParams) = ...</pre>
<h3>5:入れ子構造</h3>
<pre class="brush:scala">// 中括弧
// 宣言と同じ行に開始括弧を書く
def foo = {
 ...
}

// 丸括弧
// 括弧の中身とのスペースは開けない
(this + is a vary ++ long *
  expression)
// 例外：パーサーコンビネータを使った文法定義の場合
lazy val e: Parser[Int] = (
    e ~ "+" ~ e ^^ { (e1, _, e2) =&gt; e1 + e2 }
  | e ~ "-" ~ e ^^ { (e1, _, e2) =&gt; e1 - e2 }
)</pre>
<h3>6:宣言</h3>
<ul>
	<li>val/var宣言以外は基本的に宣言のあとに改行するが、20文字程度に収まるなら一行に収める。</li>
	<li>フィールドはメソッドより先に書く</li>
<pre class="brush:scala">class Foo {
  val bar = 42
  val baz = "Daniel"

  def doSomthing() { ... }

  def add(x: Int, y: Int) = x + y</pre>
<dl> <dt>メソッド</dt> <dd>
<pre class="brush:scala">def foo(bar: Baz): Bin = expr
// 例外：返り値型がUnitの場合はシンタックスシュガーが使える
def foo(bar: Baz) {
  expr
}</pre>
</dd> <dt>モディファイア</dt> <dd> 以下の優先順で記述する。
<ol>
	<li>アノテーション</li>
	<li>override</li>
	<li>アクセス修飾子</li>
	<li>'final'モディファイア</li>
	<li>def</li>
</ol>
<pre class="brush:scala">@Transaction
@throws(classOf[IOException])
override protected final def foo() {
  ...
}</pre>
</dd>
<dt>処理本体</dt>
<dd>
<pre class="brush:scala"> 
  // 1. 30文字程度に収まるなら一行で書く
  def add(a: Int, b: Int) = a + b
  // 2. 30文字以上70文字以内程度なら、改行して2文字インデントして続ける
  def sum(ls: List[String[) =
    (ls map { _.toInt }).foldLeft(0) { _  + _ } // 3. 宣言が長くて本体が短い場合は一行に収めてしまう
  // 4. ひとつのパターンマッチだけなら中括弧を省略する
  def sum(ls: List[Int]): Int = ls match {
    case hd :: tail => hd + sum(tail)
    case Nil => 0
  }
</pre>
</dd>
<dt>カリー化</dt>
<dd>
カリー化はちゃんとした理由がない限り使うべきでない。Scalaをよく知らない人にも理解しにくい。
書くならこのように書く
<pre class="brush:scala">
def add(a: Int)(b: Int) = a + b
// 冗長な例
def add(a: Int) = { b: Int => a + b }
</pre>
</dd>
<dt>高階関数</dt>
<dd>
<pre class="brush:scala">
// 関数をパラメータにとる場合は最後におく。
foldLeft(List(1, 2, 3, 4)(0) { _ + _ }

// フィールドはメソッドの宣言ルールに従う。（関数の型やモディファイアなど）

// 関数型
// 中括弧を使って見やすくする
// 中括弧の前後にスペースを入れる
val f1 = { (a: Int, b: Int) => a + b }
val f4: (Int, Int) => Int = { _ + _  } // 
// 複数行に及ぶ場合は右辺を改行する
val f1 = { (a: Int, b: Int) =>
  a + b
}
</pre>
</dd>
</dl>


<h3>7:制御構造</h3>
制御構造(if,for,whieなど)の宣言のあとにはスペースを入れること
<pre class="brush:scala">
if (foo) bar else baz
for (i <- 0 to  10) { ... }
while (true) { println("hello, world") }
</pre>
<dl>
<dt>中括弧</dt>
<dd>
<ul>
<li>if: else句がない場合は中括弧を省略。そうでなければ一行に収まったとしても中括弧で囲む</li>
<li>while: 中括弧は省略しないこと。純粋関数型言語ならwhileは使えないが)</li>
<li>for: yeildを使う場合は中括弧を省略する。そうでなければ一行に収まったとしても中括弧で囲む</li>
<li>case: 一行に収まる場合は中括弧を省略する。それ以外は分かりやすく中括弧で囲む</li>
</ul>
<pre class="brush:scala>
val news = if (foo)
  goodNews()
else
  badNews()

if (foo) {
  println("foo was true)
}

news match {
  case "good" => println("good news")
  case "bad" => println("bad news")
}
</pre>
</dd>
<dt>内包表現</dt>
<dd>
複数のジェネレータを記述する場合などの場合は中括弧を使って、一行ごとに各処理を記述する。
例外として、yeildではなく関数を引数に取る場合は丸括弧でfor式を記述する
<pre class="brush:scala">
// 式がひとつだけの場合
for (i <- 0 to 10) yield x

// 複数の式をもつ場合
for {
  x <- board.rows
  y <- board.files
} yield (x, y)

// 例外
for (x <- board.rows; y <- board.files) {
  printf("(%d, %d)", x, y)
}
</pre>
</dd>
<dt>簡単な状態の表現</dt>
<dd>
Scalaに三項演算子は定義されていないので一行にif/elseをまとめる
<pre class="brush:scala">
val res = if (foo) bar else baz
</pre>
</dd>
</dl>

<h3>8:メソッドの実行</h3>
<dl>
<dt></dt>
<dd>
基本的にJavaと同じ。「.」やメソッド名の前後はスペース入れず、引数をカンマで区切る場合はカンマの後ろにスペースを入れる
<pre class="brush:scala">
foo(42, bar)
target.foo(42, bar)
target.foo()
</pre>
</dd>
<dt>引数が0の場合</dt>
<dd>
副作用を起こさない場合のみ丸括弧を省略可能だが、
2文字程度なのだから省略はしないほうが明瞭。

<pre class="brush:scala">
queue.size // 副作用がないので丸括弧は省略できる
queue.println() // 標準出力への副作用があるので省略しない
</pre>
</dd>
<dt>引数が1の場合</dt>
<dd>
副作用をもたない純粋な関数の場合だけ<em>index notation</em>を使用できる
<pre class="brush:scala">
names foreach { n => println(n) }
names mkString ","
optStr getOrElse "<empty>"
</pre>
</dd>
<dt>高階関数</dt>
<dd>
関数を引数にとる場合(mapやforeachなど)は<em>infix notation</em>を使用すること
<pre class="brush:scala">
names map { _.toUpperCase } filter { _.length > 5 }
</pre>
</dd>
<dt>演算子</dt>
<dd>
演算子としてのメソッドは常に<em>infix notation</em>を使う。
<pre class="brush:scala">
// '+'メソッドの前後にスペースを入れて、引数は括弧を使わずに書く
"daniel" + " "  + "Spiewak"  // "daniel"+(" "+("Spiewak"))

// 複数の引数をとる演算メソッドは<em>infix notation</em>＋丸括弧を使う
foo ** (bar, baz)
</pre>
</dd>
</dl>

<h3>9:ファイル</h3>
<dt></dt>
<dd>
論理的にまとまめられるtrait, object, classesは1ファイルにまとめる。
<pre class="brush:scala">
package com.restartr.sample
class Inbox { ... }

// companion object
object Inbox { ... }
</pre>
</dd>
<dt>複数単位のファイル</dt>
<dd>
sealed trait とそのサブクラスはひとつのファイルにまとめなければいけないという制約がある。
複数単位を保持するファイルは先頭が小文字の<em>camelCase</em>で作成する。
<pre class="brush:scala">
// sampleMultiUnit.scala
sealed trait Option[+A]

case class Some[A](a: A) extends Option[A]

case object None extends Option[Nothing]
</pre>
</dd>
</dl>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>437</wp:post_id>
		<wp:post_date>2010-12-25 11:59:54</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scala-style-guide</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="%e3%82%b3%e3%83%bc%e3%83%87%e3%82%a3%e3%83%b3%e3%82%b0%e8%a6%8f%e7%b4%84"><![CDATA[コーディング規約]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>チェックインマップのスクリーンショット</title>
		<link>http://blog.restartr.com/2011/04/06/realtime-checkin-map-build-with-scala-and-jetty7-websocket/check-in-map-screenshot/</link>
		<pubDate>Tue, 05 Apr 2011 15:24:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/wp-content/uploads/2011/04/check-in-map-screenshot.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>800</wp:post_id>
		<wp:post_date>2011-04-06 00:24:21</wp:post_date>
		<wp:post_date_gmt>2011-04-05 15:24:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>check-in-map-screenshot</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>799</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.restartr.com/wp-content/uploads/2011/04/check-in-map-screenshot.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[チェックインマップのスクリーンショット]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/04/check-in-map-screenshot.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"619";s:6:"height";s:3:"441";s:14:"hwstring_small";s:23:"height='91' width='128'";s:4:"file";s:35:"2011/04/check-in-map-screenshot.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:35:"check-in-map-screenshot-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:35:"check-in-map-screenshot-300x213.png";s:5:"width";s:3:"300";s:6:"height";s:3:"213";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>4ee8a29b22700d15be20990984897581</title>
		<link>http://blog.restartr.com/2011/04/25/bought-htc-desire-s/%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88%ef%bc%882011-04-25-23-02-08%ef%bc%89/</link>
		<pubDate>Mon, 25 Apr 2011 14:03:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/wp-content/uploads/2011/04/4ee8a29b22700d15be20990984897581.png</guid>
		<description></description>
		<content:encoded><![CDATA[新入荷情報！desire sを入荷しました！お値段は51800円になります！ http://twitpic.com/4mbttc]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>850</wp:post_id>
		<wp:post_date>2011-04-25 23:03:41</wp:post_date>
		<wp:post_date_gmt>2011-04-25 14:03:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88%ef%bc%882011-04-25-23-02-08%ef%bc%89</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>846</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.restartr.com/wp-content/uploads/2011/04/4ee8a29b22700d15be20990984897581.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/04/4ee8a29b22700d15be20990984897581.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"738";s:6:"height";s:3:"338";s:14:"hwstring_small";s:23:"height='58' width='128'";s:4:"file";s:44:"2011/04/4ee8a29b22700d15be20990984897581.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:44:"4ee8a29b22700d15be20990984897581-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:44:"4ee8a29b22700d15be20990984897581-300x137.png";s:5:"width";s:3:"300";s:6:"height";s:3:"137";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>cookpad</title>
		<link>http://blog.restartr.com/2011/06/21/go-to-varnish-study-tokyovc/imag0053/</link>
		<pubDate>Tue, 21 Jun 2011 14:28:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/wp-content/uploads/2011/06/IMAG0053.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1001</wp:post_id>
		<wp:post_date>2011-06-21 23:28:03</wp:post_date>
		<wp:post_date_gmt>2011-06-21 14:28:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>imag0053</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>996</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.restartr.com/wp-content/uploads/2011/06/IMAG0053.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/06/IMAG0053.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"2592";s:6:"height";s:4:"1552";s:14:"hwstring_small";s:23:"height='76' width='128'";s:4:"file";s:20:"2011/06/IMAG0053.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:20:"IMAG0053-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:20:"IMAG0053-300x179.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"179";}s:5:"large";a:3:{s:4:"file";s:21:"IMAG0053-1024x613.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"613";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:12:"HTC Desire S";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1308416463";s:9:"copyright";s:0:"";s:12:"focal_length";s:4:"3.53";s:3:"iso";s:2:"94";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Web開発における開発に本当に必要なもの（PHPが前提）</title>
		<link>http://blog.restartr.com/?p=1091</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1091</guid>
		<description></description>
		<content:encoded><![CDATA[レイヤー間をarrayで会話するのだけは避ける。
あと高度なO/Rマッパーは必要ないけど、モデルの定義は必要と思う。
DBから取り出したレコード(array)を各所で別のarrayに詰め替えて利用してたらそりゃ破綻するでしょう。
結局FW変えても制御できる範囲はあまり変わらないと思う。

あぁ、結局メッセージを送る側と受ける側の二点間しか注目していないからarrayで会話する結果になるのか。
PHPのプロセス生存期間なんて一瞬なのに、その中にあるリクエストからレスポンスまでの短い時間ですら全体を文脈として捉えられていない。きっと。

その前提がある限り、どんなFWに変えても、どんな言語に変えても、結果は今とそれほど変わらないんじゃなかろうか。
FWや言語に期待感を抱きすぎで、本当に獲得しなきゃいけないのは設計力ということになる。

全体がみわたせるアーキテクトが不在、とかそんな感じ。

<a href="http://masuda220.jugem.jp/?eid=450">アーキテクトを考える | システム設計日記</a>


ふとDDD本が未読だということを思い出して欝になるなど。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1091</wp:post_id>
		<wp:post_date>2011-10-10 22:13:47</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>入社しました</title>
		<link>http://blog.restartr.com/?p=1133</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1133</guid>
		<description></description>
		<content:encoded><![CDATA[
### 転職活動のはなし

9月のおわり頃から活動を開始して、実際に面接させてもらったのは合計3社。
（知人のエンジニアからのお誘いも頂いたのでそれを含めると4社。）

エージェントを通じて1社紹介してもらい、あと2社はHPの採用ページからエントリしました。
採用言語的にいうとPythonとPHPとScalaの3社です。
最近はScalaを積極的に取り組んでいたこともあって迷ったのですが、自分の求めている開発体制に一番近いPythonな会社にお世話になることにしました。もちろん採用言語だけで決めたわけではないです。

普段から少ないながらもブログを書いたり[githubでコードを公開](http://github.com/ReSTARTR/)していたおかげで、多少なりとも技術的スキルの説明はしやすかったです。なんでも手をつけておくものですねｗ
余談ですが、今回はできるだけ密かに転職活動をしたかったので避けましたが、今ならやはりTwitterとかを使った転職活動が一番良いと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1133</wp:post_id>
		<wp:post_date>2011-12-01 22:32:41</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Kauli株式会社を退職しました</title>
		<link>http://blog.restartr.com/?p=1270</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1270</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.flickr.com/photos/53244662@N04/8599680561/" title="Cleanup my keyboard by ReSTARTR_y, on Flickr"><img src="http://farm9.staticflickr.com/8106/8599680561_da30653690.jpg" width="500" height="333" alt="Cleanup my keyboard"></a>

3月末付でKauli株式会社を退職することになり、3月29日が最終出社日となりました。

2012年01月入社なので、1年3ヶ月という短い間でしたが、<br />
これまでで最も充実した1年だったように思います。

広告配信システムという技術的に非常に挑戦しがいのある分野で、<br />
非常に技術力の高いエンジニアと共にPythonプログラマーとして<br />
充実した日々を過ごさせてもらいました。

* 配信用データストアの検証(結果的にRedisを採用)
* 合計数十台自作サーバーの組立(参考：<a href="https://gist.github.com/nekoya/3749146" title="Kauli自作サーバ組み立てマニュアル" target="_blank">Kauli自作サーバ組み立てマニュアル</a>)
* 開発部総出でデータセンターでサーバーラッキング
* 某社SOAP APIに難儀
* 開発のベースをgithubに移行
* nginx + Python(werkzeug+uWSGI) + Redisによる広告配信システムの開発
* アプリケーションのパフォーマンスチューニング

等々、これまでにない経験を1年ちょっとという短い期間に経験できました。

正直離れるのが勿体無いのですが、キャリアの見直しをしたかったとか<br />
諸々の理由により、退職することを決意しました。<br />
同僚の方々には大変お世話になりました。どうもありがとうございました。

転職先はまだ決まっていないので良い会社があればぜひ<a href="https://twitter.com/restartr">@ReSTARTR</a>にご紹介ください＞＜

...

なお、Kauliでは継続してエンジニアを募集していますので、<br />
大規模広告配信システムをPythonで開発したい方々は下記からぜひぜひご応募を。

* <b><a href="http://kau.li/jp/pages/recruit">Kauli - 採用情報</a></b>

それでは。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1270</wp:post_id>
		<wp:post_date>2013-03-31 17:11:13</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>retirement2013</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>コーディングを支える技術</title>
		<link>http://blog.restartr.com/?p=1418</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1418</guid>
		<description></description>
		<content:encoded><![CDATA[[コーディングを支える技術](http://www.amazon.co.jp/dp/477415654X/)を読み終えました。

サクサク読み進められるのでよい感じ。

### 内容

* 制御構造をどうやって実現するのか
* 基本情報技術者試験で勉強するようなもの
* OOP・Mix-in・Traitの概念

### 言語

* アセンブラ
* Lisp
* C
* C++
* Perl
* Python
* Ruby
* PHP
* JavaScript
* Scala
* Haskell

など多岐にわたりますが、言語を知らなくても特に困るものではなかったです。


プログラミングの原点に立ち返ることで、そこからどこに向かって伸ばしていくべきなのか考えることができるもの。
今ある概念を理解する上で支えになるもの。
技術リファレンスではなくて、読み物。

10章の並行処理でのトランザクショナルメモリあたりはとくに面白かったです。

プログラミング言語の成り立ちから現在の状況、今後向かう先なんかを掴むのに最適だと思いました。
深く掘り下げたいひとのために、コラム、補足欄の関連ワード、あとがきに諸々記載もある。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1418</wp:post_id>
		<wp:post_date>2013-04-25 15:54:11</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>technology-for-coding</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0"><![CDATA[プログラミング]]></category>
		<category domain="category" nicename="books"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>PHPのテンプレートエンジンTwigとSmarty3のベンチマークをとってみた</title>
		<link>http://blog.restartr.com/2009/12/31/benchmark-php-template-engine-twig-and-smarty3/</link>
		<pubDate>Thu, 31 Dec 2009 06:08:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=82</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blog.restartr.com/2009/12/31/twig-is-the-template-engine-written-in-php/">前回の記事</a>でPHPのテンプレートエンジンTwigを他テンプレートエンジンと比較したりしました。
<h4>日本語ドキュメント</h4>
<a href="http://b.hatena.ne.jp/entry/d.hatena.ne.jp/anatoo/20091225/1261749843">はてブコメント</a>で発見したのですが、<a href="http://www.hatena.ne.jp/masakielastic2//">masakielastic2</a>さんがドキュメントを<a href="http://github.com/masakielastic/twig-ja">日本語訳</a>していらっしゃいますね。
詳細な使い方はそちらを見て頂くと良いでしょう。

<!--more-->
<h2>ベンチマーク</h2>
Fabienさんのベンチマークソースがリンク切れになっていたので、自分でカンタンなサンプルつくってベンチマークとってみました。これで正しい数値を得られたという保証はありません（笑
<h3>使用バージョン</h3>
<ul>
	<li>Smarty : 3-b5</li>
	<li>Twig : 0.9.5-DEV</li>
</ul>
<h3>ベンチマーク内容</h3>
<ul>
	<li>２０個の子要素をもつ１０個の配列を用意</li>
	<li>extendsもしくはincludeで複数テンプレートから1ページを生成</li>
	<li>コンパイルキャッシュしない時とする時を両方計測</li>
	<li>APCをonにしない時とする時を両方計測</li>
	<li>ab -n 1000 -c 5 http://localhost/<em>engine</em>/benchmark.php</li>
</ul>
<h3>結果</h3>
<table border="1" cellspacing="0">
<tbody>
<tr>
<th>engine</th>
<th>コンパイル</th>
<th>APC</th>
<th>request per second</th>
</tr>
<tr>
<th>html</th>
<td>-</td>
<td>-</td>
<td>4991.31</td>
</tr>
<tr>
<th>Smarty3</th>
<td>全て</td>
<td>off</td>
<td>44.04</td>
</tr>
<tr>
<th>Twig</th>
<td>全て</td>
<td>off</td>
<td>128.33</td>
</tr>
<tr>
<th>Smarty3</th>
<td>初回のみ</td>
<td>off</td>
<td>401.66</td>
</tr>
<tr>
<th>Twig</th>
<td>初回のみ</td>
<td>off</td>
<td>577.69</td>
</tr>
<tr>
<th>Smarty3</th>
<td>初回のみ</td>
<td>on</td>
<td>464.79</td>
</tr>
<tr>
<th>Twig</th>
<td>初回のみ</td>
<td>on</td>
<td>679.03</td>
</tr>
</tbody>
</table>
<h4>コンパイルキヤッシュの効果</h4>
Fabienさんのベンチマークでも明らかでしたが、Smarty3 に対して速いですが、コンパイル後ではそれほど変わらないのが残念ですね。
<h4>APCによる効果</h4>
<a href="http://www.amazon.co.jp/dp/4774140643/">WEB+DB PRESS Vol.54</a>の「PHPをキャッシュで高速化」の記事を見てAPCも入れていたので、APC有無による違いも見てみました。コンパイル後のソースはSmartyは素のPHPで、Twigはクラスだという違いがあるので、APCによって差が出るのではと予測していたのですが変化率は両者共に大して変わらず。。
<h4>ページキャッシュの有無</h4>
今回のベンチマーク結果は全体的にTiwg優勢でした。
ただ、Smartyはページキャッシュ機能を持っているので、onにすれば4220.34rpsと圧倒的に早くなりました。
Twigはページキャッシュの仕組みを持っていませんが、柔軟な拡張性を誇るTwigなのでそれは後からなんとでもなりそうです。
<h2>ソース</h2>
参考程度に今回使用したソースを晒し上げておきます。
文法的な感覚もこれを見れば大体つかめるのではないでしょうか。
<h3>Smarty3-b5</h3>
smarty3/benchmark.php
<pre class="brush:php">$elements = array_fill(1,10, array_fill(1,20,'this is elements'));
require_once('./libs/Smarty.class.php');
$smarty = new Smarty;
// コンパイルキャッシュoff
$smarty-&gt;force_compile = true;
$smarty-&gt;caching = false;
// コンパイルキャッシュon
//$smarty-&gt;force_compile = false
//$smarty-&gt;caching = true

$smarty-&gt;assign("title", 'Smarty3 benchmark test');
$smarty-&gt;assign("elements", $elements);

$smarty-&gt;display('templates/child.tpl');</pre>
smarty3/templates/child.tpl
<pre class="brush:xml">
<div id="header">
		{include file='child_header.tpl'}</div>
<div id="content">
		{include file='child_contents.tpl'}</div>
<div id="footer">
	this is footer</div></pre>
smarty3/templates_header.tpl
<pre class="brush:xml">
<h1>this is generated by Smarty3.</h1>
</pre>
smarty3/templates_contents.tpl
<pre class="brush:xml">
<ul>
	{foreach from=$elements key=k item=el}
	<li>{$k}:
<ul>
	{foreach from=$el item=e}
	<li>{$e}</li>
{/foreach}</ul>
</li>
{/foreach}</ul>
</pre>
<h3>Twig</h3>
<pre class="brush:php">$elements = array_fill(1,10, array_fill(1,20,'this is elements'));
require_once '/var/www/html/twig/Twig/Autoloader.php';
Twig_Autoloader::register();
$twig = new Twig_Environment(new Twig_Loader_Filesystem('./templates'), array(
    // コンパイルキャッシュoff
    'cache' =&gt; true,
    // コンパイルキャッシュon
    // 'cache' =&gt;  true,
);
$template = $twig-&gt;loadTemplate('benchmark/child.html');
$template-&gt;display(array(
    'title' =&gt; 'Twig benchmark test',
    'elements' =&gt; $elements,
    'items' =&gt; array('hoge','moge','chome')
));</pre>
twig/templates/benchmark/parent.html
<pre class="brush:xml">
<div id="header">
        {% block header %}
        this is header
        {% endblock header %}</div>
<div id="content">
        {% block content %}
        this is content
        {% endblock content %}</div>
<div id="footer">
        {% block footer %}
        this is footer
        {% endblock footer %}</div></pre>
twig/templates/benchmark/child.html
<pre class="brush:xml">{% extends 'benchmark/parent.html' %}
{% block header %}
<h1>this is generated by twig.</h1>
{% endblock header %}
{% block content %}
<ul>
    {% for k,el in elements %}
	<li>{{ k }}:
<ul>
    {% for e in el %}
	<li>{{ e }}</li>
{% endfor %}</ul>
{% endfor %}</li>
</ul>
{% endblock content %}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date>2009-12-31 15:08:17</wp:post_date>
		<wp:post_date_gmt>2009-12-31 06:08:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>benchmark-php-template-engine-twig-and-smarty3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="smarty"><![CDATA[smarty]]></category>
		<category domain="post_tag" nicename="templateengine"><![CDATA[TemplateEngine]]></category>
		<category domain="post_tag" nicename="twig"><![CDATA[twig]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cEUNK9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[489f26a15fc4cab87bf97e62985521ba]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>さようなら、2009年</title>
		<link>http://blog.restartr.com/2009/12/31/good-bye-2009/</link>
		<pubDate>Thu, 31 Dec 2009 09:11:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=150</guid>
		<description></description>
		<content:encoded><![CDATA[今年も残すところあとわずか。

今はアカウントの整理に追われていますw

お仕事やプライベートなど、いろんなところでいろんな方にお世話になりました。

故郷の方では悲しいお別れもあったし、姉の結婚式もありました。

今年やったことを総括してみます

<!--more-->
<ul>
	<li>４月は毎年恒例人事異動</li>
	<li>本格的にTwitterはじめた</li>
	<li>Twitterボットつくった</li>
	<li>MySQLに悩まされ、詳しくなった</li>
	<li>このブログをギリギリで始めた</li>
	<li>などなど</li>
</ul>
そんなにニュースないですね…

新年に目標をちゃんと掲げられるように今から練り始めようと思います。テレビでも観ながら。

あ、僕の2009年はこんな漢字（感じ）らしいです。

<a href="http://cake.oresama.jp/result/13cd6ce78b00fc6f2526ff060d1de08e.html ">一文字２００９年版 あなたの今年を一文字で-</a>

…2010年はもう少し前向きな漢字で終われますように。

では、皆様よいお年を。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>150</wp:post_id>
		<wp:post_date>2009-12-31 18:11:05</wp:post_date>
		<wp:post_date_gmt>2009-12-31 09:11:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>good-bye-2009</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[3b1be7c5d0d4170f25bcc0b1b31dc9fa]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/bDL9h6]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>こんにちは、2010年 - 今年達成したい10の目標</title>
		<link>http://blog.restartr.com/2010/01/01/10-targets-that-i-want-to-achieve-in-2010/</link>
		<pubDate>Fri, 01 Jan 2010 14:39:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=156</guid>
		<description></description>
		<content:encoded><![CDATA[あけましておめでとうございます。
昨年中は大変お世話になりました。
本年もどうぞよろしくお願いいたします。

と、新年のご挨拶をしたところで、今年の目標をつらつら挙げてみようと思います。

<!--more-->
<ol>
	<li>禁煙を継続する</li>
	<li>間食は一日一回</li>
	<li>ヤフオクは一ヶ月に一回まで</li>
	<li>春までにいらないものを積極的に(捨てて|売って)身軽になる</li>
	<li>身軽になったところで家を引っ越す</li>
	<li>ブログを一週間に一回は更新する</li>
	<li>何かひとつオリジナルのwebサービスを公開する</li>
	<li>PHP以外の言語にも積極的に取り組む(c++/java/python/erlang?)</li>
	<li>自然言語処理に詳しくなる</li>
	<li>英語と数学をちゃんと勉強し直す</li>
</ol>
1〜5は生活習慣の改善です。ヤフオクに依存しすぎなので少し距離をおこうかな、と...

5〜10は技術的なことで主にTwitterや本ブログでの活動について。仕事につながることもありますが基本的にはプライベートな活動についてということで。英語は海外ブログの読解できるレベルまで、数学は高校の文系レベルくらいまでいけたらな、と。

あまり具体的すぎる目標を掲げるのも気が重くなるだけなのでなんとなく思いつきベースでこんな感じにしてみました。

適当にがんばります。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date>2010-01-01 23:39:44</wp:post_date>
		<wp:post_date_gmt>2010-01-01 14:39:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>10-targets-that-i-want-to-achieve-in-2010</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="2010%e5%b9%b4"><![CDATA[2010年]]></category>
		<category domain="post_tag" nicename="%e7%9b%ae%e6%a8%99"><![CDATA[目標]]></category>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[f657db0ddab8d266a4e695255187528e]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/bqdqbb]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Gearmanでqueueing</title>
		<link>http://blog.restartr.com/2010/01/31/gearman%e3%81%a7queueing/</link>
		<pubDate>Sat, 30 Jan 2010 15:16:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>queueing</h3>
webページを生成する際には、今すぐやらなきゃいけないことと、今すぐでなくても良いものがあります。
今すぐやらなきゃいけないこととは、ユーザーリクエストに対するDB参照結果等のことで、今すぐでなくても良いものとはアクセスログなどの処理をDBに書き込んだりメール送信したりなど。それ以外にもあるかもですが大体そんな感じです。

通常であればすべて一回のHTTPリクエストの中でやるわけですが、queueingをすれば今やるべきでないことを後回しにできます。他にもメリットはありますが割愛で。

で、phpでqueuingをやるとしたら、こんなのがあるそうです。
<ul>
	<li><a href="http://q4m.31tools.com/">Q4M
</a>
</li>
<li><a href="http://gearman.org">Gearman</a></li>
<li><a href="http://activemq.apache.org/">ActiveMQ</a></li>
<li><a href="http://kr.github.com/beanstalkd/">beanstalkd</a></li>
</ul>

で、Q4Mを試そうとしたらMySQL5.1以降でないとダメとか。
ちょっとした事情で「5.1以降」という制約は避けたいので、Gearmanを試してみる事に。
※最後のbeanstalkdは<a href="http://rad-dev.org/">lithium</a>から使えるみたいです(<a href="http://rad-dev.org/li3_queue">li3_queue</a>)。
<!--more-->

<h3>仕組み</h3>
図解は<a href="http://gearman.org/images/gearman_stack.png">公式サイトの図</a>を見て下さい。

登場人物は大きく３つ。
<ul>
	<li> ・Client：処理を依頼する人</li>
	<li> ・Worker：依頼された処理を実行する人</li>
	<li> ・JobServer：ClientとWorkerの橋渡しをする人</li>
</ul>
JobServerはdaemonで常駐していて、
Clientからの要求がある度に、別途常駐しているWorkerに対して処理を投げます。
かなりシンプルです。


<h3>使い道</h3>
Client側から処理を依頼するパターンはだいたい４つ。
<ul>
	<li>今すぐ依頼して、その結果を受け取る</li>
	<li>今すぐ依頼して、結果を待たずに終了する</li>
	<li>タスクを追加して、最後にまとめて実行して、その結果を受け取る</li>
	<li>タスクを追加して、最後にまとめて実行して、結果を待たずに終了する</li>
</ul>


<h3>インストール</h3>
Gearmanサーバーのインストール
<blockquote>wget http://launchpad.net/gearmand/trunk/0.11/+download/gearmand-0.11.tar.gz
tar zxf gearmand-0.11.tar.gz
cd gearmand-0.11
./configure
make; make install</blockquote>
起動
<blockquote>/usr/local/sbin/gearmand  -u root --daemon</blockquote>
php extensionのインストール
<blockquote>wget http://pecl.php.net/get/gearman-0.6.0.tgz
tar zxf gearman-0.6.0.tgz
cd gearman-0.6.0
phpize
./configure
make; make install</blockquote>


<h3>サンプル</h3>

<h4>今すぐ依頼して、結果を受け取るパターン</h4>
worker.php
<pre class="brush:php">
$worker = new GearmanWorker();
$worker->addServer();
$worker-&gt;addFunction('hoge','hoge_func');
// 常駐
while($worker-&gt;work());

function hoge_func(GearmanJob $job)
{
    return 'hoge'.$job-&gt;workload();
}
</pre>
client.php
<pre class="brush:php">
$worker = new GearmanWorker();
$worker->addServer();
echo  $client-&gt;do('hoge', 'hello');
echo "\n";
</pre>
実行してみる
<blockquote>$ php woker.php &amp;
$ php client.php
hello, hoge</blockquote>
これだけだとほぼ意味ないので、重い処理を遅延実行させてみます。

<h4>今すぐ依頼して、結果を待たずに終了するパターン</h4>
worker.php
<pre class="brush:php">
$worker = new GearmanWorker();
$worker-&gt;addServer();
$worker-&gt;addFunction('hoge','hoge_func');
$worker-&gt;addFunction('heavy','heavy_func');
// 常駐
while($worker-&gt;work());

function hoge_func(GearmanJob $job)
{
    return 'hoge, '.$job-&gt;workload();
}
function heavy_func(GearmanJob $job)
{
        echo "wait...";
        sleep(10);
    return 'hoge, '.$job-&gt;workload();
}
</pre>
client.php
<pre class="brush:php">
$client = new GearmanClient();
$client->addServer();
echo  $client-&gt;do('hoge', 'hello');
echo "\n";
echo $client-&gt;do('heavy', 'hello (sync)');
echo "\n";
$client-&gt;doBackground('heavy', 'hello (async)');
echo "\n";
</pre>
実行してみる
<blockquote>$ php worker.php &amp;
$ php client.php
hoge, hello
hoge, hello (sync)</blockquote>
とまぁ、doBackgroundで依頼したキューの場合、clientでは結果を受け取ってません。
これが基本的な使い方。

<h4>タスクを追加して、最後にまとめて実行して、その結果を受け取る</h4>
task_client.php
<pre class="brush:php">
$client = new GearmanClient();
$client->addServer();
$client->setCompleteCallback('task_cb');
$client->addTask('hoge', 'arg1');
$client->addTask('heavy', 'arg2');
$client->runTasks();
function task_cb(GearmanTask $task)
{
    echo '[result]'.$task->data();
    echo "\n";
}
</pre>
<blockquote>
$ worker.php &
$ task_client.php
[result]hoge, arg1
[result]hoge, arg2
</blockquote>
と、ひとつめの結果表示のあとには重い処理待ちが発生します。

<h4>タスクを追加して、最後にまとめて実行して、結果を待たずに終了する</h4>
重い処理をバックグラウンドのタスクとして登録します。
task_client.php
<pre  class="brush:php">

$client = new GearmanClient();
$client->addServer();
$client->setCompleteCallback('task_cb');
$client->addTask('hoge', 'arg1');
$client->addTaskBackground('heavy', 'arg2');
$client->runTasks();

function task_cb(GearmanTask $task)
{
        echo '[result]'.$task->data();
        echo "\n";
}
</pre>
実行
<blockquote>
[result]hoge, arg1
</blockquote>
addTaskBackgroundで追加したタスクの結果のみ待たずに処理が終了します。
この例だと意味ないですが、今すぐ結果を必要としない処理を後回しにすることでユーザーへのレスポンスを高速化することができます。

<h3>注意点</h3>
<h4>引数は数字と文字列のみ</h4>
配列やオブジェクトではやりとりできないので、
そういったものはシリアライズするとかjsonにするとかして渡さないとだめです。</h4>
<h4>workerが見つかるまで待つ</h4>
clientからリクエストするworker名が存在しない（常駐していない場合）は、
JobServerはworkerが見つかるまで待ちます。clientがバックグラウンドで依頼しなければそちらでも待ちが発生します。で、対象workerを起動すると即座にJobServerはキュー処理をworkerに渡します。当然ですが。

もう少し現実的な処理の中でqueueingして試したかったのですが、
まずは入り口ということで。次回はもうちょっと突っ込んだ処理をやってみたいと。

<h3>参考資料</h3>
<ul>
	<li><a href="http://gearman.org">Gearman(公式サイト)</a></li>
	<li><a href="http://www.php.net/manual/en/book.gearman.php">PHP: Gearman - Manual</a></li>
	<li><a href="http://www.ibm.com/developerworks/jp/opensource/library/os-php-gearman/">Gearman を使って PHP アプリケーションのワークロードを分散する</a></li>
</ul>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date>2010-01-31 00:16:51</wp:post_date>
		<wp:post_date_gmt>2010-01-30 15:16:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gearman%e3%81%a7queueing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gearman"><![CDATA[gearman]]></category>
		<category domain="post_tag" nicename="jobqueue"><![CDATA[jobqueue]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[9cea2f64894f4bcbf8157c7fbf45c774]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/90T6q1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Hadoop Hack Nightに行ってきた</title>
		<link>http://blog.restartr.com/2010/03/09/hadoop-hack-night/</link>
		<pubDate>Tue, 09 Mar 2010 14:39:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=217</guid>
		<description></description>
		<content:encoded><![CDATA[3月8日に開催された<a href="http://gihyo.jp/event/2010/hadoophn">Hadoop Hack Night</a>に行ってきました。
ハッシュタグは<a href="http://twitter.com/#search?q=%23hadoophn">#hadoophn</a>。

最近Hadoop界隈を色々調査していたので、これは！と思い応募開始のアナウンスとともに申し込み。
応募者多数のため、申し込み期限が切り上げられたほどの人気ぶりだったようで。
抽選に当たったのは奇跡。なのでかなり気合入れていってきました。

一番印象にのこったのは、
<ul>
	<li><a href="http://hadoop.apache.org/hdfs/">HDFS</a>は信頼性が低い</li>
	<li><a href="http://hadoop.apache.org/pig/">Pig</a>でカバーできない処理はほぼない</li>
</ul>
の2点でした。

以下、それについての感想です。

<h3>HDFSは信頼性が低い</h3>

<a href="http://hadoop.apache.org/hdfs/">HDFS</a>はあくまで処理データの一時保存場所とすること。別にマスタデータは保持しておくべきだと。
まだ不安定性に遭遇したことがないのですが、この点はかなり重要になりそう。
確かに分散するのでコピーした分だけデータ量は増えるので、ずっとHDFS上のみで保管するのは現実的でないのかも。
<em>※ファイル圧縮の機能はHDFSは備えているけど、どちらかと言えば転送量を減らすのが目的のようですね。</em>

<h3>PIGでカバーできない処理はほとんどない</h3>
<a href="http://hadoop.apache.org/pig/">PIG</a>はMapReduceを使い易くした、一種のスクリプト言語のようなもの（と認識しています。）
逐次処理をJavaとかよりもと単純に書けます。
で、PIGはかなりドメインを限定して開発されたものと勝手にイメージしていたので、だいたいの処理がまかなえると聞いてちょっと驚き。
Hadoop本にはあまり細かいことが書かれていなかったし、「ほぼSQL」な<a href="http://hadoop.apache.org/hive/">Hive</a>中心に調査していたのですが、PIGもドキュメントとかもう少し見てみようと思います。

主催者の皆様、講演者の皆様、参加者の皆様お疲れ様でした。
非常に有意義な時間が過ごせました。

<i>※全体を通してのメモは整理して後日追記します</i>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date>2010-03-09 23:39:08</wp:post_date>
		<wp:post_date_gmt>2010-03-09 14:39:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hadoop-hack-night</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hadoop"><![CDATA[hadoop]]></category>
		<category domain="category" nicename="hadoop"><![CDATA[hadoop]]></category>
		<category domain="post_tag" nicename="hdfs"><![CDATA[hdfs]]></category>
		<category domain="post_tag" nicename="pig"><![CDATA[pig]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cAgI2j]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[0edb49ae1ff1f56f3cce6db32556e316]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Hadoop Hack Nignt vol2に行ってきた</title>
		<link>http://blog.restartr.com/2010/08/05/hadoop-hack-nignt-vol2/</link>
		<pubDate>Wed, 04 Aug 2010 15:13:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=254</guid>
		<description></description>
		<content:encoded><![CDATA[今更ですが、8月4日に開催された<a href="http://gihyo.jp/event/2010/hadoophn2">Hadoop Hack Night vol.2</a>に行ってきました。
ハッシュタグは<a href="http://twitter.com/#search?q=%23hadoophn">#hadoophn</a>。

詳細なレポートは以下を参照。
<ul>
	<li><a href="http://gihyo.jp/news/report/2010/08/0901">レポート：見えてきたHadoopの“使いどころ”─「Hadoop Hack Night Vol.2」開催｜gihyo.jp … 技術評論社</a></li>
	<li><a href="http://techblog.yahoo.co.jp/cat206/post_25/">満員御礼！「Hadoop Hack Night2」レポート (Yahoo! JAPAN Tech Blog)</a></li>
</ul>

技評のレポートに、
<blockquote>古宮氏も，認証機能によって多くのユーザが使いながらジョブを立ち上げたままにできる点を指摘し，データを投げる入り口で認証をかけるため，共有使用時にだれかがオペレーションミスをしてもその影響で全体のデータが壊れることがないというメリットを挙げた。
</blockquote>
とあるように、Hadoop with Securityのようなセキュリティ機能強化によって共用クラスタの可能性がみえてきた、というのが今回の一番の収穫ではないでしょうか。

Hadoop with securityについては以下のOwen氏のスライドが参考になります。
<div style="width:425px" id="__ss_3553751"><strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/hadoopusergroup/hadoop-security-preview" title="Hadoop Security Preview">Hadoop Security Preview</a></strong><object id="__sse3553751" width="425" height="355"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=hadoopsecuritypreview-100325134432-phpapp02&stripped_title=hadoop-security-preview" /><param name="allowFullScreen" value="true"/><param name="allowScriptAccess" value="always"/><embed name="__sse3553751" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=hadoopsecuritypreview-100325134432-phpapp02&stripped_title=hadoop-security-preview" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed></object><div style="padding:5px 0 12px">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/hadoopusergroup">Hadoop User Group</a>.</div></div>

まだ本格的にHadoopを利用していませんが、この可能性は大規模クラスタを準備するのが困難な企業にとって朗報だと思います。
今後の動向に注目ですね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date>2010-08-05 00:13:16</wp:post_date>
		<wp:post_date_gmt>2010-08-04 15:13:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hadoop-hack-nignt-vol2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hadoop"><![CDATA[hadoop]]></category>
		<category domain="category" nicename="hadoop"><![CDATA[hadoop]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[5d4ec1f1309aa3b20769fd9177361c3d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/92ySmu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[hadoo-hack-nignt-vol2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>バックライトがつかないiPhone3GSの液晶を交換してみた</title>
		<link>http://blog.restartr.com/2010/08/22/change-my-iphone3gs-display/</link>
		<pubDate>Sun, 22 Aug 2010 12:45:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=284</guid>
		<description></description>
		<content:encoded><![CDATA[<a title="IMG_2217 by ReSTARTR_y, on Flickr" href="http://www.flickr.com/photos/53244662@N04/4914863453/"><img src="http://farm5.static.flickr.com/4119/4914863453_161bbe155f.jpg" alt="IMG_2217" width="333" height="500" /></a><br />
タイトルそのまんまですが、iPhone3GSの液晶を交換しました。
<em>※参考にしていただいければ幸いですが、自己責任でお願いしますm(_ _)m</em>

<strong><!--more-->経緯</strong>
FUJIROCK2010に行って、前夜祭で雨にやられてiPhone3GSのバックライトがつかなくなってしまいました。
ただし、液晶が見にくいだけで一応の一通りの機能に問題はありません。SoftBankショップに相談しにいったら修理するくらいならiPhone3GS/iPhone4に交換したほうが良いとのこと。でも今更iPhone4はスルーの予定だったし、iPhone3GSに変えるのもなんだかプライドが許さないわけです。
ということで、ひとまず3G回線をもともとつかっていた端末(SoftBank 911T)に機種変更してしのいでいました。

が、iPhoneなしの生活がしんどくなってきたため、液晶交換に踏み切りました。ここまできたら保証もなにも気になりません。自己責任どんとこいです。

<a href="http://ilab.cc/lcd.html">交換作業を依頼することもできます</a>が、コスト削減のためにも自分でやります。必要なものは<a href="http://ilab.shop-pro.jp/?pid=15252505">iPhone3GS 液晶パネル</a>(<del>\7,800</del> \4,800(※2011/04/11現在))のみ。<a href="http://ilab.shop-pro.jp/?pid=14642995">専用の工具</a>(\800)も売っていますが、普通の精密ドライバーがあればなんとかなります。

<strong>交換の過程</strong>
詳しい過程は<a href="http://mutodanoshi.com/blog/2009/08/iphne-3gs-lcd-replacement-01.html">こちら</a>を参照したほうが良いでしょうｗ（いちいち写真とるのめんどくさくて…）

<a title="IMG_2210 by ReSTARTR_y, on Flickr" href="http://www.flickr.com/photos/53244662@N04/4914863441/"><img src="http://farm5.static.flickr.com/4122/4914863441_8cc97bce61.jpg" alt="IMG_2210" width="500" height="333" /></a><br />
こんな感じのパッケージがダンボールに入れられて送られてきます。

まずiPhoneの分解から。
本体を開けるとこんな感じで、本体右上あたりに「１」と「２」のシールが貼られたパーツで液晶とパネルが接続されています。それを引き抜けばOK。<br />
<a title="IMG_2214 by ReSTARTR_y, on Flickr" href="http://www.flickr.com/photos/53244662@N04/4914863445/"><img src="http://farm5.static.flickr.com/4118/4914863445_4e52429956.jpg" alt="IMG_2214" width="500" height="333" /></a><br />

次は液晶を全面のパネルからはずします。
液晶は金属フレームとくっついてるのですが、ただ粘着シートでくっついてるだけ（下写真）なです。<br />
<a title="IMG_2219 by ReSTARTR_y, on Flickr" href="http://www.flickr.com/photos/53244662@N04/4914863455/"><img src="http://farm5.static.flickr.com/4097/4914863455_f35d34792a.jpg" alt="IMG_2219" width="500" height="333" /></a><br />

そーっと液晶をひっペがすと鏡面が現れます（下写真右側がそれ）。で、新しい液晶の裏面のシートをはがして金属フレームとくっつけます。<br />
<a title="IMG_2223 by ReSTARTR_y, on Flickr" href="http://www.flickr.com/photos/53244662@N04/4914863461/"><img src="http://farm5.static.flickr.com/4138/4914863461_638b4d6a87.jpg" alt="IMG_2223" width="500" height="333" /></a><br />

ちなみにもともとくみこまれていたものにはQRコードのシールが貼ってますが、新しいものにはついてません。
（接続部分の「２」のシールもありません）<br />
<a title="IMG_2222 by ReSTARTR_y, on Flickr" href="http://www.flickr.com/photos/53244662@N04/4914863457/"><img src="http://farm5.static.flickr.com/4073/4914863457_6356258b66.jpg" alt="IMG_2222" width="500" height="333" /></a><br />

ちゃんと動作するか、バックライトが点くか確認してみます。<br />
<a title="IMG_2232 by ReSTARTR_y, on Flickr" href="http://www.flickr.com/photos/53244662@N04/4914890785/"><img src="http://farm5.static.flickr.com/4134/4914890785_2c2a32d671.jpg" alt="IMG_2232" width="500" height="333" /></a><br />

あとは元通りにするだけ。最後に本体下部のネジを締めて完了です。<br />
<a title="IMG_2234 by ReSTARTR_y, on Flickr" href="http://www.flickr.com/photos/53244662@N04/4914890885/"><img src="http://farm5.static.flickr.com/4137/4914890885_41b1e93b6d.jpg" alt="IMG_2234" width="500" height="333" /></a><br />

あ、前面パネルが緑色なのはこのシート使ってるからです。ヨドバシとかハンズとかに売ってます。印象がポップになるので気に入ってます。<br />
<a title="IMG_2235 by ReSTARTR_y, on Flickr" href="http://www.flickr.com/photos/53244662@N04/4914890933/"><img src="http://farm5.static.flickr.com/4115/4914890933_250318d01a.jpg" alt="IMG_2235" width="500" height="333" /></a><br />

機種変更は9月の締め日(9/11)まで待ち、それまではipod touchとして使います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date>2010-08-22 21:45:17</wp:post_date>
		<wp:post_date_gmt>2010-08-22 12:45:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>change-my-iphone3gs-display</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="diy"><![CDATA[DIY]]></category>
		<category domain="post_tag" nicename="iphone"><![CDATA[iphone]]></category>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dg8Wza]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[67701d9439e53a2a47252c39cb1ba608]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>82</wp:comment_id>
			<wp:comment_author><![CDATA[colotack]]></wp:comment_author>
			<wp:comment_author_email>colotack@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>115.163.175.239</wp:comment_author_IP>
			<wp:comment_date>2011-04-10 11:27:21</wp:comment_date>
			<wp:comment_date_gmt>2011-04-10 02:27:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ありがとうございます。こちらのサイトとリンク先の情報のおかげで、バックライトがつかない液晶を無事交換することができました。助かりました。ちなみにいまは液晶の値段は¥4,800でした。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>83</wp:comment_id>
			<wp:comment_author><![CDATA[ReSTARTR]]></wp:comment_author>
			<wp:comment_author_email>yoshida.masaki+blog@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>221.191.101.109</wp:comment_author_IP>
			<wp:comment_date>2011-04-11 23:04:14</wp:comment_date>
			<wp:comment_date_gmt>2011-04-11 14:04:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt;colotackさん
参考になったようでなによりです。液晶の値段は修正追記させていただきます。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>82</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>88</wp:comment_id>
			<wp:comment_author><![CDATA[kame23]]></wp:comment_author>
			<wp:comment_author_email>kambe@ca2.so-net.ne.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>219.56.26.146</wp:comment_author_IP>
			<wp:comment_date>2011-05-18 19:57:12</wp:comment_date>
			<wp:comment_date_gmt>2011-05-18 10:57:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[こんばんわ..私は、先日、3GSを水没させてしまいました.
早速、液晶パネルを当ページを参考に取り寄せて、冒頭の写真のように..
1,2,3のコネクタを外して、新しい液晶パネルを1につないだ状態で
電源をいれました..が、暗いままです。
デジタイザをつないでないので、設定とか見れない状態ですが..
恐らく、明るさ自動ＯＮで輝度は中心にあると思います。
ReSTARTR のように明るくないのはやはりﾒｲﾝﾎﾞｰﾄﾞ側がＮＧなのでしょうか？
通話、メール、ＷＥＢなど問題なくできるのですが..暗いだけなんです..故障個所は..]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305716233.2201";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305813801.8302";s:7:"message";s:52:"admin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>89</wp:comment_id>
			<wp:comment_author><![CDATA[ReSTARTR]]></wp:comment_author>
			<wp:comment_author_email>yoshida.masaki+blog@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>114.145.226.29</wp:comment_author_IP>
			<wp:comment_date>2011-05-19 23:10:25</wp:comment_date>
			<wp:comment_date_gmt>2011-05-19 14:10:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[> kame23 さん
故障内容は私と同じのようですね。
私の場合はパネル交換のみで元通りになりましたので、メインボードの可能性はありますね。
あとは、パネルの初期不良という可能性もあると思いますし、一度ショップに問い合わせてみてはいかがでしょうか？

こちら（ http://ilab.shop-pro.jp/?mode=sk ）を見ると、


<blockquote>不良品の場合「商品到着後４日以内にお電話でご連絡いただいた初期不良のみ交換対応致します</blockquote>

とあります。

あまりお力になれず申し訳ありません…]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>88</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305814225.8692";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Scalaプログラミング入門(とその他Scala本)</title>
		<link>http://blog.restartr.com/2010/08/23/beginning-scala/</link>
		<pubDate>Sun, 22 Aug 2010 15:21:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=295</guid>
		<description></description>
		<content:encoded><![CDATA[[tmkm-amazon]4822284239[/tmkm-amazon]
お盆前にScalaプログラミング入門を購入して、少しづつScalaについて学んでいます。

<!--more-->

通称「コップ本」と読み比べた上で、とっつきやすく実践寄りな「Scalaプログラミング入門」を選択しました。
[tmkm-amazon]4844327453[/tmkm-amazon]

正直、「Scalaプログラミング入門」は自分にとっては手強いです。

その文脈で説明している以外のところで唐突に新しい文法が含まれたコードが説明なしに含まれていたり。いきなり"sealed”とか書かれましても…

まず文法について一通り把握するなら、こちらの「ボクらのScala」のほうが良いと思います。
[tmkm-amazon]4797359404[/tmkm-amazon]

「Scalaプログラミング入門」を一通り読んでモヤモヤがたまったあとに「ボクらのScala」を立ち読みして、「これはわかりやすい！ちゃんと整理されている！」と驚きました。

順序良く学ぶなら、「ボクらのScala」→「Scalaプログラミング入門」→「Scalaスケーラブルプログラミング」の順が良いのではないでしょうか。
必要最低限の言語仕様を学び、実践よりの解説に目を通し、言語仕様の深いところを学ぶ、という流れになると思います。（すごく個人的な感想ですが。）

まぁ、本の内容をひとつづつこのブログで解説する、なんてことはしませんが、少しづつでも得た知識をこのブログで整理していこうと思います。

当面の目標は「ScalaでHadoopのジョブを書く」ですかね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>295</wp:post_id>
		<wp:post_date>2010-08-23 00:21:16</wp:post_date>
		<wp:post_date_gmt>2010-08-22 15:21:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>beginning-scala</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="category" nicename="books"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/9jszSy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[f28bd10636094b5aace1b693cd50ad1e]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>TSVファイルを処理する</title>
		<link>http://blog.restartr.com/2010/09/05/processing-the-file-formatted-tsv/</link>
		<pubDate>Sun, 05 Sep 2010 09:22:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=304</guid>
		<description></description>
		<content:encoded><![CDATA[Scalaプログラミング入門をざっと読んでから少し間が空いてしまいました。
第１回Scala座を見たりして刺激もらったのでちょっとScala弄りなど。
※Scala座については非公式にトゥギャらせてもらっています。：<a href="http://togetter.com/li/47287">第１回Scala座非公式勝手まとめ</a>

ちょっと雰囲気を振り返るため、普段PHPでよくやるTSVファイルの読み込みでテスト。

foo.tsvの中身はこんな感じ。
<pre class="brush:c">
u01,Tokyo
u02,Osaka
u03,Nagoya
u04,Tokyo
u05,Fukuoka
u06,Nagoya
u07,Nagoya
u08,Shiga
u09,Hokkaido
u10,Osaka
</pre>
これの転置インデックスを作成したい。

で、<a href="http://rainyday.blog.so-net.ne.jp/2007-12-01">こちらのブログ記事</a>とかを参考にしたりして、何回か試行錯誤してできたのがこちらのソース。
<pre class="brush:scala">
import scala.collection.mutable.HashMap
import scala.io.Source
import scala.io.BufferedSource
object ReadTsv 
{
  def main( args: Array[String] ) 
  {
    val source = Source.fromFile( "foo.txt" )
    try {
      var m = new HashMap[String,List[String]]
      for( line <- source.getLines ) {
        val x:Array[String] = line.stripLineEnd.split(",")
        m.update(x(1) , m.get(x(1)) match {
          case Some(s) => x(0) :: s
          case None    => List( x(0) )
        })
      }
      println( m )
    } finally {
      source.asInstanceOf[BufferedSource].close
    }
  }
}
</pre>
実行
<pre class="brush:bash">
$ scalac ReadTsv.scala
$ scala ReadTsv
Map(Shiga -> List(u08), Nagoya -> List(u07, u06, u03), Tokyo -> List(u04, u01), Osaka -> List(u10, u02), Fukuoka -> List(u05), Hokkaido -> List(u09))
</pre>

手続き型な感じが色濃い気がするけど、もっと関数型的になるのでしょうか。。
とりあえずコレクションとパターンマッチの練習にはなりました。

他人のプログラムを拝見するなどして、もっとScalaの理解を深める必要がありそうです。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date>2010-09-05 18:22:53</wp:post_date>
		<wp:post_date_gmt>2010-09-05 09:22:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>processing-the-file-formatted-tsv</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="csv"><![CDATA[csv]]></category>
		<category domain="post_tag" nicename="fileio"><![CDATA[fileio]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/9dPm0V]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[de68b49d4c215593a0e6c519da80bdae]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>wordpressにmixiチェックボタンを設置(公式tweetボタンも)</title>
		<link>http://blog.restartr.com/2010/09/11/set-button-for-mixi-check-and-tweet-button-on-wordpress/</link>
		<pubDate>Sat, 11 Sep 2010 02:11:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=320</guid>
		<description></description>
		<content:encoded><![CDATA[タイトルそのまんまです。

wordpressへのmixiチェックボタンの設置方法はこちら

<dl> <dt>mixiチェックキーの発行方法： </dt><dt> </dt><dd><a href="http://blog.fkoji.com/2010/09101830.html">ブログにmixiチェックを設置 - F.Ko-Jiの「一秒後は未来」</a></dd> <dt>wordpress用mixiチェックプラグイン：</dt> <dd><a href="http://github.com/takimo/mixi-check-for-wordpress/downloads">Downloads for takimo's mixi-check-for-wordpress - GitHub</a></dd> </dl>wordpressへのtweetボタンの導入プラグインはこちら

<dl> <dt>wordpress用tweetボタンプラグイン： </dt><dt> </dt><dd><a href="http://wordpress.org/extend/plugins/tweetbutton-for-wordpress/">WordPress › TweetButton « WordPress Plugins</a></dd> </dl>


それぞれプラグインをインストールしたら、管理画面で初期設定して、テンプレートをいじるだけ。
特に問題もなくスムーズに設置できました。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>320</wp:post_id>
		<wp:post_date>2010-09-11 11:11:05</wp:post_date>
		<wp:post_date_gmt>2010-09-11 02:11:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>set-button-for-mixi-check-and-tweet-button-on-wordpress</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/akVjrE]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[45666580f1c85bbd4b480354fe536813]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[wordpress%e3%81%abmixi%e3%83%81%e3%82%a7%e3%83%83%e3%82%af%e3%83%9c%e3%82%bf%e3%83%b3%e3%82%92%e8%a8%ad%e7%bd%ae%e5%85%ac%e5%bc%8ftweet%e3%83%9c%e3%82%bf%e3%83%b3%e3%82%82]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Amazon Kindle3 Free 3G + Wi-Fiを買ってみた</title>
		<link>http://blog.restartr.com/2010/09/19/buy-an-amazon-kindle3/</link>
		<pubDate>Sun, 19 Sep 2010 01:48:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=325</guid>
		<description></description>
		<content:encoded><![CDATA[<a title="IMG_2302 by ReSTARTR_y, on Flickr" href="http://www.flickr.com/photos/53244662@N04/5003018900/"><img src="http://farm5.static.flickr.com/4087/5003018900_5a22f2eca5.jpg" alt="IMG_2302" width="500" height="333" /></a>

今流行の<a href="http://www.amazon.com/dp/B002FQJT3Q">Amazon Kindle3(3G+Wi-Fi)</a>を買ってみました。
発売開始の翌日に注文して、２週間程度での受け取りでした。
Amazon純正のKindle3用レザーカバーも頼んだんですが、そちらだけ先に届いてましたが、やっと本体も届きましたんで、
軽くレビューでも書いてみます。

<!--more-->
注文したのがたしか、8/28日。発送の連絡がきたのが9/10なのでその間約二週間。さらに受け取りまでは以下のように、不在による再配達も影響して、長い道のりとなりました。
<a href="http://www.flickr.com/photos/53244662@N04/5002490605/" title="配達履歴 by ReSTARTR_y, on Flickr"><img src="http://farm5.static.flickr.com/4092/5002490605_3cfe829cef.jpg" width="488" height="500" alt="配達履歴" /></a>

先に受け取ったレザーカバーのときもそうだったんですが、箱が工夫されています。
ダンボールの箱はガムテープで閉じられているのが普通ですが、お菓子の箱のようにダンボール自体に切り取れる細工がしてあります。
<a href="http://www.flickr.com/photos/53244662@N04/5002411379/" title="IMG_2285 by ReSTARTR_y, on Flickr"><img src="http://farm5.static.flickr.com/4107/5002411379_a1ab728694_m.jpg" width="240" height="160" alt="IMG_2285" /></a>
<a href="http://www.flickr.com/photos/53244662@N04/5003018636/" title="IMG_2289 by ReSTARTR_y, on Flickr"><img src="http://farm5.static.flickr.com/4131/5003018636_5681651c2c_m.jpg" width="240" height="160" alt="IMG_2289" /></a>
汎用サイズのダンボールでは難しいかもしれませんが、こういう工夫はなんとなく嬉しいです。

<a href="http://www.flickr.com/photos/53244662@N04/5003018740/" title="IMG_2290 by ReSTARTR_y, on Flickr"><img src="http://farm5.static.flickr.com/4154/5003018740_245397caef.jpg" width="500" height="333" alt="IMG_2290" /></a>
箱を開けるとこんなかんじ。
画面にPC接続の指示が書いてあります。表面にはってあるシートにプリントされているかのように見える程に電子インクは素晴らしいです。

<a href="http://www.flickr.com/photos/53244662@N04/5002411213/" title="IMG_2274 by ReSTARTR_y, on Flickr"><img src="http://farm5.static.flickr.com/4089/5002411213_8cf4392a79.jpg" width="500" height="333" alt="IMG_2274" /></a>
ちなみにレザーカバーはこんなかんじ。

<a href="http://www.flickr.com/photos/53244662@N04/5003018454/" title="IMG_2279 by ReSTARTR_y, on Flickr"><img src="http://farm5.static.flickr.com/4125/5003018454_ba7fc2faf4.jpg" width="500" height="333" alt="IMG_2279" /></a>
Kindle本体とは↑の写真のようなカバーの「フック」にひっかけて固定するようになってます。

<a href="http://www.flickr.com/photos/53244662@N04/5002412019/" title="IMG_2295 by ReSTARTR_y, on Flickr"><img src="http://farm5.static.flickr.com/4126/5002412019_02ef7106de.jpg" width="500" height="333" alt="IMG_2295" /></a>
ということでカバーと本体をくっつけるとこんなかんじになります。
重量はカバーなしの二倍くらいに重くなったように感じますが、実際に電車内で片手で持っていても腕が疲れないレベルです。

<a href="http://www.flickr.com/photos/53244662@N04/5003019014/" title="IMG_2307 by ReSTARTR_y, on Flickr"><img src="http://farm5.static.flickr.com/4109/5003019014_4b7343171c.jpg" width="333" height="500" alt="IMG_2307" /></a>
Experimentalな機能としてwebkitなブラウザが搭載されています。Twitterを見るとこんな感じになります。
表示速度ははっきりいって遅いうえに正直見づらいですが、本を呼んでいる最中にTLをチラ見したいときとか役立ちます。

TwitterへツイートできたりFacebookへShareできたり連携機能があるので、ブラウザが搭載されているのはそれらサービス認証が主な目的だと思います。

まだ数日しか使っていないですが、かなり便利なシロモノでした。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>325</wp:post_id>
		<wp:post_date>2010-09-19 10:48:29</wp:post_date>
		<wp:post_date_gmt>2010-09-19 01:48:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>buy-an-amazon-kindle3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ebook"><![CDATA[ebook]]></category>
		<category domain="post_tag" nicename="kindle3"><![CDATA[kindle3]]></category>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cQYVAh]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[b048eca878309c6ee26c2bf4e669a33d]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>PHPMATSURI - PHPハッカー達による一泊二日のハックデイ</title>
		<link>http://blog.restartr.com/2010/10/03/phpmatsuri-hack-days-by-php-hackers/</link>
		<pubDate>Sun, 03 Oct 2010 11:26:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=335</guid>
		<description></description>
		<content:encoded><![CDATA[<a title="IMG_2470 by ReSTARTR_y, on Flickr" href="http://www.flickr.com/photos/53244662@N04/5046336051/"><img src="http://farm5.static.flickr.com/4154/5046336051_aabef10eb4.jpg" alt="IMG_2470" width="500" height="333" /></a>

<a href="http://2010.phpmatsuri.net/"><img class="alignnone size-medium wp-image-341" title="PHPMATSURI" src="http://blog.restartr.com/wp-content/uploads/2010/10/bunner-300x132.jpg" alt="" width="300" height="132" /></a>
10月02日と03日の、一泊二日の<a href="http://2010.phpmatsuri.net/">PHPMASTURI</a>に参加してきました。
<ul>
	<li>ハッシュタグ: <a href="http://search.twitter.com/search?q=%23phpmatsuri">#phpmatsuri</a></li>
	<li>LTのustream: <a href="http://www.ustream.tv/channel/phpmatsuri">phpmatsuri on USTREAM</a></li>
</ul>

<h3>とにかく内容が濃い</h3>
<ul>
	<li>楽天の吉岡さんによる大人のプログラミングキャンプ</li>
	<li>CakePHP,Symfony,Lithiumのデベロッパーによるセッション</li>
	<li>彼らのライブコーディングを間近に見られる各フレームワークのワークショップ</li>
	<li>スポンサー各社のセッション</li>
	<li>PHPによる開発事例プレゼン大会のJIREI NIGHT</li>
	<li>ZyngaJapanのお二人によるTDDを実体験できるワークショップ</li>
	<li>深夜まで続くハッカソンと、総勢33名による大LT大会</li>
</ul>
ざっと並べただけでもこんな感じに、とにかく内容てんこ盛りな二日間でした。

<!--more-->

<a title="IMG_2512 by ReSTARTR_y, on Flickr" href="http://www.flickr.com/photos/53244662@N04/5046956568/"><img src="http://farm5.static.flickr.com/4133/5046956568_dd9b08f6eb.jpg" alt="IMG_2512" width="500" height="333" /></a>

まとめるのは得意ではないので、参加した感想を少しばかり。
<h3>イベントに参加するということがいかに重要であるか</h3>
最初の吉岡さんのセッションは「この祭りをいかに楽しく有意義に過ごすか」ということを教えていただきました。また、各セッションを聞いたり、たくさんのデベロッパーの方々とコミュニケーションをとるのも非常に有意義でした。
最後のLT大会では、参加したみなさんの変態ぶりに圧倒されっぱなし。これだけ多くの発表があるとそれぞれに目の付け所が違っているが故にアイデアももらえるし、そこで発表すれば多くの反応をいただくこともできます。参加することで得られるメリットは、参加費用にはかえがたいものがあったと思います。
最後の締めで@yandoさんが「個人によるイベント」と仰っていて、このイベントは有志のスタッフの方々に支えられている、ことを実感しました。企画・運営をしてくださったスタッフのみなさんには本当に感謝します。
そして、PHPMATSURIに関わったすべての方に感謝したいと思います。ありがとうございました。

<a title="IMG_2491 by ReSTARTR_y, on Flickr" href="http://www.flickr.com/photos/53244662@N04/5046334983/"><img src="http://farm5.static.flickr.com/4086/5046334983_8bd1c1329a.jpg" alt="IMG_2491" width="500" height="333" /></a>
今回のチャレンジをまとめてみます。
<h3>チャレンジできたこと</h3>
<ul>
	<li>CakePHP,Symfony2,Lithium各フレームワークの特徴を知る</li>
	<li>プレゼン資料を拙いながらも英語で作成する</li>
	<li>内容に関係なく発表者になる</li>
	<li>動かなかったで終わらせず、動くまでハックする</li>
</ul>
<h3>チャレンジできなかったこと</h3>
<ul>
	<li>各FWデベロッパーの方々とのコミュニケーション</li>
	<li>セッションで質問する(TDDのワークでは質問しましたが)</li>
	<li>ソースコード公開</li>
	<li>Beer Driven Development</li>
</ul>
<h3>今後チャレンジしたいこと</h3>
<ul>
	<li>今回の成果物のソースコード公開する</li>
	<li>英語を聞く力、話す力をつける</li>
	<li>発表の機会を自分でつくる</li>
</ul>
<h3>成果：XHProf CustomPanel</h3>
※詳しい話は別記事にてやります。
<div id="__ss_5344576" style="width: 425px;"><strong><a title="Php matusri xhprof custompanel" href="http://www.slideshare.net/restartr/php-matusri-xhprofcustompanelpublish">Php matusri xhprof custompanel</a></strong><object id="__sse5344576" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="425" height="355" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="allowFullScreen" value="true" /><param name="allowScriptAccess" value="always" /><param name="src" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=phpmatusri-xhprofcustompanel-publish-101003011838-phpapp02&amp;stripped_title=php-matusri-xhprofcustompanelpublish&amp;userName=restartr" /><param name="name" value="__sse5344576" /><param name="allowfullscreen" value="true" /><embed id="__sse5344576" type="application/x-shockwave-flash" width="425" height="355" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=phpmatusri-xhprofcustompanel-publish-101003011838-phpapp02&amp;stripped_title=php-matusri-xhprofcustompanelpublish&amp;userName=restartr" name="__sse5344576" allowscriptaccess="always" allowfullscreen="true"></embed></object>
<div style="padding: 5px 0 12px;">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/restartr">Re STARTR</a>.</div>
</div>
<h3>おまけ</h3>
途中でレッドブルがふるまわれるというサービスまでありました。当日6時起きだったのに4時まで頑張れたのはレッドブルのおかげかもしれません。
<a title="IMG_2488 by ReSTARTR_y, on Flickr" href="http://www.flickr.com/photos/53244662@N04/5046334797/"><img src="http://farm5.static.flickr.com/4108/5046334797_b3ed8b2f3e.jpg" alt="IMG_2488" width="500" height="333" /></a>

そして、最後にCakePHP開発者のGraham Weldonさんと記念撮影させてもらいました。
Thanks, Graham!
<a title="IMG_2514 by ReSTARTR_y, on Flickr" href="http://www.flickr.com/photos/53244662@N04/5046335737/"><img src="http://farm5.static.flickr.com/4113/5046335737_4651050be6.jpg" alt="IMG_2514" width="500" height="333" /></a>
#ほとんど会話できなかったのが悔やまれます。会話することを怖がらないことが大事ですね。反省。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date>2010-10-03 20:26:48</wp:post_date>
		<wp:post_date_gmt>2010-10-03 11:26:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>phpmatsuri-hack-days-by-php-hackers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="lithium"><![CDATA[lithium]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="phpmatsuri"><![CDATA[phpmatsuri]]></category>
		<category domain="post_tag" nicename="symfony"><![CDATA[symfony]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/9OxUXT]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[b2a0bdb507d47e81a1aae6345e86b10d]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CakePHPのDebugKitにプロファイル情報が見れるXHProfPanelを追加</title>
		<link>http://blog.restartr.com/2010/10/10/the-xhprofpanel-debugkit-custom-panel-cakephp/</link>
		<pubDate>Sat, 09 Oct 2010 15:59:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=367</guid>
		<description></description>
		<content:encoded><![CDATA[先日のPHPMatsuriのハッカソンにて作成したXHProfの結果がみれるCustomPanelですが、そのまま公開するにはお恥ずかしい感じだったので、多少マシに改修したものを公開してみます。
<h3>DebugKit, XHProfPanelとは</h3>
CakePHPのDebugKitというプラグインがあり、それを使えばいろんなデバッグ情報がWeb画面上で確認できます。で、これにXHProfというphp拡張を使ってプロファイラ情報を見れるようにしてみました。

こんな感じです。
<a href="http://blog.restartr.com/wp-content/uploads/2010/10/256d829a326e5fc745e5659600527bde.png"><img class="alignnone size-full wp-image-390" title="XHProfPanel-screenshot" src="http://blog.restartr.com/wp-content/uploads/2010/10/256d829a326e5fc745e5659600527bde.png" alt="" width="464" height="42" /></a>

<!--more-->

で、パネルを開くとこんな感じに各関数呼び出しごとの負荷情報などを閲覧できます。
<a href="http://blog.restartr.com/wp-content/uploads/2010/10/f0c2dac263680a94429c57bd5c1e81ff.png"><img class="alignnone size-medium wp-image-399" title="xhprofpanel-opned-screenshot" src="http://blog.restartr.com/wp-content/uploads/2010/10/f0c2dac263680a94429c57bd5c1e81ff-300x170.png" alt="" width="300" height="170" /></a>

さらに、<strong>"xhprof Result"</strong>というリンクをクリックすれば、XHProfが用意してくれているビューアを開くこともできます。ビューアではコールグラフも閲覧できます。
<h3>カスタムパネルの追加方法</h3>
<blockquote>helloworld_controllerにプロファイル実行する、という例で説明します。</blockquote>
<h4>事前準備</h4>
debugkitはインストール済みとします。入れ方は
<a href="http://d.hatena.ne.jp/cakephper/20090604/1244112188">超便利なDebugkitを画面キャプチャ付きで解説 - cakephperの日記(CakePHP, MongoDB, Lithium)</a>
を参照してください。

XHProfのインストールも済ませておきます。
<pre class="brush">wget http://pecl.php.net/get/xhprof-0.9.2.tgz
pecl install xhprof-0.9.2.tgz</pre>
php.iniにも設定追加しておきます。
<pre class="brush">extension=xhprof.so</pre>
tgzファイルをtarで解凍した中身のうち、xhprof_html,xhprof_libをビューア用に用意したバーチャルホスト下において、
別ドメインでアクセスできるようにします。
cakeのアプリは<strong>cake.localhost</strong>、xhprofビューアは<strong>xhprof.localhost</strong>のような感じです。
ディレクトリはこんな感じできっています。
<pre class="brush:c">/var/
  vhosts/
    cake/ // cake.localhostのdocument_root
      app/
    xhprof/
      xhprof_html/ // xhprof.localhostのdocument_root
      xhprof_lib/</pre>
<h4>ファイル構成</h4>
下記ファイルを修正もしくは新規作成します。
<pre class="brush:c">app/
  controllers/
    helloworld_controller.php //新規追加
  plugins/
    debug_kit/
      controllers/
        conmponents/
          toolbar.php //修正
      views/
        elements/
          xhprof_panel.ctp //新規追加</pre>
<h4>1.XHProfPanelの追加</h4>
<blockquote>app/plugins/debug_kit/controllers/components/toolbar.php</blockquote>
に下記クラスをコピペで追加。
<script src="http://gist.github.com/618254.js?file=toolbar.php"></script>

<h4>2.デフォルトパネルにXHProfPanelを追加</h4>
<blockquote>app/plugins/debug_kit/controllers/components/toolbar.php</blockquote>

の既存行（52行目あたり)に下記のように$_defaultPanelsに'xhprof'を追加。
<script src="http://gist.github.com/618254.js?file=toolbar_.php"></script>
<h4>3.controllerの設定にもXHProfPanelを追加</h4>
下記のようにXhprofPanelへの設定情報も渡します。
<script src="http://gist.github.com/618254.js?file=helloworld_controller.php"></script>

<h4>4.テンプレートの追加</h4>
<blockquote>app/plugins/debug_kit/views/elements/xhprof_panel.ctp</blockquote>

を下記内容で新規作成します。
<script src="http://gist.github.com/618254.js?file=xhprof_panel.ctp"></script>
<h4>ソート順の変更</h4>
デフォルトではwall timeの降順でソートしてあります。
コントローラでの設定で'sortBy'の値を変えれば変更できます。
(指定しなければ'wt'指定となります。)
設定できるのは<strong>ct, wt, cpu, mu, pmu</strong>の５つ。

<h4>プロファイル範囲</h4>
XhprofPanel::__constructからXhprofPanel::beforeRenderまでです。
結果をみるとLogPanelクラス（DebugKitプラグイン内のクラス）のメソッド呼び出しも含まれていたりするので、
もう少し適当な範囲にできないか検討したいと思います。

<h3>余談</h3>
Githubを有料アカウントにすべきか迷い中です。今回とりあえずgistで公開してみましたが、リポジトリは欲しいような、でも今のところ必要ないような…]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>367</wp:post_id>
		<wp:post_date>2010-10-10 00:59:04</wp:post_date>
		<wp:post_date_gmt>2010-10-09 15:59:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-xhprofpanel-debugkit-custom-panel-cakephp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/abRzJ4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[169fa5246241c77eb97dc9f320b742c6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[plug-the-xhprof-custompanel-into-debugkit]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>135</wp:comment_id>
			<wp:comment_author><![CDATA[hiessephaceve]]></wp:comment_author>
			<wp:comment_author_email>brittaneyauu494@aol.com</wp:comment_author_email>
			<wp:comment_author_url>http://ordercheapviagranow.com/#upvai</wp:comment_author_url>
			<wp:comment_author_IP>192.162.19.193</wp:comment_author_IP>
			<wp:comment_date>2013-04-10 13:17:59</wp:comment_date>
			<wp:comment_date_gmt>2013-04-10 04:17:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[url=http://ordercheapviagranow.com/#kkmhz]cheap generic viagra[/url] - <a href="http://ordercheapviagranow.com/#gvbia" rel="nofollow">viagra 150 mg</a> , http://ordercheapviagranow.com/#nrxgg viagra online]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1365567479.521439075469970703125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>ScalaとErlangとPHPと私</title>
		<link>http://blog.restartr.com/2010/11/23/scala-erlang-php-and-me/</link>
		<pubDate>Tue, 23 Nov 2010 09:57:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=410</guid>
		<description></description>
		<content:encoded><![CDATA[PHPよりScalaが簡単である、という議論に対するふたつのポストがあったので、自分向けにまとめました。
<ul>
	<li>元記事：<a href="http://wadearnold.com/blog/scala/scala-is-easier-than-php">Wade Arnold » Scala is easier than PHP</a></li>
	<li>返信：<a href="http://videlalvaro.github.com/2010/11/reply-to-scala-is-easier-than-php.html">Reply to "Scala is Easier than PHP"</a></li>
</ul>
<h3>概要</h3>
ざっとこんな感じにまとめてしまいました。
<ul>
	<li>議論の中心はWebページ生成言語としての言語の比較ではない</li>
	<li>ふたりともWebページ生成ならPHPが優れているという立場にかわりはない</li>
	<li>議論の中心は主にスケーラビリティの確保とプロセス間通信</li>
	<li>元記事のWade ArnoldさんはScala推進派</li>
	<li>返信者のvidelalvaroさんはErlang推進派</li>
	<li>スケーラビリティ確保のためには関数型言語という結論</li>
	<li>ScalaかErlangどちらが簡単か、という議論はない</li>
</ul>
<!--more-->

<h3>ScalaがPHPより簡単な理由</h3>
Wade Arnoldさんが元記事「Scala is easier than PHP」において、マルチコア時代にはScalaが必要だ、みたいなことを書きました。彼はPHP３のころからPHPの開発に関わっていて、最近はZendFrameworkのコミッタをやっていたそうです。
PHPはいまだに最高の言語であると最初に断っておきつつ、Scalaの技術的な点を整理しておこう、という内容。

スケーラビリティの確保のためには、PHPのようにたくさんのツールを必要とせずとも、言語仕様的に多くをサポートするScalaが簡単な理由である、と。Scalaへの移行は時間を必要とするが、スケーラビリティには必要な選択であるといっています。
<blockquote>No need for amqp with actors, no beanstalkd with mutable queues, and it’s fast as hell!</blockquote>
<em>ActorによってAMQPはいらなくなる。ミュータブルなキューもbeanstalkdなしに。そしてそれはものすごく速い。
</em>
<h3>PHPの代わりにErlangを使う理由</h3>
それに対してvidelalvaroさんが「Reply to "Scala is easier than PHP"」でコメントをしています。
おおむねWadeさんの意見に同意で、彼はScalaではなくErlangを推しているようです。

意見としてはこんな感じでしょうか。
<ul>
	<li>サーバーのような長時間実行するプログラムにはErlangつかうといい</li>
	<li>スレッド間通信にはErlangをつかうといい</li>
	<li>Webページを生成するだけならPHPをつかうといい</li>
	<li>CPUの全コアを利用したいだけならPHP-FPMをつかうといい</li>
</ul>
<h3>スケーラビリティ確保のために必要なもの</h3>
元記事ではPHPのスケーラビリティ確保のために必要なものをあげ、これらを使うのは大変骨が折れると言っています。
<blockquote>
<ul>
	<li>Fantastic at PHP internals</li>
	<li>Amazing at Apache HTTPD and compiling appropriate PHP extensions.</li>
	<li>Nginx</li>
	<li>BigIP – More than round robin load balancing</li>
	<li>Intimately know how sessions work and probably write your own handlers</li>
	<li>Memcached</li>
	<li>APC</li>
	<li>AMQP</li>
	<li>BeanStalkd</li>
	<li>Code based sharding or at least master/slave logic</li>
	<li>C/C++</li>
	<li>Lots of security! It’s a problem with all dynamic languages.</li>
	<li>Zend Framework.</li>
</ul>
</blockquote>
それに対してScalaはたった５つ。
<blockquote>
<ul>
	<li>6 months of scala</li>
	<li>Functional programming</li>
	<li><a onclick="javascript:_gaq.push(['_trackEvent','outbound-article','akkasource.org']);" href="http://akkasource.org/">Akka Framework</a></li>
	<li><a onclick="javascript:_gaq.push(['_trackEvent','outbound-article','liftweb.net']);" href="http://liftweb.net/">Lift Framework</a></li>
	<li>Nginx / Jetty</li>
</ul>
</blockquote>
ツールに頼らずとも言語が機能を備えているから気にすべきところが非常にシンプルになるようです。
<h3>個人的感想</h3>
PHPをWebページ生成以外で対決させるのはどうなんだろうと思いつつも、Scalaをどのような場面で使っていけばよいか考える良い機会になりました。
個人的な話をすると、Scalaは言語仕様を学ぶばかりで実際のプログラムを書くまでには至っていませんし、性能評価もまだやってないので「PHPからScalaに移行すべきだ」、と言い切るには至っていないのが現状です。
が、Wadeさんは後ほどもっと突っ込んだ記事を書くと冒頭に言っていますし、videlalvaroさんも最後に
<blockquote>if we want to sell functional languages like Erlang or Scala to the PHP programmer then we have to look for more compelling features that may attract them to look into these languages. What I think are those features –I guess–, should be part of another blog post.</blockquote>
と、ScalaやErlangをPHPerに売り込むための魅力的な点をPOSTしてくれるかも。
それも楽しみにしておこうと思います。
<h3>余談</h3>
最近思うのが、Scalaって言語仕様があまりに多くて、それを学ぶことが楽しいです。
が、学ぶべき仕様がどこまでなのか見えてこず、さらに、仕様を学ぶこと自体が目的になってきているような気がします。
ということで(?)そろそろ、実際につくりたいプログラムを書きながら仕様を学ぶ方向にシフトしようと思います。

※あとPHP-FPMもちゃんと調査・検証したいし、Kestrelのソースも読みたい。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>410</wp:post_id>
		<wp:post_date>2010-11-23 18:57:35</wp:post_date>
		<wp:post_date_gmt>2010-11-23 09:57:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scala-erlang-php-and-me</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="erlang"><![CDATA[Erlang]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scalability"><![CDATA[Scalability]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/ifEZBE]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[6acb6410fd76efae304a6bdc6e013771]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>145</wp:comment_id>
			<wp:comment_author><![CDATA[gucci マテラッセ 財布]]></wp:comment_author>
			<wp:comment_author_email>cseavz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.guccieightyjp.biz/</wp:comment_author_url>
			<wp:comment_author_IP>85.198.103.13</wp:comment_author_IP>
			<wp:comment_date>2013-07-13 17:39:46</wp:comment_date>
			<wp:comment_date_gmt>2013-07-13 08:39:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[クリスティアンルブタン]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1373704786.997992038726806640625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>NettyでWebSocketサーバーを実装する</title>
		<link>http://blog.restartr.com/2010/12/29/websocket-server-written-in-scala-with-netty/</link>
		<pubDate>Wed, 29 Dec 2010 09:45:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=465</guid>
		<description></description>
		<content:encoded><![CDATA[この記事は <a href="http://atnd.org/events/10683">Scala Advent Calendar JP 2010</a> 23 日目(12/29)です。

前日の <a href="http://twitter.com/cooldaemon">@cooldaemon</a> さんが<a href="http://d.hatena.ne.jp/cooldaemon/20101228">Scala Actor + NIO</a>という、ものすごい記事を書いていらっしゃったのでこの流れの中で投稿するのが忍びないくらいです。
＃まさか前日にNIOネタがくるとはぁぁぁ…

さて、今回はNettyを使ってWebSocketサーバーを実装してみました。
JavaではなくScalaで、です。
とはいっても、目的はJavaコードをScalaに直す練習も兼ねて、公式サンプルにあるJavaコードをScalaに書きなおしただけですが。
ご指摘などありましたら謹んでお受けいたします…
<!--more-->
<h3>Netty</h3>
<ul>
<li><a href="http://www.jboss.org/netty/">Netty - the Java NIO Client Server Socket Framework - JBoss Community</a></li>
</ul>
Nettyの概要はこのへんで。
<ul>
<li><a href="http://ameblo.jp/principia-ca/entry-10629939611.html">JavaネットワークアプリケーションフレームワークNettyの紹介｜サイバーエージェント 公式エンジニアブログ</a></li>
</ul>

<h3>開発環境</h3>
<ul>
<li>Scala-2.8.0</li>
<li>Netty-3.2.3.Final</li>
</ul>

<h3>Echoサーバー</h3>
サンプル的にEchoサーバーから書いてみます。

<h4>やること</h4>
<ol>
<li>Echoハンドラを実装</li>
<li>NioChannelFactoryにスレッドプールを登録</li>
<li>BootstrapにNioChannelFactoryを登録</li>
<li>PipelineFactoryにEchoハンドラを登録</li>
<li>BootstrapにPipelineFactoryを登録</li>
<li>InetSocketAddressに（ホストと）ポート番号を指定してBootstrapに登録してサービス開始</li>
</ol>

<a href="https://github.com/ReSTARTR/nettyws/blob/master/src/main/scala/com/restartr/nettyws/EchoServer.scala">EchoServer.scala</a>
まずは起動元から。
<pre class="brush:scala">
object EchoServer {
  @throws(classOf[Exception])
  def main(args:Array[String]) {
    // サーバーのセットアップ
    val bootstrap = new ServerBootstrap(
      new NioServerSocketChannelFactory(
        Executors.newCachedThreadPool(), // bossExecutor
        Executors.newCachedThreadPool()  // workerExecutor
      ))
    
    bootstrap.setPipelineFactory(
      // リクエストをそのまま返すハンドラを実装して登録
      new ChannelPipelineFactory() {
        def getPipeline() = Channels.pipeline(new EchoServerHandler())
      }
    )
    
    // 8080番で待ち受け開始
    bootstrap.bind(new InetSocketAddress(8080))
  }
}
</pre>
で、ハンドラ側がこんなかんじ。
SimpleChannelUpstreamHandlerの
<ul>
<li>messageReceived(ctx:ChannelHandlerContext, e:MessageEvent)</li>
<li>def exceptionCaught(ctx: ChannelHandlerContext, e: ExceptionEvent) </li>
</ul>
をオーバーライドして処理内容を定義すればOK。
何かを呼び出し元に返すには、"e.getChannel().write( {レスポンス} )"で。

<pre class="brush:scala">
class EchoServerHandler extends SimpleChannelUpstreamHandler {
  val logger = java.util.logging.Logger.getLogger("EchoServerHandler")
  val transferredBytes = new AtomicLong()
  
  // そのまま返す
  override def messageReceived(ctx:ChannelHandlerContext, e:MessageEvent) {
    transferredBytes.addAndGet(
      e.getMessage().asInstanceOf[ChannelBuffer].readableBytes())
    
    println("echo_server: message received: " + e.getMessage())
    // レスポンスを返す
    e.getChannel().write(e.getMessage())
  }
  
  // 例外発生時はここにくる
  override def exceptionCaught(ctx: ChannelHandlerContext, e: ExceptionEvent) {
    logger.log(Level.WARNING, 
               "Unexpected exception from downstream.",
               e.getCause())
    
    e.getChannel().close()
  }
}
</pre>

<h3>WebSocketサーバー</h3>
本題のWebSocketサーバーです。
Echoサーバーの応用で、WebSocket用のハンドラを作成して、Bootstrapに登録すれば良い訳です。
<h4>仕様</h4>
<ul>
<li>WebSocketServer: 起動元</li>
<li>WebSocketServerHandler: プロトコルハンドラ。肝の部分。</li>
<li>WebSocketServerPipelineFactory: パイプライン生成。</li>
<li>WebSocketServeIndexPage: WebSocketクライアント用HTMLの生成</li>
</ul>

<h4>実装</h4>
すべて書くと冗長なので要所だけ抜き出しました。
<a href="https://github.com/ReSTARTR/nettyws/tree/master/src/main/scala/com/restartr/nettyws">全ソースはGithubを見てください。</a>

<b>WebSocketServerIndexPage.scala</b>
まずはクライアント側はこんな感じで、インプットフォームに入力した文字列をWebSocketサーバーに投げ、結果をdivに追記するだけです。
<pre class="brush:js">
      var socket; 
      if (window.WebSocket) {
        socket = new WebSocket( 'ws://localhost:8080/uppercase' );
        socket.onmessage = function(event) { log(event.data) }
        socket.onopen = function(event) { log('web socket opened') }
        socket.onclose = function(event) { log('web socket closed') }
      } else {
        alert('your browser does not supported web socket')
      }
      function log(message) {
        p = document.createElement('p');
        p.innerHTML = message
        document.getElementById('log').appendChild(p) ;
      }
      function send(message) {
        if (!window.WebSocket) { return; }
        if (socket.readyState == WebSocket.OPEN) {
          socket.send(message)
        } else {
          alert('the socket is not open.')
        }
      }
</pre>
<b>WebSocketServer.scala</b>
サーバー起動オブジェクトです。
HTML/WebSocketを扱うハンドラを登録してポートで待ち受けます。
<pre class="brush:scala">
    // WebSocket用ハンドラを含むPipelineFactoryを登録
    bootstrap.setPipelineFactory(new WebSocketServerPipelineFactory())
    
    // 8080番で待ち受け開始
    bootstrap.bind(new InetSocketAddress("localhost", 8080))
</pre>

<b>WebSocketServerHandler.scala</b>
実装するのは、Echoサーバーと同じく、messageReceived()とexceptionCaught()の２つ。
処理を分割しているのですこしだけメソッド多めです。
messageRecieved()で受信内容によって実際のハンドラをHttp/WebSocketのどちらかに切り替えます。

<pre class="brush:scala">
class WebSocketServerHandler extends SimpleChannelUpstreamHandler {
  val WEBSOCKET_PATH = "/uppercase"
  
  /**
   * メッセージ受信時の処理
   *   メッセージの内容によってWebSocketかHttpかハンドラを切り替える
   */
  @throws(classOf[Exception])
  override def messageReceived(ctx: ChannelHandlerContext, e: MessageEvent) {
    val msg:Object = e.getMessage()
    msg match {
      case frame: WebSocketFrame => {
          handleWebSocketFrame(ctx, frame)
        }
      case req: HttpRequest => {
          handleHttpRequest(ctx, req)
        }
    }
  }
  /**
   * HTTPリクエスト時の処理
   */
  @throws(classOf[Exception])
  def handleHttpRequest(ctx: ChannelHandlerContext, req: HttpRequest) {
    // DEBUG
    println("handleHttpRequest: " + Thread.currentThread().getName())
    
    // GETリクエスト以外は処理しない
    // "/"にきたらWebSocketクライアント用ページを送信
    // "/uppercase"にきたらリクエスト文字列を大文字に変換して返す
    if (req.getMethod() != GET) {
      sendHttpResponse(
        ctx, 
        req, 
        new DefaultHttpResponse(HTTP_1_1, FORBIDDEN))
    } else if (req.getUri().equalsIgnoreCase("/")) {
    	
      // (中略) デフォルトHTMLの送信
      
    } else if (req.getUri().equalsIgnoreCase(WEBSOCKET_PATH) &&
               Values.UPGRADE.equalsIgnoreCase(req.getHeader(Names.CONNECTION)) &&
               Values.WEBSOCKET.equalsIgnoreCase(req.getHeader(Names.UPGRADE))) {
      
      // (中略) WebSocket接続処理
      
      // ハンドラをHTTPからWebSocketに切り替えて、
      // send the handshake response
      val p = ctx.getChannel().getPipeline()
      p.remove("aggregator")
      p.replace("decoder", "wsdecoder", new WebSocketFrameDecoder())
      
      ctx.getChannel().write(res)
      
      p.replace("encoder", "wsencoder", new WebSocketFrameEncoder())
    } else {
      sendHttpResponse(
        ctx, req, new DefaultHttpResponse(HTTP_1_1, FORBIDDEN))
    }
  }
  /**
   * WebSocketリクエスト時の処理
   */
  @throws(classOf[Exception])
  def handleWebSocketFrame(ctx: ChannelHandlerContext, frame: WebSocketFrame) {
    // 大文字に変換するして、WebSocketFrameにのせてレスポンスを返す。
    ctx.getChannel().write(
      new DefaultWebSocketFrame(
        frame.getTextData().toUpperCase))
  }
  /**
   * HTTPレスポンスの送信
   */
  @throws(classOf[Exception])
  def sendHttpResponse(ctx: ChannelHandlerContext, req: HttpRequest, res: HttpResponse) {
    // ステータスコードが200じゃなければエラーページの表示
    if (res.getStatus().getCode() != 200) {
      res.setContent(
        ChannelBuffers.copiedBuffer(
          res.getStatus().toString(), CharsetUtil.UTF_8))
      HttpHeaders.setContentLength(res, res.getContent().readableBytes())
    }
    
    // keep-aliveでなければ接続を閉じる
    val f = ctx.getChannel().write(res)
    if (!HttpHeaders.isKeepAlive(req) || res.getStatus().getCode() != 200) {
      f.addListener(ChannelFutureListener.CLOSE)
    }
  }
  /**
   * 例外発生時の処理
   */
  @throws(classOf[Exception])
  override def exceptionCaught(ctx: ChannelHandlerContext, e: ExceptionEvent) {
    println("server: exception caught: ")
    e.getCause().printStackTrace()
    e.getChannel().close()
  }
  /**
   * WebSocket接続情報
   */
  def getWebSocketLocation(req: HttpRequest) = 
    "ws://" + req.getHeader(HttpHeaders.Names.HOST) + WEBSOCKET_PATH  
}
</pre>

<b>WebSocketServerPipelineFactory.scala</b>
パイプラインへの登録を定義します。
リクエストはDecoderを通り、ハンドラで処理され、Encoderを通って返される、という流れです。
ここでは初期状態としてHttp用の設定になっていますが、一旦WebSocket通信開始のリクエストを受け取ると、そのあとはWebSocketのDecoder/Encoderに切り替わります。
<pre class="brush:scala">
class WebSocketServerPipelineFactory extends ChannelPipelineFactory{
  @throws(classOf[Exception])
  def getPipeline(): ChannelPipeline = {
    val pipeline = Channels.pipeline()
    
    pipeline.addLast("decoder"    , new HttpRequestDecoder())
    pipeline.addLast("aggregator" , new HttpChunkAggregator(65536))
    pipeline.addLast("encoder"    , new HttpResponseEncoder())
    pipeline.addLast("handler"    , new WebSocketServerHandler())
    
    pipeline
  }
}
</pre>

実際、ブラウザでひらいてみると、Webフォームに入力されている「hello, world」が大文字に変換されてフォーム下部に追記されていきます。
まぁWebSocketサーバーを実装するだけなら、jetty7を使ったほうがシンプルに早くかけると思います。
Memcacheプロトコルを話すサービスをつくる場合とかには便利ですね。（messagepack-rpcでもnetty使っているとか。)

参考：
<ul>
<li><a href="http://gihyo.jp/dev/feature/01/websocket">Jettyで始めるWebSocket超入門</a></li>
<li><a href="http://d.hatena.ne.jp/yuroyoro/20100316/1268735022">Jetty7のWebSocketをScalaから使う - ゆろよろ日記</a></li>
</ul>

以上、お粗末様でした。。。

# あれ？Scalaあんまり関係ない？？]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>465</wp:post_id>
		<wp:post_date>2010-12-29 18:45:53</wp:post_date>
		<wp:post_date_gmt>2010-12-29 09:45:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>websocket-server-written-in-scala-with-netty</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="netty"><![CDATA[netty]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="websocket"><![CDATA[websocket]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/ex5Trq]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[7c8491330d4dccc93ab93c405d327808]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>132</wp:comment_id>
			<wp:comment_author><![CDATA[arizona car accident lawyer]]></wp:comment_author>
			<wp:comment_author_email>jeffery-hubert@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://simnettguitars.co.uk/forum/index.php?action=profile&amp;u=8671</wp:comment_author_url>
			<wp:comment_author_IP>74.221.215.10</wp:comment_author_IP>
			<wp:comment_date>2013-02-22 21:37:45</wp:comment_date>
			<wp:comment_date_gmt>2013-02-22 12:37:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello there! I could have sworn I've been to this website before but after browsing through some of the post I realized it's new to me.
Anyhow, I'm definitely glad I found it and I'll be bookmarking and checking back often!]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1361536665.58358097076416015625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>2010年に達成したかった10の目標</title>
		<link>http://blog.restartr.com/2010/12/31/10-targets-that-i-wanted-to-achieve-in-2010/</link>
		<pubDate>Fri, 31 Dec 2010 05:33:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=500</guid>
		<description></description>
		<content:encoded><![CDATA[さて、今年もあと二日になりましたので、2010年年明けに掲げた「達成したい10の目標」について振り返ってみます。

<!--more-->
<h4>禁煙を継続する</h4>
禁煙続いています。実は二本ほどもらいタバコしましたが、その場のノリなのでとくに問題なし。

<h4>間食は一日一回</h4>
会社ではできているけど、家ではできていないかも。ついついおやつを買い込んでしまうもので。

<h4>ヤフオクは一ヶ月に一回まで</h4>
落札については月一回もやっていないのでOK。

<h4>春までにいらないものを積極的に(捨てて|売って)身軽になる</h4>
結構売りさばいたので今は少しモノは減ったと思います。今後もさらに整理していきます。

<h4>身軽になったところで家を引っ越す</h4>
春までに、という目標でしたが結局2月に引越し完了。思い立ったら行動せずにはいられないようで。

<h4>ブログを一週間に一回は更新する</h4>
はい、無理でした。
だいたいがTwitterで足りるし、ソースコードとかまとめて残したいときにブログ使うくらい。

<h4>何かひとつオリジナルのwebサービスを公開する</h4>
サービスのリリースはできませんでした。（途中で頓挫したプロジェクトもありました。）
サービスではないですが、PHPMATSURIでDebugKitプラグインを公開したのは、この目標に近いかも。

<h4>PHP以外の言語にも積極的に取り組む(c++/java/python/erlang?)</h4>
Scalaを選択しました。関数型言語として一番実用的に感じたからです。
実際仕事で使ってはいませんが、関数型言語を学ぶことで得られたものはPHPでのプログラミングにも取り入れられているきがします。気づきを得るという意味でも成功かと。Scalaは今後も引き続き弄っていきたい言語になりました。

<h4>自然言語処理に詳しくなる</h4>
そこまで進まず…もう少し基礎的なところを固めつつという方向に向かいました。オライリーのNLP本は入手しているので、2011年に読み進めようと思います。

<h4>英語と数学をちゃんと勉強し直す</h4>
それぞれ本は買ったけど、、、、ほぼ読んでないです。英語は、PCの言語設定を変えたり、英書を読んだりしてできるだけ英語に触れる機会を増やしています。
英会話については今後の課題。


生活面については、ジョギングをはじめたりして、それまでより改善できているように思います。が、プログラマとしての達成度で言えばまだまだです。来年はインプットよりアウトプットを重視した一年にしたいと思います。

2010年、仕事で関わった皆様、勉強会で出会った皆様、私と関わりのあった皆様に感謝します。そして、来年もどうぞよろしくお願いいたします。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>500</wp:post_id>
		<wp:post_date>2010-12-31 14:33:20</wp:post_date>
		<wp:post_date_gmt>2010-12-31 05:33:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>10-targets-that-i-wanted-to-achieve-in-2010</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/eeisiL]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[3067a2207e0a25b372ee0996daa8afc8]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>2011年に達成したい6つの目標</title>
		<link>http://blog.restartr.com/2011/01/10/6-targets-i-want-to-achieve-in-2011/</link>
		<pubDate>Mon, 10 Jan 2011 12:28:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=508</guid>
		<description></description>
		<content:encoded><![CDATA[新年開けて少し経ってしまいましたが、ここで2011年の目標を立てたいと思います。
去年は10個挙げましたが、どうせ途中で気が変わると思うので、最低限やっておきたいこと5つに絞りました。
本業はPHPなので、PHP5.3やSymfony2なんかも学習しなければいけないのですが、ここでは本業でなかなか携われないところを中心にセレクトしました。

<ol>
<li>英会話能力の強化</li>
<li>Scalaの学習を継続</li>
<li>pythonに手を出す</li>
<li>MySQL5.5を使いこなす</li>
<li>アジャイル開発に詳しくなる</li>
<li>読書感想文をブログに書く</li>
</ol>

ひとつひとつ補足しておきます。
<!--more-->

<h4>1.英語力の強化</h4>
TOEIC600点程度を目指したい。試験は受けるかは別にして、特に技術書をスムーズに読める程度にはなっておきたい。でもどちらかといえば英会話に重きを置きたいところ。

<h4>2.Scalaの学習を継続</h4>
2010年8月からScalaをやり出したので、まだまだ初心者の域を抜け出せていません。GAEのWebアプリ開発や、並行プログラミングにもっと詳しくなりたい。

<h4>3.pythonに手を出す</h4>
何やら、pythonは統計解析やWebプログラミングなど、どの領域にも必須な雰囲気をひしひしと感じているので、いい加減ちゃんと学習します。
難解なワンライナーはかけなくても良いですが、最低限のお作法は押さえていこうと思います。NLP本とGAEアプリ開発を通じての学習になるかと。

<h4>4.MySQL5.5を使いこなす</h4>
2010年はNoSQLが流行りましたが、正直そこまで必要性を感じていないというが現状。なのでMySQLの知らないところや可能性を掘り下げて行きたい。
年末には本気アップデートのMySQL5.5 GAが出たので、性能検証しつつMySQLをもっと好きになるべく戯れます。

<h4>5.アジャイル開発に詳しくなる</h4>
具体的にはTDDとCI(BTS,VCS等の連携)を中心にやりたいです。これに関してはただ学ぶだけではなく、積極的に実践投入していきたいところ。
もういい加減に負のスパイラルから抜け出さないと。

<h4>6.読書感想文を書く</h4>
去年もけっこう本は読みましたが、読んで終わりがほとんど。もったいないので、まとめをブログに書いていこうと思います。あとで見返すためにも。

昨年は、様々な勉強会に顔をだし、講演を聴いたりコミュニケーションしたり、たくさんの方にお世話になりました。勉強会に出ることが、いかにモチベーション維持に寄与するかというのを実感できた良い年になりました。今年もちょくちょく顔を出したいと思いますので、その際はひとつお手柔らかにお願いいたします。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>508</wp:post_id>
		<wp:post_date>2011-01-10 21:28:27</wp:post_date>
		<wp:post_date_gmt>2011-01-10 12:28:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>6-targets-i-want-to-achieve-in-2011</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e7%9b%ae%e6%a8%99"><![CDATA[目標]]></category>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/eMLI5S]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[9a8b9135a59b7f4c4c6db581dc5e0469]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>プログラマが知るべき97のこと</title>
		<link>http://blog.restartr.com/2011/01/15/97things-every-programmers-should-know/</link>
		<pubDate>Fri, 14 Jan 2011 15:39:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=518</guid>
		<description></description>
		<content:encoded><![CDATA[「プログラマが知るべき97のこと」を読みました。

[tmkm-amazon]4873114799[/tmkm-amazon]

一時期いろいろネタにもされていましたが、読んで損はない本ですね。
内容は、プログラマの精神論から設計のTipsやパターン紹介まで多岐にわたっています。が、ひとつひとつが見開き1ページにまとまっているため、あとで気軽に読み返せますので、ぜひデスクに常備しておきたい一冊となりました。

<!--more-->

主に精神論のはなしに惹かれたので少しまとめを。

<h3>問題のあるソフトウェアをつくりだす可能性と、それに対して立ち向かう姿勢</h3>
どれだけ経験を重ねても、度重なる変更やスケジュールからの圧力などによって、品質が悪くなることは往々にしてあります。

<strong>24.変更を恐れない     Mike Lewis</strong>
<blockquote>
作っている人間がシステムを嫌っているようでは、そんなものを遣わされる側はたまらないでしょう。
</blockquote>

病気なソフトウェアを治すには痛みを伴うが、それを治すことで利益も得られ、治すことはメンバーにとって経験となると言っています。積極的にシステムを改良していくという姿勢はチームに伝播しやすいものであると。

<strong>52.「その場しのぎ」が長生きしてしまう     Klaus Marquardt</strong>
<blockquote>
いったん「暫定ソリューション」ができてしまうと、既成事実化するのです。
</blockquote>

さらに、暫定ソリューションに対する修正も暫定になってしまいがち。でも、「ソリューション」というだけに必要なものではあるはず。修正の優先度があがる体制づくりをするとか、もっと有用なソリューションを開発すればよい、と言っています。
いつまでたっても暫定のままの暫定ソリューションはいくつも見てきたので、かなり実感湧きます。

<h3>新しいことを学び続ける姿勢</h3>
新しい言語を毎年学ぶと良いというのは、割とよく聞く話しだと思います。

<strong>26.言語だけでなく文化も学ぶ     Anders Noras</strong>
<blockquote>
そうではなく、新しい言語から新たな発想を得て、同じ問題に対して違った解決策を見つけられるようになることが大事なのです。
</blockquote>

ある言語では言語仕様で対応してくれているけどその他の言語では自分で実装しなければいけなかったり（GCとか）、そういった、各言語ごとの視点を自分に取り入れるのは良いことです。
私は、ふだんPHPでオブジェクト指向プログラミングをやっていて、Scalaという関数言語を学んでいます。Scalaを学ぶことで、なんとなく関数型思考でPHPコードを書いていることもあります。あきらかにその書いたコードにたいする距離感が違っていて、そのコードの根拠が明確になっている気がするのです。

<h3>誰のためのコードか、という意識</h3>
なぜかこのような似通ったテーマをとりあげた人が多くいました。

<strong>35.超人の神話     Ryan Brush</strong><blockquote>
超人は必要ありません。必要なのはエキスパートです。積極的に自分以外にもエキスパートを育てようとする意思をもったエキスパートです。そういう人がいてくれれば、凡人が力をつけ、活躍できる可能性が生まれるでしょう。</blockquote>

<strong>56.未来へのメッセージ     Linda Rising</strong><blockquote>
「自分の書くコードは、全部、未来の誰かへのメッセージだと思うのよ。その誰かは、あなたの弟さんかもしれない。誰か、とても賢い人に、自分が難しい問題をどう解いたのか、丁寧に説明するつもりで書くの。」</blockquote>

<strong>82.他社への思いやりを意識したコーディング     Aslam Khan</strong><blockquote>
他人の存在を意識すれば、他人の書くコードにも当然良い影響を与えることになります。チームの同様のことを考え、思いやりを持ってコードを書けば、それは同僚たちにとって価値あるコードとなり、いずれ自分にも良い影響となって帰ってきます。どんなかたちであれ、そのコードに触れた誰もが、触れる前より良い人間、良いプログラマになれる、そういうコードを書くようにすべきでしょう。
</blockquote>


<strong>88.コードは生涯サポートするつもりで書く     Yuriy Zubarev</strong><blockquote>
「生涯サポートしなくてはならない」と考えながら仕事をするようになれば、素晴らしいことが起きるでしょう。</blockquote>

チームで開発するのが当然な現場では当たり前のことですが意外と意識できていなかったりします。私も、新しく知り得たパターンとかついつい自分の判断で取り入れてしまい、誰が見てもわかりにくいコードを書いたこともあります。今でもそういうコードになっているかもしれません。

こういうことを無意識にできるように、ペアプログラミングをするのも効果的かもしれません。隣で同じ画面を見ている「他人の目」が常にあり、自分も他人も納得のいく設計が結果的にできるわけですから。

と、ここまで書かれた複数人の内容をひとりじめするような内容の人がいましたw

<strong>91.良いプログラマになるには     Pete Goodliffe</strong><blockquote>
</blockquote>

'とりあえず'という意識を捨て、他人や未来の自分のためにわかりやすいコードを書き、新しいことを学び続けよう、ということを彼は言っています。
※前述のテーマについては、それぞれにエピソードが違うので、どれを読んでも面白いものなので、まとめのようなものがあっても別に構わないのですが。

目の前のコードに集中しがちですが、冷静になって、こういった基本姿勢を思い返すようにしたいものです。


「達人プログラマー」や、「リファクタリング」など、引用された本で未読のものがいくつかあったので、これらについても今後読んでみようと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>518</wp:post_id>
		<wp:post_date>2011-01-15 00:39:03</wp:post_date>
		<wp:post_date_gmt>2011-01-14 15:39:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>97things-every-programmers-should-know</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="books"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dVJZyD]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[74e0ee4f8394a51bcc8d4f64a6b95c6b]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>146</wp:comment_id>
			<wp:comment_author><![CDATA[ミュウミュウ バッグ]]></wp:comment_author>
			<wp:comment_author_email>azjtdy@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.bag-uses.com</wp:comment_author_url>
			<wp:comment_author_IP>200.61.16.80</wp:comment_author_IP>
			<wp:comment_date>2013-08-07 20:55:31</wp:comment_date>
			<wp:comment_date_gmt>2013-08-07 11:55:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[の通販価格]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375876531.7086250782012939453125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>トークセッション「よいソフトウェアを作るプログラミングとは」</title>
		<link>http://blog.restartr.com/2011/01/16/talk-session-what-is-programming-for-developing-a-good-software/</link>
		<pubDate>Sat, 15 Jan 2011 15:40:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=533</guid>
		<description></description>
		<content:encoded><![CDATA[昨日<a href="http://blog.restartr.com/2011/01/15/97things-every-programmers-should-know/">感想をブログった</a>「<a href="http://www.amazon.co.jp/dp/4873114799">プログラマが知るべき９７のこと</a>」刊行記念のトークセッションに行ってきました。タイトルは「よいソフトウェアを作るプログラミングとは」です。
＃ちなみにタイトルは釣りだそうですｗ



<blockquote>『プログラマが知るべき97のこと』（オライリー・ジャパン刊・オーム社発売）刊行記念トークセッション
よいソフトウェアを作るプログラミングとは

森田創(寄稿者)×舘野祐一(寄稿者)×和田卓人(監修者)

■2011年1月15日(土)19:00～

新刊『プログラマが知るべき97のこと』（オライリー・ジャパン刊・オーム社発売）の刊行を記念して、本書監修者の和田卓人氏と寄稿者の森田創氏、舘野祐一氏の3名がプログラミングをテーマに語ります。
よいソフトウェアを作るために必要なこととは何でしょうか。
バージョン管理やテスト、自動化のツールとその知識、はたまたコーディング規約やスタイルでしょうか。
それともプログラマのスキルアップの勉強法や、チームでのコミュニケーションでしょうか。
自ら手がけるものの質を向上させるために、プログラミングを生業とする技術者ひとりひとりが「知るべきこと」を自らの体験を交えて大いに語り合います。
</blockquote>


<ul>
	<li><a href="http://www.ustream.tv/recorded/12026561">USTREAM</a></li>
	<li><a href="http://togetter.com/li/89570">Togetter</a></li>
</ul>
<!--more-->
壁面にトークのアジェンダのマインドマップが書かれていたので、それをベースにマップを作成してみました。細かい表現などは自分フィルターがかかっていて、本来言っていたことと一致していない可能性あります。ので、詳しくはUST,Togetterを御覧ください。。。

<div style="width:425px" id="__ss_6577665"><strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/restartr/ss-6577665" title="よいソフトウェアを作るプログラミングとは">よいソフトウェアを作るプログラミングとは</a></strong><object id="__sse6577665" width="425" height="355"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=random-110115085249-phpapp01&stripped_title=ss-6577665&userName=restartr" /><param name="allowFullScreen" value="true"/><param name="allowScriptAccess" value="always"/><embed name="__sse6577665" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=random-110115085249-phpapp01&stripped_title=ss-6577665&userName=restartr" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed></object><div style="padding:5px 0 12px">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/restartr">Re STARTR</a>.</div></div>

トークの内容は、登壇者のプログラマになったきっかけからはじまり、どんな開発現場か、どのように技術を身につけてきたか、などを語り合うものでした。
「９７のこと」についてはQ&Aのときの質問がでるまで触れられなかったというｗ

<h3>JavaScriptの特殊性</h3>
面白かったのは、和田さんが「JavaScriptはプログラミングパラダイムの交差点」と言っていたこと。
MochiKitはPythonの関数的なものを、prototype.jsはオブジェクト志向が取り入れられていたりと。たしかに、JSって言語のなかでもかなり特殊ですよね。Webサービスで言えば、サーバーサイドはいろんな言語が使われるけど、ブラウザ上では唯一のプログラミング言語（一応ASもあるけど）。だからこそ、他言語で馴染みのあるパラダイムを取り入れようとするんでしょう。

<h3>プログラマの責務</h3>
これまで感じた「うれしかったこと」に対して「信念を突き通して作ったものに対する喜びの反応をもらったとき」という回答がありましたが、こればかりは普遍ですね。スタンドアロンであれWebサービスであれ、作るものや使う技術は変われど、誰か使いたいと思ってくれる人に対して価値を提供することが我々プログラマの責務ですから。

登壇者の方々、貴重なおはなしをどうもありがとうございました。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>533</wp:post_id>
		<wp:post_date>2011-01-16 00:40:01</wp:post_date>
		<wp:post_date_gmt>2011-01-15 15:40:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>talk-session-what-is-programming-for-developing-a-good-software</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/i1eFHJ]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[933f30fc156276d3deb2ac8f8af4fad3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>pythonをはじめるために</title>
		<link>http://blog.restartr.com/2011/01/30/how-to-start-learning-python-programming/</link>
		<pubDate>Sun, 30 Jan 2011 13:04:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=544</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blog.restartr.com/2011/01/10/6-targets-i-want-to-achieve-in-2011/">今年の目標</a>として
<blockquote>3.pythonに手を出す</blockquote>
というのを掲げていて、「エキスパートPythonプログラミング」を買ったので、pythonの学習をこんな感じではじめてみるつもり、というのを書いておきます。

[tmkm-amazon]4048686291[/tmkm-amazon]
<!--more-->

<h3>1.リファレンスを用意する</h3>
<ul>
<li>基礎文法：<a href="http://www.python.jp/doc/release/reference/">Python 言語リファレンス &mdash; Python v2.6.2 documentation</a></li>
<li>チュートリアル：<a href="http://www.python.jp/doc/release/tutorial/index.html">Python チュートリアル &mdash; Python v2.6.2 documentation</a></li>
<li>痒いところ向け：エキスパートPythonプログラミング</li>
<li>PHPから逆引き：<a href="http://www.php2python.com/">Php2Python - Python alternatives to PHP functions, classes and librarie</a>
</ul>

基礎文法は公式リファレンスで大体まかなえますし、ググれば大体の情報は手に入るので、あえて購入していません。オライリーの「初めてのpython 第3版」は古い上にゴツイので却下しました。（「初めてのpython第4版が洋書は最近出ましたが日本語訳はまだ）

PHP2Pythonは、PHP関数をPythonに置き換えると…というのを投稿できるサイトです。PHP関数から逆引きできるので、目的がはっきりしていれば探しやすくてかなり便利です。


<h3>2.目標を決める</h3>
pythonを学び始めるにあたっては、何をどこまで学ぶのか、というのは明確にすべきでしょう。
私の場合は、こんな感じ。

<h4>他言語との違いを探る</h4>
新しい言語を学んだほうが良いというのはよく言われるところだと思います。たとえ直接的に必要性がなくても。その言語やコミュニティの特徴を知ることで、新しい視点が生まれます。
普段のプログラミングに良い部分を取り入れることができると期待しています。

<b>python界隈で知りたいこと</b>
その言語に求めるものは、言語毎に異なるもの。私が気になっているのは以下のとおり。
<ul>
<li>オブジェクト指向プログラミング</li>
<li>関数型プログラミング</li>
<li>アプリ開発フロー<li>
<li>アジャイルへの取り組みやテスト手法</li>
<li>メタプログラミング</li>
</ul>
これを知るために最適だったのが、上述の「エキスパートPythonプログラミング」でした。

また、特定の目的も一応あって、以下の２つを予定しています。

<b>自然言語処理入門</b>
積読中の書籍に「入門　自然言語処理」があるのですが、pythonで解説されていますので、コードでつまづかない程度に基礎体力をつけておきます。
[tmkm-amazon]4873114705[/tmkm-amazon]
必要そうな技術はこんな感じ。
<ul>
<li>文字列の取り扱い</li>
<li>NLTK(pythonの言語処理モジュール)の取り扱い</li>
<li>統計処理ライブラリの取り扱い</li>
</ul>

<b>GAEアプリ開発</b>
Scalaでも少し手をつけていたりますが、JMV系とPythonでどのような違いがあるのかも見てみたいところ。
<ul>
<li>Webフレームワーク(Django, Kay等)の取り扱い</lI>
<li>連携する各サービスAPIの取り扱い</li>
</ul>




当分は言語仕様と戯れようと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>544</wp:post_id>
		<wp:post_date>2011-01-30 22:04:12</wp:post_date>
		<wp:post_date_gmt>2011-01-30 13:04:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-start-learning-python-programming</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="books"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/fegIxa]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[05a674719b5adde6523f26be99489105]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>数式を使わないデータマイニング入門</title>
		<link>http://blog.restartr.com/2011/02/06/introduction-of-data-mining-without-formul/</link>
		<pubDate>Sun, 06 Feb 2011 13:47:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=564</guid>
		<description></description>
		<content:encoded><![CDATA[[tmkm-amazon]4334033555[/tmkm-amazon]

テキストマイニング書を探していたら、なぜか同じ場所にあったので買いました。
データマイニングって何？という人向けの入門書。１時間もあればサクっと読める軽い内容。データマイニングをはじめる人だけでなく、<strong>データマイニングを依頼する側</strong>が読むと良いのではないでしょうか。

<!--more-->
<h4>マイニング＝採鉱</h4>
第一章にも書いてあるけど、
<blockquote><em>マイニングとは、「採鉱」を指す言葉である。データマイニングにおけるマイニングは二段階のプロセスに分かれる。
一段階目は、大量の情報から隠れた法則を見つけ出すこと。
〜中略〜
二段階目は、そこで見つかった法則のなかから、使えるものを探し出すこと。これは意外に認知されていない。</em>
</blockquote>
さらに、
<blockquote><em>多くの人は法則さえ見つかれば、それが有意で、お金にもなると考えている。しかし、実際には役に立たない法則の方が多い。この事実は見過ごされがちだ。</em></blockquote>

マイニングを行えば、何かしら答えが見つかるものだと思われがち。結果的に答えが見つかればラッキー。データマイニングを依頼する側には「期待せずに期待してください」としか言えないですね…

ところで、何かしら答えを限られた期間で見つけ出すのは難しいのだとすれば、データ分析者は評価者に対して目標として何をコミットし、どのように結果を評価されるのでしょうか。プログラマーと同じく、明確な数値目標を設定しづらい職業なのかなと思ったり。

<h4>監視社会</h4>
本書中盤にはデータマイニング手法としていくつか概要の説明があり、最後には監視社会について触れています。それまでの流れと少し関連性が低い内容ではあるけれど、興味深い内容。参考図書として挙げられていたもの（下記）が１０年前の書籍なので、関連する最近の書籍をさがしてみる予定。
[tmkm-amazon]4791760085[/tmkm-amazon]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>564</wp:post_id>
		<wp:post_date>2011-02-06 22:47:11</wp:post_date>
		<wp:post_date_gmt>2011-02-06 13:47:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introduction-of-data-mining-without-formul</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="books"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>29</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention 数式を使わないデータマイニング入門 | ReSTARTR -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/blog.restartr.com/2011/02/06/introduction-of-data-mining-without-formul/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2011-02-07 01:38:31</wp:comment_date>
			<wp:comment_date_gmt>2011-02-06 16:38:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  This post was mentioned on Twitter by いのうえ　たかひろ and katsyoshi, Masaki YOSHIDA. Masaki YOSHIDA said: ブログ書きました。＞ 数式を使わないデータマイニング入門 | ReSTARTR http://bit.ly/g4TNrL     [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>pythonとscalaのファイルの自動クローズ</title>
		<link>http://blog.restartr.com/2011/02/07/automatically-close-the-file-in-python-and-scala/</link>
		<pubDate>Sun, 06 Feb 2011 15:10:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=576</guid>
		<description></description>
		<content:encoded><![CDATA[エキスパートPythonプログラミングを少しずつ読み進めています。といっても気になるタイトルを拾い読みですが。

そのなかの"2.4 withとcontextlib"の章のwith文の例としてファイル読み込みのコードが書いてました。
<script src="https://gist.github.com/813385.js?file=read_file_using_with.py"></script>
たったこれだけで、自動クローズまでやってくれるみたい。

<!--more-->
さらに、with文を使うためのクラス定義も可能らしい。
<script src="https://gist.github.com/813385.js?file=Reader.py"></script>

実装すべきは下記２メソッドのみ。
<ul>
	<li>__enter__(self)</li>
	<li>__exit__(self, exception_type, exception_value, exception_traceback)</li>
</ul>
__enter__の戻り値はasで受けとれます。
__exit__で例外処理のfinallyに当たる処理を書きます。何も返さないと例外はその呼び出し元に伝播します。

さらにさらに、contextlibというモジュールを使えば、もっと自然に書けます。
<script src="https://gist.github.com/813385.js?file=read_file_with_closing.py"></script>
※これは、contextmanager内のfinally句でcloseを書くのと同じ。(<a href="http://www.python.jp/doc/nightly/library/contextlib.html#contextlib.closing">参考</a>)

<h4>Scalaでwith（っぽいもの）を実装</h4>
pythonのwith文と同様の記述方法をScalaでやるとしたら…こんな感じでしょうか。
<script src="https://gist.github.com/813385.js?file=FileReader.scala"></script>

ファイルの自動クローズについてはこちらを参考にさせていただきました。
<a href="http://d.hatena.ne.jp/syttru/20080322/1206212125">Scalaでファイル操作 - syttruの日記</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>576</wp:post_id>
		<wp:post_date>2011-02-07 00:10:22</wp:post_date>
		<wp:post_date_gmt>2011-02-06 15:10:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>automatically-close-the-file-in-python-and-scala</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>30</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention pythonとscalaのファイルの自動クローズ | ReSTARTR -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/blog.restartr.com/2011/02/07/automatically-close-the-file-in-python-and-scala/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2011-02-07 02:10:57</wp:comment_date>
			<wp:comment_date_gmt>2011-02-06 17:10:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  This post was mentioned on Twitter by katsyoshi, Masaki YOSHIDA. Masaki YOSHIDA said: ブログ書きました。#python #scala ＞ pythonとscalaのファイルの自動クローズ | ReSTARTR http://bit.ly/hJFCis     [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>入門 自然言語処理 第一章</title>
		<link>http://blog.restartr.com/2011/02/13/analysing-text-with-the-natual-language-toolkit-chap1/</link>
		<pubDate>Sun, 13 Feb 2011 00:00:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=588</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.amazon.co.jp/dp/4873114705/">入門 自然言語処理</a>は11月に購入してから寝かせたままでしたが、本日より読み始めることにしました。

本日は第一章です。内容は大きく以下2点。
<ul>
	<li>pythonとnltkでの簡単なテキスト処理方法</li>
	<li>自然言語処理を俯瞰する</li>
</ul>
内容は本に任せるとして、ここでは演習問題の解答をしようと思います。

<!--more-->

問題文は簡潔に記述するため、本書に記載されているものとは異なる表記をしています。

<h3>納得いかない問題</h3>
ひとつだけ納得いかない問題がありました。
「<i>17. text9からtext.9.index()を使って’sunset’を含む一文を抜き出す</i>」です。
解答をググっても、こちらしか出てこず。
<a href="http://sojin.kyoto-math.jp/nlp/1-3.html#id1">1-15. bで始まる単語抽出 &mdash; 入門自然言語処理</a>
たしかに、
<pre class="brush:python">
&gt;&gt;&gt; text9.index('sunset')
629
</pre>
と帰ってきます。でも、実際には'sunset'を含む一文は複数あるわけです。
確認するとこんな感じ。
<pre class="brush:python">
&gt;&gt;&gt; [t for t in text9 if t=='sunset']
['sunset', 'sunset', 'sunset', 'sunset', 'sunset', 'sunset', 'sunset', 'sunset', 'sunset', 'sunset', 'sunset', 'sunset', 'sunset', 'sunset']
</pre>
複数ある一文を抽出しなくていいの？という疑問が出てきました。すべての文を抽出する方法はさておき、今回はひとつだけ抽出する解答だけを書きました。

<h3>演習問題</h3>
<h4>準備</h4>
nltkとmatplotlibがインポートできていれば、以下コードだけですみます。
<pre class="brush:python">from nltk.book import *</pre>

以下が、すべての問題の解答です。
(私個人の解答であり、正解の保証はどこにもありません。）

<h4>1. Pythonインタプリタを電卓として、12 / (4 + 1)のような計算を入力してみよう</h4>
<pre class="brush:python">>>> 12 / 4 + 1
2.3999999999999999</pre>
<h4>2. 26文字のアルファベットが与えられたとき、10字の文字列は26の10乗（あるいは26**10）種類も作ることができるが、100文字だったら何種類か。</h4>
<pre class="brush:python">>>> 26 ** 100
3142930641582938830174357788501626427282669988762475256374173175398995908420104023465432599069702289330964075081611719197835869803511992549376L</pre>
<h4>3. ['Monty', 'Python'] * 20や 3 * sent1を実行すると何が起こるか</h4>
<pre class="brush:python">>>> ['Monty', 'Python'] * 3
['Monty', 'Python', 'Monty', 'Python', 'Monty', 'Python']</pre>
<h4>4. text2には単語がいくつ含まれているか。また重複を除くといくつか。</h4>
<pre class="brush:python">>>> #単語数
>>> len(text2)
141576
>>> #重複除いた単語数
>>> len(set(text2))
6833</pre>
<h4>5. ユーモア小説とロマンス小説の間で、どちらが語彙の多様性が高いか。</h4>
<ul>
	<li>ユーモア小説：多様性＝6.9</li>
	<li>ロマンス小説：多様性＝8.3</li>
</ul>
⇛ロマンス小説が高い。
<h4>6. Sense and Sensibilityのなかで、エリナ、マリアン、エドワード、ウィロビーの分散プロットを表示してみよう。</h4>
名前まで日本語表記されていて元の綴りがわからない…
なのでまず探すところから。
<pre class="brush:python">>>>[t for t in set(text2) if t.startswith('El')]
['Elinor', 'Eliza']</pre>
な感じで4人分探します。
で、プロットする
<pre class="brush:python">>>> text2.dispersion_plot(['Elinor', 'Mrianne', 'Edward', 'Willoughbys'])
# ※ここでプロットウインドウが表示される
</pre>

<h5>男女の役割の違い</h5>
女性が高頻度に出現
<h5>カップルの特定は可能か</h5>
できない。どうしろと…
<h4>7. text5のコロケーションを探してみよう。</h4>
<pre class="brush:python">>>> text5.collocations()
Building collocations list
wanna chat; PART JOIN; MODE #14-19teens; JOIN PART; PART PART;
cute.-ass MP3; MP3 player; JOIN JOIN; times .. .; ACTION watches; guys
wanna; song lasts; last night; ACTION sits; -...)...- S.M.R.; Lime
Player; Player 12%; dont know; lez gurls; long time</pre>
<h4>8. len(set(text4))の目的</h4>
単語のユニーク数を求める
<h4>9. リストと文字列</h4>
<h5>(a) 変数の定義と2種類の出力を試してみよう</h5>
<pre class="brush:python">>>> my_string = 'My String'
>>> my_string
My String
>>> print my_string
My String
</pre>

<h5>(b). 連結と演算</h5>
<pre class="brush:python">>>> my_string + my_string 
'My StringMyString'
>>> my_string * 3 
'My StringMy StringMy String'
</pre>

<h4>10. 単語のリストを保持するmy_sentという変数を定義しよう</h4>
<h5>(a) ' '.joiin(my_sent)を使ってリストを文字列に変換してみよう。</h5>
<pre class="brush:python">>>> ' '.join(my_string.split(' '))
'My String'
</pre>
<h5>(b) split()を使ってできた</h5>
<pre class="brush:python">>>> my_sent = ['My', 'Sent']
>>> ' '.join(my_sent)
'My Sent'
>>> ' '.join('hoge moge'.split(' '))
'My Sent'
</pre>
<h4>11. リストの連結</h4>
<pre class="brush:python">>>> phrase1 = ['hoge']
>>> phrase1 += ['moge']
>>> phrase2 = ['foo']
>>> phrase2 += ['bar']
>>> phrase1 + phrase2
['hoge', 'moge', 'foo', 'bar']</pre>
<h5>len(phrase1 + phrase2)とlen(phrase1) + len(phrase2)の違いはなにか。</h5>
連結した後の長さと、それぞれの長さの加算
<h4>12. NLPと関連あるものはどれか。</h4>
<ul>
	<li>['Monty Python'][6:12]</li>
	<li>['Monty', 'Python'][1]</li>
</ul>
⇛b
<h4>13. sent1[2][2]はなにを表しているだろうか。</h4>
2要素目の2文字目
<h4>14.  要素のインデックス取得</h4>
微妙だけど。
<pre class="brush:python">>>> i = 0
>>> for t in sent3:
...   if t=='the':
...     print i
...   i += 1
...
1
5
8</pre>
<h4>15. bから始まる単語の取得</h4>
<pre class="brush:python">>>> sorted(set([t for t in text5 if t.startswith('b')]))
['b', 'b-day', 'b/c', 'b4',......</pre>
<h4>16. range()について</h4>
<pre class="brush:python">>>> range(10)
[1,2,3....9]
>>> range(10,20)
[10,11,12,...., 20]
>>> range(10,20,2)
[10, 12, ..., 18]
>>> range(20,10,-2)
[20, 18, ..., 12]</pre>
<h4>17. text9からtext.9.index()を使って'sunset'を含む一文を抜き出す</h4>
これで良いのかわかりませんが、ひとまずの解答として。
<pre class="brush:python">
dot_pre = 0 # 直前の'.'の位置
dot_aft = 0 # 直後の'.'の位置
found = False # '.'が見つかったかどうか
i = 0 # 現在位置
for t in text9:
  if t=='sunset':
    found = True
  if t=='.':
    if found==True:
      dot_aft = i
      break
    else:
      dot_pre = i
  i += 1
# 'sunset'を含む一文を生成する。
' '.join([text9[t] for t in range(dot_pre+1, dot_aft+1)])
# 'CHAPTER I THE TWO POETS OF SAFFRON PARK THE suburb of Saffron Park lay on the sunset side of London , as red and ragged as a cloud of sunset .'
</pre>

<h4>18. sent1からsent8までに含まれる語彙を計算</h4>
<pre class="brush:python">len(set(sent1 + sent2 + sent3 + sent4 + sent5 + sent6 + sent7 + sent8))</pre>
<h4>19. 以下2行の違いは何か。</h4>
<pre class="brush:python">sorted(set([w.lower() for w in text1]))
sorted([w.lower() for w in set(text1)])</pre>
<h5>sorted(set([w.lower() for w in text1]))</h5>
小文字のリストを作ってからユニークにしてソート
<h5>sorted([w.lower() for w in set(text1)])</h5>
ユニークリストから小文字にしてソート
こちらが大きい。重複をふくんでいるので。

<h4>20. w.isupper()とw.islower()の違いは何か</h4>
大文字ならTrueと小文字ならTrue

<h4>21. 最後の2単語を取り出すスライス式を書いてみよう。</h4>
<pre class="brush:python">>>> text2[-2:]
</pre>

<h4>21. 4文字の単語のうち、頻度の高い順に取得してみよう。</h4>
<pre class="brush:python">
>>> FreqDist([t for t in text4 if len(t)==4]).keys()
</pre>

<h4>21. 大文字の単語を一行ずつ表示</h4>
<pre class="brush:python">
>>>  for str in [t for t in text6 if t.isupper()]:
>>>   print str
</pre>

<h4>24. 条件にあったものを含むリスト</h4>
<h5>a: izeで終わる</h5>
<pre class="brush:python">[t for t in text6 if t.endswith('ize')]</pre>
<h5>b: zを含む</h5>
<pre class="brush:python">[t for t in text6 if 'z' in t]</pre>
<h5>c: ptを含む</h5>
<pre class="brush:python">[t for t in text6 if 'pt' in t]</pre>
<h5>d: 先頭大文字あと小文字（＝タイトルケース)</h5>
<pre class="brush:python">[t for t in text6 if t.isalpha()==True and t==t.title()]</pre>
<h4>25. listed = ['she', 'sells', 'sea', 'shells', 'by', 'the', 'sea', 'shore']</h4>
<h4></h4>
<h5>shではじまる単語</h5>
<pre class="brush:python">[t for t in listed if t.startswith('sh')]</pre>
<h5>4文字より大きい単語</h5>
<pre class="brush:python">[t for t in listed if len(t)>=4]</pre>
<h4>26. sum([len(w) for w in text1])について</h4>
<h5>どんな処理？</h5>
リスト中のすべての単語長の合計
<h5>これをつかって平均はだせる？</h5>
<pre class="brush:python">
>>> sum([len(w) for w in text1])/len(text1)
3.8304111280236488</pre>
<h4>27. 語彙サイズを返すvocab_size(text)を定義</h4>
<pre class="brush:python">
>>> def vocab_size(text):
...  return len(set(text))
...
>>> vocab(text1)
19317
</pre>

<h4>28. percent(word, text)を定義</h4>
<pre class="brush:python">
>>> def percent(word, text):
...  return len([t for t in text if t==word]) / len(text)
</pre>

<h4>29. set(sent3) &lt; set(text1)について</h4>
<h5>実行してみる</h5>
<pre class="brush:python">True</pre>
<h5>29. 異なるテキストで実行して何が起こるか</h5>
<pre class="brush:python">>>> set(sent3) &lt; set(text3)
True</pre>
<h5>実用的な応用は何があるか</h5>
ドキュメント間の語彙数の比較


[tmkm-amazon]4873114705[/tmkm-amazon]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>588</wp:post_id>
		<wp:post_date>2011-02-13 09:00:29</wp:post_date>
		<wp:post_date_gmt>2011-02-13 00:00:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>analysing-text-with-the-natual-language-toolkit-chap1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="nlp"><![CDATA[nlp]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="%e5%85%a5%e9%96%80-%e8%87%aa%e7%84%b6%e8%a8%80%e8%aa%9e%e5%87%a6%e7%90%86"><![CDATA[入門 自然言語処理]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>39</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention 入門 自然言語処理 第一章 | ReSTARTR -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/blog.restartr.com/2011/02/13/analysing-text-with-the-natual-language-toolkit-chap1/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2011-02-13 11:15:44</wp:comment_date>
			<wp:comment_date_gmt>2011-02-13 02:15:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...]  This post was mentioned on Twitter by kimukou_26, Masaki YOSHIDA. Masaki YOSHIDA said: ブログ書きました。＞ 入門 自然言語処理 第一章 | ReSTARTR http://bit.ly/eRuFY1     [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>151</wp:comment_id>
			<wp:comment_author><![CDATA[イタリア 時計 ブランド]]></wp:comment_author>
			<wp:comment_author_email>pslvlckyl@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.de61.com/</wp:comment_author_url>
			<wp:comment_author_IP>80.191.193.2</wp:comment_author_IP>
			<wp:comment_date>2013-10-11 10:01:46</wp:comment_date>
			<wp:comment_date_gmt>2013-10-11 01:01:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[時計 ブランド ランキング イタリア 時計 ブランド http://www.de61.com/]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381453306.9722430706024169921875;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>600万人の女性に支持されるクックパッドというビジネス</title>
		<link>http://blog.restartr.com/2011/02/14/cookpad-the-business-that-supported-by-600-million-women/</link>
		<pubDate>Sun, 13 Feb 2011 23:00:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=643</guid>
		<description></description>
		<content:encoded><![CDATA[[tmkm-amazon]4827550719[/tmkm-amazon]

2009年5月発刊なので、2年以上前の本です。発刊時から存在は知ってましたが、ブックオフにてちょうど目に入ってきて、興味があったので購入してみました。ボリュームとしては2時間弱。
私自身も同じようにWebサイト（うちの場合ポータルですが）を運営している会社に所属していることもあり、双方を重ねて考えてしまいます。私自身はプログラマーなので、サービス云々については疎いので、こういう本の内容にはすぐ看過されてしまいがちです。
あと、数年前の本ですが、本質的なところは古くなく、今後数年読めるものだと思いました。

ということで私的メモを少々。（※各所レビューの方が100倍的確だと思います。）

<!--more-->

## 試行錯誤の過程は無駄ではない
p88
> *完成したものから見ると、一見捨てた90パーセントは無駄なように見えるんですが、そうじゃない。ゴールまでの進み方がわかっていないときの90パーセントというのはすごく重要で、これがなかったらゴールには辿りつけない。
> 〜中略〜
> とにかく、一発で当てるのではなく、たくさん試す。それが、ゴールに行き着くための最短の方法だと思っています。*

成功の大きさが試行錯誤の数に比例する、と。私自身サービスは数ヶ月使っていた時期があるだけなのですが、実際どのくらいの頻度でどれだけの試行が繰り返されているのか、非常に気になります。社内で検証する段階での試行錯誤だけでなく、サービス開始した後の試行錯誤もある訳だし。

## コミュニケーションが成功したかどうかという指標
本当の広告効果とは何なのか、という文脈のなかで、

> *「本当にどれだけファンが作れて、毎月、商品を買ってくれてる人がどれだけ増やせたか、それこそが、コミュニケーションが成功したかどうか、だと思うんです。”この商品を教えてくれてありがとう”という人を、どれだけ作れたか。それを広告効果として追求していたなければいけないと思っています。」*

とあります。
この「コミュニケーションが成功したかどうか」という表現がすごく響いてきました。形式は違えど、電話やメールなどと同じコミュニケーションの手段であるということでしょうか。うん、良い言葉です。

## シンプルなサービスと複雑なサービス
Twitterのようなシンプルなものがあれば、Facebookのように複雑なものもあったりして。結局サービスって何が受け入れられるのでしょう。
できることを説明書なしにユーザーが気持よく目的を果たせるように工夫した結果として、機能をシンプルにしたのがクックパッドの今の形な訳で。だとすれば、「徹底的に」目的を追求すれば、おのずとサイトの複雑性は決まるのでしょうか。
もう少し視野を広げて見識を深める必要がありそうです。

ここ1年程ちゃんとした料理をしていない私ですが、簡単につくれるレシピをクックパッドで探してみようかな。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>643</wp:post_id>
		<wp:post_date>2011-02-14 08:00:42</wp:post_date>
		<wp:post_date_gmt>2011-02-13 23:00:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cookpad-the-business-that-supported-by-600-million-women</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="books"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>第一回 にこにこテキストマイニングに参加してきた #nicoTextMining</title>
		<link>http://blog.restartr.com/2011/02/20/attended-nicotextmining-1st/</link>
		<pubDate>Sun, 20 Feb 2011 00:30:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=667</guid>
		<description></description>
		<content:encoded><![CDATA[第一回 にこにこテキストマイニングに参加してきました。

  * <a href="http://atnd.org/events/12264">第1回 にこにこテキストマイニング勉強会</a>

主催は@NLP_PRMさんと@toilet_luhchさん。会場はオラクル青山センターさん。
懇親会と二次会にも参加させていただき、皆様の豊富な知識に圧倒されて参りました。精進しようと思います。いろいろな話しをありがとうございました。

当日の内容はTogetterにまとめられています。

  * <a href="http://togetter.com/li/102922">Togetter - 「第１回 にこにこテキストマイニング勉強会 #nicoTextMining #1</a>

以下、勉強会の資料と私的メモです。


<!--more-->


### [@AntiBayesian](<http://twitter.com/#!/AntiBayesian>) : 「テキストマイニングの歩き方」
発表資料：[テキストマイニングの歩き方](<http://www24.atpages.jp/antibayesian/up/src/up0006.pdf>)

「技術云々ではなく、どのようにテキストマイニングを活かすか」、という今回の勉強会の趣旨に沿った発表内容。ナレッジの自動蓄積のために、Wikiとかを使うのではなく日報メールを解析するというのは面白いですね。情報共有ツールの導入ってほとんどが失敗に終わる気がします。それよりは慣れたフォーマットを活かす方向に考えてみる、と。

 * アンケート
  * 封書解答で20%の回答率
  * 個人情報を求めると10%の回答率
 * 言語処理における様々な解析
   * 押さえるべきところ
    * 形態素解析
    * 構文解析

### [@toilet_lunch](<http://twitter.com/#!/toilet_lunch>) : 「ゆるふわテキストマイニングをしてみよう」
発表資料：
[ゆるふわテキストマイニングをしてみよう](<http://toilet-lunch.sakura.ne.jp/nicoTextMining01.pdf>)

「ゆるふわ」というよりはけっこうガチな内容。私はNLPを少しかじったことがあったので、なんとかひと通りの用語は理解できました。現在の自然言語処理では何ができて、何が問題になるのか、というのがよくわかりました。

   * 評判分析ツール
      * [http://toilet-lunch.shisobu.in/search.cgi](<http://toilet-lunch.shisobu.in/search.cgi>)
      * 一日でつくった
      * 評価表現（ポジティブ、ネガティブの二種）
      * 形態素解析
         * 辞書とマッチさせる
         * 活用語幹を用いる
         * 単語感情極性対応表
      * 精度問題
         * ジャンルごとにネガポジが反転する場合も（「薄い」とか）
      * クリーニング
      * 言語の困難さ
         * 否定表現
            * 「わからない訳でもなくない？」
         * 未知語
            * ヤバい、素で
         * 助詞の省略
         * 複合表現
         * 表記ゆれ
         * 複数評価の混在
            * 一文に含まれる結論が読みにくい
      * 「テキストマイニング」の定義があいまい
         * 目的によって手法が異なる
            * 目的を決め手手法を選ぶこと。
      * QA
         * 名詞より形容詞のほうが未知語になりにくい
         * 皮肉とか大変。


### [@langstat](<http://twitter.com/#!/langstat>) ： 「コピー＆ペーストのみで始めるテキストマイニング超入門」
<div style="width:425px" id="__ss_6973454"><strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/langstat/nicoteki1" title="Nicoteki_1">Nicoteki_1</a></strong><object id="__sse6973454" width="425" height="355"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=nicoteki1-110218081836-phpapp02&stripped_title=nicoteki1&userName=langstat" /><param name="allowFullScreen" value="true"/><param name="allowScriptAccess" value="always"/><embed name="__sse6973454" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=nicoteki1-110218081836-phpapp02&stripped_title=nicoteki1&userName=langstat" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed></object><div style="padding:5px 0 12px">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/langstat">Yuichiro Kobayashi</a>.</div></div>

自然言語処理における一連の解析を、無料のWebサービスを使ってコピペでやってみよう、というもの。
これらのツールがひと通り用意されていることに驚き。ただし、すべて統合したものはないようなので、ぜひ欲しいなと思います。（※APIとかあれば良いのですが…)

   * 無料の解析用テキスト
      * 青空文庫
      * 首相のスピーチテキストとかパブリックドメインのもの
   * 用例検索
   * 日本語形態素解析
      * 形態素解析
          * [日本語形態素解析](<http://cgi.geocities.jp/ydevnet/sample/jlp/sample2/ma_sample.php>)
          * [Morphological Analyzer - Language Grid Playground](<http://www.langrid.org/playground/morphological-analyzer.html>)
              * Mecab/ChaSenとかで試せる
      * 構文解析
          * [Dependency Parser - Language Grid Playground](<http://www.langrid.org/playground/dependency-parser.html>)
          * 構文解析器
              * [CaboCha](<http://chasen.org/~taku/software/cabocha/>)
              * [KNP](<http://www-lab25.kuee.kyoto-u.ac.jp/nl-resource/knp.html>)：格文法
                  * どちらがよいかは好みの問題
      * [日本語文章の頻度分析](<http://hp.vector.co.jp/authors/VA035840/vba/vbafreq.htm>)
         * VBAツール
         * Webサービスではない。
      * [多機能 WEB 計算機](<http://aoki2.si.gunma-u.ac.jp/calculator/>)


### [@gepuro](<http://twitter.com/#!/gepuro>) ： 「初めてのnltk」
<div style="width:425px" id="__ss_6979340"><strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/gepuro/nltk-for-biginer-6979340" title="Nltk for biginer">Nltk for biginer</a></strong><object id="__sse6979340" width="425" height="355"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=nltkforbiginer-110218204954-phpapp01&stripped_title=nltk-for-biginer-6979340&userName=gepuro" /><param name="allowFullScreen" value="true"/><param name="allowScriptAccess" value="always"/><embed name="__sse6979340" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=nltkforbiginer-110218204954-phpapp01&stripped_title=nltk-for-biginer-6979340&userName=gepuro" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed></object><div style="padding:5px 0 12px">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/gepuro">gepuro</a>.</div></div>

学部二年生の発表。
nltkとpython-twitterをつかったテキストマイニング。つまづきにもめげず、テキストマイニングをしてみたようです。Tweetもしたんですけど、挫折も含めて発表するのは、これからはじめてみたい方にとって有益な情報だと思いました。同じつまづきをしないためにも。

### [@bob3bob3](<http://twitter.com/#!/bob3bob3>) ： 「アンケート自由回答のテキストマイニング事例」
発表資料：
  * [「楽しい食事」ってどんな食事？
～ Text Mining Studio を用いた自由回答の分析事例 ～](<http://www.ikic.co.jp/service/pdf/marketing_6.pdf>)

テキストマイニングをどう活用して何を達成するのか、というとても具体的な活用事例でした。私の場合、仕事がWebサービスなのでそっちに興味が偏りがちですが、こういう実生活における分析にも興味を頂きました。アンケートという自由回答形式だからこそ得られるものもあるんですね。

   * 商用テキストマイニングツール
    * 一番安いワードマイナーでも３０万する。
    * 野村総研のツールが６割のシェア。
    * 単語出現頻度分析
      * 表記の違いは辞書つくる
         * ゴールデンウィークとGWなど
      * 名詞、形容詞、動詞に絞る
   * 特徴語分析
      * 補完類似度
   * コレスポンデンス分析
   * QA1
      * コレスポンデンス分析のグルーピングが困難な場合はグルーピングしない
      * 今回はうまくいった
   * QA2
      * あとで「状況」をグループ化しにくい
         * アンケートなら質問を工夫する「〜な時はどうですか？」
         * ブログとかあとから集めて分析する場合は難しい。
   * QA3
      * 女性より男性のほうがアンケートに含まれる単語数が多い傾向
         * グラフで見ると女性のほうが全体的に上回る（単語出現頻度の分析において）
   * QA4
      * ツールのよしあし
         * TRUE TELLERは完成されているが、機能は限定されている。

### 関連エントリ
 * [第１回 にこにこテキストマイニング勉強会 ( #nicoTextMining #1) に参加してきた - hamadakoichi blog](<http://d.hatena.ne.jp/hamadakoichi/20110219/p1>)
 * [第1回にこにこテキストマイニング勉強会に参加しました #nicotextmining - nokunoの日記](<http://d.hatena.ne.jp/nokuno/20110220/1298102734>)
 * [第1回 にこにこテキストマイニング勉強会（#nicoTextMining）に参加してきた - yokkunsの日記](<http://d.hatena.ne.jp/yokkuns/20110219/1298102645>)
 * [にこテキ #1 - コーパスいぢり ～langstatの研究日誌～](<http://d.hatena.ne.jp/langstat/20110219/p1>)

みなさん日記を書くの早すぎです…勉強会が終わった、と思ったらもうエントリされていましたｗ
そのスピード感、見習いたいです。

### 余談
今回からTwitter名刺を用意していきました。Twitterアイコンがプリントされているので、初めてお会いする方もアイコンは見たことあると言って頂けたのが良かったです。勉強会には、会社の名詞よりTwitter名刺が重要ですね。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>667</wp:post_id>
		<wp:post_date>2011-02-20 09:30:52</wp:post_date>
		<wp:post_date_gmt>2011-02-20 00:30:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>attended-nicotextmining-1st</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="nicotextmining"><![CDATA[nicoTextMining]]></category>
		<category domain="post_tag" nicename="nlp"><![CDATA[nlp]]></category>
		<category domain="category" nicename="%e3%83%87%e3%83%bc%e3%82%bf%e3%83%9e%e3%82%a4%e3%83%8b%e3%83%b3%e3%82%b0"><![CDATA[データマイニング]]></category>
		<category domain="post_tag" nicename="%e5%8b%89%e5%bc%b7%e4%bc%9a"><![CDATA[勉強会]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>162</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>nominalyw45@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://deccanhotels.com/ugg27.html</wp:comment_author_url>
			<wp:comment_author_IP>220.161.100.83</wp:comment_author_IP>
			<wp:comment_date>2013-11-28 13:22:45</wp:comment_date>
			<wp:comment_date_gmt>2013-11-28 04:22:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Church in the darkest places, is this three killed countless heretics in folklore already a big executioner level figures, can stop the baby 's name ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>170</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>rxfkwwfb@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://srcworldwidemovers.com/page/oakley-q-30.html</wp:comment_author_url>
			<wp:comment_author_IP>220.161.96.94</wp:comment_author_IP>
			<wp:comment_date>2014-02-10 07:04:31</wp:comment_date>
			<wp:comment_date_gmt>2014-02-09 22:04:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The gods of your acquire is usually a modest destination  |and many others|and so forth|and so on} <a href="http://mrpronto.com/page/coach-q-54.html" rel="nofollow">]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Hadoop conference japan 2011に参加してきた #hcj2011</title>
		<link>http://blog.restartr.com/2011/02/24/attended-hadoop-conference-japan-2011-hcj2011/</link>
		<pubDate>Thu, 24 Feb 2011 00:09:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=703</guid>
		<description></description>
		<content:encoded><![CDATA[Hadoop conference japan 2011に参加してきました。

 * <a href="http://hadoop-conference-japan-2011.eventbrite.com/">Hadoop Conference Japan 2011 - Eventbrite</a>

今回の個人的トピック
<ul>
<li>AWSがHBaseサポート予定</li>
<li>DremelはHadoopの補完的位置づけ</li>
<li>DSLとしてのAsakusaの魅力</li>
<li>AmebaのpatriotはRubyDSLで簡単ジョブ記述</li>
<li>MySQLでもMapReduceできるよ</li>
<li>HBaseを使うとシステムがシンプルになるよ</li>
</ul>

以下、メモ書きです。
<!--more-->


### Hadoop on クラウド / Amazon Elastic MapReduceの真価
<div style="width:425px" id="__ss_7006529"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/kentamagawa/amazon-elastic-mapreduce" title="Amazon Elastic MapReduceの紹介(英語)">Amazon Elastic MapReduceの紹介(英語)</a></strong> <object id="__sse7006529" width="425" height="355"> <param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=aws2011q1elasticmapreducev2-110221205244-phpapp01&stripped_title=amazon-elastic-mapreduce&userName=kentamagawa" /> <param name="allowFullScreen" value="true"/> <param name="allowScriptAccess" value="always"/> <embed name="__sse7006529" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=aws2011q1elasticmapreducev2-110221205244-phpapp01&stripped_title=amazon-elastic-mapreduce&userName=kentamagawa" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed> </object> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/kentamagawa">玉川憲 (Ken Tamagawa) - Amazon Web Services</a> </div> </div>
 * 11:30～12:05
 * Amazon Web Services, Jeff Barr ( @jeffbarr )
 * EMR removes 'MUCK'(=ぬかるんだ感じ) from big data operation
   * hard to manage, tuning, monitoring, debug
 * issues  prevent operation in cloud
 * instance types
   * data or I/O intensive
   * compute or I/O intensive
 * BestBuy
   * 100 node on demand
   * 3.5 billion records, 71 million unique cookies.
   * increased ROAS(returns of advertising spend) by 500%
 * QA
   * HBaseのサポートもやります。

### MapReduceによる大規模データを利用した機械学習
<div style="width:425px" id="__ss_7022974"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/pfi/mapreduce-7022974" title="MapReduceによる大規模データを利用した機械学習">MapReduceによる大規模データを利用した機械学習</a></strong> <object id="__sse7022974" width="425" height="355"> <param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=hadoopconference2011okanohara-110222203754-phpapp01&stripped_title=mapreduce-7022974&userName=pfi" /> <param name="allowFullScreen" value="true"/> <param name="allowScriptAccess" value="always"/> <embed name="__sse7022974" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=hadoopconference2011okanohara-110222203754-phpapp01&stripped_title=mapreduce-7022974&userName=pfi" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed> </object> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/pfi">PFI Marketing </a> </div> </div>
 * 12:05～12:40
 * 株式会社Preferred Infrastructure, 岡野原 大輔 ( @hillbig )
 * mahout
  * 大規模分散並列処理
 * グラフィカルモデル
  * 写真の人物切り出しとか、これでできる
 * グラフィカルモデルの推論は一般に困難
  * [S, Singh LCCC 2010]
 * 数値最適化の並列分散化
  * 最適なのは[Iterative Parameter Mixture]
   1. データ分割してshardに配布
   2. shardごとに最適化
   3. 全部のθの平均をとる
   4. θを再度各shardに配り１からくりかえす
 * Dremel
  * MRにくらべて低レイテンシ
  * 簡単な統計処理のみ
  * クエリ言語はSQL
  * top-k, joinなども可能
  * use 6 years in google
  * クロール、障害分析などに利用
 * 列志向DB
  * 木構造に列志向を導入
  * M/Rの補助にDremel
 * 使い分け
  * データの構築コストは高い

### モバゲーの大規模データマイニング基盤におけるHadoop活用
<div style="width:425px" id="__ss_7009088"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/hamadakoichi/hadoop-hadoop-conference-japan-2011-hcj2011" title="モバゲーの大規模データマイニング基盤におけるHadoop活用－Hadoop Conference Japan 2011－ #hcj2011 ">モバゲーの大規模データマイニング基盤におけるHadoop活用－Hadoop Conference Japan 2011－ #hcj2011 </a></strong> <object id="__sse7009088" width="425" height="355"> <param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=dataminingmbgahadoopconference2011-110222022814-phpapp02&stripped_title=hadoop-hadoop-conference-japan-2011-hcj2011&userName=hamadakoichi" /> <param name="allowFullScreen" value="true"/> <param name="allowScriptAccess" value="always"/> <embed name="__sse7009088" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=dataminingmbgahadoopconference2011-110222022814-phpapp02&stripped_title=hadoop-hadoop-conference-japan-2011-hcj2011&userName=hamadakoichi" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed> </object> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/hamadakoichi">Koichi Hamada</a> </div> </div>
 * 13:40～14:15    
 * 株式会社ディー・エヌ・エー,  濱田 晃一( @hamadakoichi )
 * DeNA: 2010/07 23億のアクティビティ
 * データマイニング基盤
    * KPI定常算出・共有
    * 変化の検知基盤
  * Business Planning
    * 意思決定
  * Service
    * Hadoop
    * DFS
  * 全行動ログを統一形式で蓄積
 * 適用範囲
  * Pig
     * 一時的なもの、BI
  * Zebra
     * スキーマ管理（＋Pig）
  * M/R
     * JavaだけでなくPerlでも。
     * ゲームの分散シミュレーション
  * R
     * 二次集計
     * データマイニング
     * Streamingもあわせて活用
  * Mahout
     * データマイニング＆機械学習
  * DeNA Datamining libraries
     * 独自レコメンドエンジン
 * Tuning
  * LZOなど最適化
  * Pig
    * Partitioner実装最適化
    * 多段M/RのTempを圧縮
    * 独自UDF
    * 汎用の日次処理や文字列処理、ソーシャル用の独自Mapも。
    * 共通ログ：Loader
  * Mahout
    * 目的に応じた組み合わせ、ジョブの実装
 * 楽しさ
   * 統計的有意
   * 多くの人々への還元（２３００万ユーザー）
   * 感情を伴った行動情報
   * ユーザーのソーシャル体験への還元
   * パターン
   * 楽しさ：夢中になるきっかけ
 * 健全なプラットフォームへ
   * 不正書きこみの判別、年齢詐称の判別
   * ユーザーの声
   * テキストマイニング
 * 統一の行動記述
 * 重要な要素
   * Hadoop上にすべてある。
   * 記述が統一されている
   * すべてがHadoop上に統一されている
   * 解析に力を入れることができる

### Enterprise Batch Processing Framework for Hadoop
<div style="width:425px" id="__ss_7021975"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/okachimachi/asakusa-enterprise-batch-processing-framework-for-hadoop" title="Asakusa Enterprise Batch Processing Framework for Hadoop">Asakusa Enterprise Batch Processing Framework for Hadoop</a></strong> <object id="__sse7021975" width="425" height="355"> <param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=asakusa2011-2-22disclosed-110222174121-phpapp01&stripped_title=asakusa-enterprise-batch-processing-framework-for-hadoop&userName=okachimachi" /> <param name="allowFullScreen" value="true"/> <param name="allowScriptAccess" value="always"/> <embed name="__sse7021975" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=asakusa2011-2-22disclosed-110222174121-phpapp01&stripped_title=asakusa-enterprise-batch-processing-framework-for-hadoop&userName=okachimachi" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed> </object> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/okachimachi">okachimachi</a> </div> </div>
 * 14:15～14:50     
 * ウルシステムズ株式会社, 神林 飛志( @okachimachiorz1 )
 * Asakusa
   * 基幹バッチ
   * 夜間バッチゼロ。
   * Hadoopは開発手法や運用に問題有り。
   * Pig/Hiveでは足りない
   * DAGベースの多層DSL
   * TX/Rollback制御をHadoopの外（Asakusa）でやる
   * MRコンパイラ
     * Ashigel
     * 運用スクリプトまではく。
   * ModelGenerator
   * データ層の自動化
   * テストのインテグレーション

### Hiveを用いたAmebaサービスのログ解析共通基盤
<div style="width:425px" id="__ss_7014518"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/toutouzone/hadoop-conferencejapan2011" title="Hadoop conferencejapan2011">Hadoop conferencejapan2011</a></strong> <object id="__sse7014518" width="425" height="355"> <param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=hadoopconferencejapan2011-110222063021-phpapp01&stripped_title=hadoop-conferencejapan2011&userName=toutouzone" /> <param name="allowFullScreen" value="true"/> <param name="allowScriptAccess" value="always"/> <embed name="__sse7014518" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=hadoopconferencejapan2011-110222063021-phpapp01&stripped_title=hadoop-conferencejapan2011&userName=toutouzone" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed> </object> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/toutouzone">Ichiro Fukuda</a> </div> </div>
 * 14:50～15:25
 * 株式会社サイバーエージェント, 福田 一郎( @toutou )
 * Blog: [http://ameblo.jp/principia-ca/entry-10635727790.html](<http://ameblo.jp/principia-ca/entry-10635727790.html>)
 * 非エンジニア向け
 * hadoop実績
  * pigg：HDFS
  * pico：ログ解析にEMR/Pig
  * アクセス解析(0.13.1)
 * 解析基盤partiot
  * 独自に解析してるけどだいたい定形
  * サービス全体の統合的な現状把握と未来予測
  * 結果の表示にpatriot
  * アドホック集計にhue
 * patriot
  * CDH3b1
  * puppet/nagios/ganglia
  * ext_js/hue/hinemos
  * gzip/sequenceFileのブロック単位圧縮
  * インポート：scp/hdfs get
 * importDSL
  * log
   * 600job/daily
   * 700job/monthly
   * record 1300万以上
   * 前処理を３〜４時間
 * Replication
   * clusterをmaster/slaveにする
   * slaveを非エンジニアに利用させる

### ライトニングトーク
 * 15:40～16:30

#### 分散ファイルシステムGfarm上でのHadoop MapReduce
<div style="width:425px" id="__ss_7029061"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/shun0102/h-7029061" title="分散ファイルシステムGfarm上でのHadoop MapReduce">分散ファイルシステムGfarm上でのHadoop MapReduce</a></strong> <object id="__sse7029061" width="425" height="355"> <param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=hcj2011-110223050641-phpapp01&stripped_title=h-7029061&userName=shun0102" /> <param name="allowFullScreen" value="true"/> <param name="allowScriptAccess" value="always"/> <embed name="__sse7029061" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=hcj2011-110223050641-phpapp01&stripped_title=h-7029061&userName=shun0102" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed> </object> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/shun0102">shun0102</a> </div> </div>
 * Shunsuke Mikami( @shun0102 )
 * GlusterFS
 * Ceph: 高負荷で固まる
 * Lustre,PVFS2
 * GFarm: ≒HDFS
   * 複製の作成は同期的
 * 他FSの利用
   * JNIのlayer　／　マウント
 * GlusterFS
   * マスターなし
   * FUSEベース
 * HDFS>HDFS(3reps)>GlusterFS

#### MySQLにMapReduceジョブトラッカを実装する
 * Sadayuki Furuhashi( @frsyuki )

### Hadoop and HBase for ranking processing at Rakuten
 * Yifeng Jiang( @uprush )
 * Hadoop
  * リアルタイムから年次まで。
  * mutable data⇛扱いにくい
 * HBase
  * usecase
  * pig: realtime ranking
  * 100 pure java jobs per day
 * HBase
  * soft realtime access
  * 40x faster on ranking contents
 * before
  * DB -> HDFS
  * table split is boring
 * after
  * data go to hBase, the processed by MR
  * 1.5k rows insert /s
  * 0.3M rows scan /s
  * system become simple
 * balance
  * HW
  * OS resources
  * config
  * application design

#### Sneak Preview of "Hapyrus" ~ Hadoopアプリ開発＆共有サービス on the CLOUD
<div style="width:425px" id="__ss_7038404"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/fujibee/hadoop-conference-japan-2011-lt-hapyrus" title="Hadoop Conference Japan 2011 LT Hapyrus">Hadoop Conference Japan 2011 LT Hapyrus</a></strong> <object id="__sse7038404" width="425" height="355"> <param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=hadoopconferencejapan2011ltnomovie-110223203652-phpapp02&stripped_title=hadoop-conference-japan-2011-lt-hapyrus&userName=fujibee" /> <param name="allowFullScreen" value="true"/> <param name="allowScriptAccess" value="always"/> <embed name="__sse7038404" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=hadoopconferencejapan2011ltnomovie-110223203652-phpapp02&stripped_title=hadoop-conference-japan-2011-lt-hapyrus&userName=fujibee" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed> </object> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/fujibee">Koichi Fujikawa</a> </div> </div>
 * Fujikawa Koichi( @fujibee )
 * 敷居が高い（セットアップ⇛M/R⇛運用の工数）
 * Hapyrus
   * サイト：[http://hapyrus.com/](<http://hapyrus.com/>)
   * デモビデオ: [http://www.youtube.com/watch?v=1cF-1tcapvE](<http://www.youtube.com/watch?v=1cF-1tcapvE>)
   * ホスティング（＝EMR）
   * ディストリビューション＝マーケットプレイス
   * 基本無料

#### Bonding とネットワークスループット
 * Takahiro Kaneko
 * 802.3ad + src-dst-id

#### Yuuna Kurita: Hadoop+MongoDBでRで出力する時にRubyでミドルウェアを使う


※これ以降も有用な発表でしたがバッテリー切れのためメモはなしです…orz※

### マルチユーザーでHadoop環境を利用するためのポイント
 * 16:30～17:05
 * 株式会社NTTデータ, 山下 真一

### Hadoopと分析統計ソフトKNIMEを用いた効率的データ活用
 * 17:05～17:40
 * 株式会社リクルート, 中野 猛


### 関連エントリ
 * [http://togetter.com/li/104169](<http://togetter.com/li/104169>)
 * [http://d.hatena.ne.jp/nokuno/20110222/1298364343](<http://d.hatena.ne.jp/nokuno/20110222/1298364343>)
 * [http://d.hatena.ne.jp/hamadakoichi/20110222/p1](<http://d.hatena.ne.jp/hamadakoichi/20110222/p1>)
 * [http://d.hatena.ne.jp/seikoudoku2000/20110222/1298379932](<http://d.hatena.ne.jp/seikoudoku2000/20110222/1298379932>)
 * [http://diary.overlasting.net/2011-02-22-1.html](<http://diary.overlasting.net/2011-02-22-1.html>)

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>703</wp:post_id>
		<wp:post_date>2011-02-24 09:09:42</wp:post_date>
		<wp:post_date_gmt>2011-02-24 00:09:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>attended-hadoop-conference-japan-2011-hcj2011</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hadoop"><![CDATA[hadoop]]></category>
		<category domain="category" nicename="hadoop"><![CDATA[hadoop]]></category>
		<category domain="post_tag" nicename="%e5%8b%89%e5%bc%b7%e4%bc%9a"><![CDATA[勉強会]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>43</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Hadoop conference japan 2011に参加してきた #hcj2011 | ReSTARTR -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/blog.restartr.com/2011/02/24/attended-hadoop-conference-japan-2011-hcj2011/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2011-02-24 09:39:10</wp:comment_date>
			<wp:comment_date_gmt>2011-02-24 00:39:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  This post was mentioned on Twitter by kimukou_26 and ジェイムズ・御徒町・ブッカー, Masaki YOSHIDA. Masaki YOSHIDA said: ブログ書きました＞ Hadoop conference japan 2011に参加してきた #hcj2011 http://bit.ly/eM2RsQ     [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>ScalaからMongoDBへアクセスする - Casbah編</title>
		<link>http://blog.restartr.com/2011/03/07/access-to-mongodb-in-scala-with-casbah/</link>
		<pubDate>Sun, 06 Mar 2011 23:45:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=722</guid>
		<description></description>
		<content:encoded><![CDATA[ここ２，３日、ScalaからMongoDBへのアクセスのため、CasbahとSalatをお試し中です。

もともとはAkkaを弄ってたんですが、Akkaに含まれるPersistent(MongoDBなどNoSQLへの接続用)がなくなるらしいので、別のがないかなー、と寄り道したのがきっかけです。

<h3>Casbah</h3>
MongoDBを開発している10gen謹製Scalaライブラリです。
Scala製のドライバは他にもLiftの<a href="http://www.assembla.com/wiki/show/liftweb/MongoDB">MongoDB</a>や、Liftと組み合わせて使う<a href="http://engineering.foursquare.com/2011/01/21/rogue-a-type-safe-scala-dsl-for-querying-mongodb/">Rogue</a>、mongo-java-driverのラッパーの<a href="http://github.com/alaz/mongo-scala-driver">mongo-scala-driver</a>などがあります。
一覧は以下に掲載されています。

<a href="http://github.com/alaz/mongo-scala-driver">Java Language Center - MongoDB</a>

Rogueについては、Fungoingのbibrostさんのブログが詳しいのでそちらをご覧ください。

<a href="http://fungoing.blogspot.com/2011/02/liftscala-dslroguemongodb.html">Fungoing Labs: Lift用Scala DSL"Rogue"を使ってMongoDBにアクセス（１）〜概要編〜</a>

なぜ、LiftのMongoDBなりRogueなりを使わなかったかというと、フレームワークに依存したくなかったからです。単体で動作するものが使いたいのです。なので、Casbahを選択しました。
が、Casbahだけだと、複雑なレコードを作成するのには少々面倒なところがあります。ORマッパーが欲しくなるのです。その解決策となるSalatがあります。今回はCasbahのまとめにとどめ、Salatについては後日改めてまとめようと思います。

<blockquote>
※追記※<br />
Salat編を書きました。<br />
<a href="http://blog.restartr.com/2011/03/09/access-to-mongodb-in-scala-with-salat/">ScalaからMongoDBへアクセスする – Salat編</a></blockquote>



では、Casbahの使い方について見ていきます。

<!--more-->
<h3>インストール</h3>
sbtの設定はこんな感じです。
project/build/SalatTestProject.scala
<script src="https://gist.github.com/857260.js?file=SalatTestProject.scala"></script>

そしたら、sbtプロンプトでreload, updateをします。

これで、project/lib_managed/scala_2.x.x/compile以下にjarファイルが読み込まれるはず。

<h3>CasbahでMongoDBへアクセス</h3>
目次は以下の通りです。
<ul>
<li>MongoDBObjectの作成</li>
<li>ドキュメントの検索</li>
<li>ドキュメントのJOIN</li>
<li>ListObjectの生成</li>
<li>クエリの構築</li>
<li>クエリの構築(DSLを利用)</li>
</ul>

<h4>MongoDBObjectの作成</h4>
Casbahでは、MongoDB上のドキュメントをMongoDBObjectとして取り扱います。

MongoDBObjectをインスタンス化する、もしくはMongoDBObjectBuilderで逐次フィールドを定義するかのどちらかになります。
[ccW_scala]
// MongoDBObjectをインスタンス化
val user = MongoDBObject("id"->1, "name"->"me")
println(user) // { "id" : 1 , "name" : "me"}

// MongoDBObjectBuilderで逐次フィールド定義
val builder = MongoDBObject.newBuilder
builder += "id"->2
builder += "name"->"you"
val user2 = builder.result // これでMongoDBObjectができる
[/ccW_scala]

できたら、これをMongoDBに保存します。

まずはコレクションのインスタンス取得から。
[ccW_scala]
val conn = MongoConnection() 
// MongoConnection("localhost", 27017)でホストおよびポート指定が可能
val db = conn("casbah_test")
val collection = db("sample")
[/ccW_scala]
下記のように１行にまとめてもでもOKです。
[ccW_scala]
val collection = MongoConnection()("casbah_test")("sample")
[/ccW_scala]

で、コレクションに保存します。「+=」を使うだけと、とてもシンプルな操作になっています。
[ccW_scala]
collection += user // { "_id" : ObjectId("4d7385ebf21423dcecb4c578"), "id" : 1, "name" : "me" }
collection += user2 // { "_id" : ObjectId("4d7385ebf21423dcedb4c578"), "id" : 2, "name" : "you" }
[/ccW_scala]

<h4>ドキュメントの検索</h4>
保存したドキュメントを全件取得します。mongodbのコンソールでいう、db.collection.find()にあたる操作です。
[ccW_scala]
collection.find().foreach { println(_) }
[/ccW_scala]

<h4>ドキュメントのJOIN</h4>
MongoDBでJoinはできないので、アプリ側で対処する場合に使うんでしょうかね。

やり方は、MongoDBObjectを「++」でつなぐだけ。簡単です。
[ccW_scala]
val identity = MongoDBObject("name"->"me", "age"->27)
val address = MongoDBObject("country"->"Japan", "prefecture"->"Tokyo")
val user = identity ++ address
println(user) // { "age" : 27 , "country" : "Japan" , "prefecture" : "Tokyo" , "name" : "me"}
[/ccW_scala]

<h4>ListObjectの生成</h4>
List(javascriptでいうArrayのこと)はMongoDBListでつくります。
[ccW_scala]
val users1 = MongoDBList(
  MongoDBObject("name"->"me"),
  MongoDBObject("name"->"you"))
println(users1) // [ { "name" : "me"} , { "name" : "you"}]
[/ccW_scala]
当然ですが、Listの要素（MongoDBListの引数は）MongoDBObjectだけでなく、文字列や数値もOKです。

でListの場合もBuilder経由で作成が可能です。
[ccW_scala]
val users = MongoDBList.newBuilder
val user1 = MongoDBObject("name"->"me")
val user2 = MongoDBObject("name"->"you")
users += user1
users += user2
println(users.result) // [ { "name" : "me"} , { "name" : "you"}]
[/ccW_scala]

<h4>クエリの構築</h4>
[ccW_scala]
// 取得条件を指定
val condition = MongoDBObject("name"->"me")
collection.find(condition).foreach( println )

// 取得フィールドを限定
val fields = MongoDBObject("id"->1)
collection.find(condition, fields).foreach( println )

// 条件の指定をせずに取得フィールドのみ限定する場合
val conditionEmpty = MongoDBObject.empty
collection.find(conditionEmpty, fields).foreach( println )
[/ccW_scala]

<h4>クエリの構築(DSLを利用)</h4>
$exists, $gt, $ltなど、以下にあるものはDSLとして使えるらしいです。
<ul><li><a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperators">Advanced Queries - MongoDB</a></li></ul>
findの引数にDSLを使って記述します。複数条件を組み合わせる場合は「++」でつなげます。
[ccW_scala]
collection.find( "name" $exists true ).foreach{ println }

// 組み合わせる場合は"++"でつなげる
collection.find( ("name" $exists true) ++ ("age" $gte 20 $lt 30 ) ).foreach{ println }
[/ccW_scala]
『("age" $gte 20) ++ ("age" $lt 30)』と書かなくても、『("age" $gte 20 $lt 30 ) 』とかけるので記述量がへって良いですね。

あと、追加ですけど、１ドキュメントのみ取得したい時はfindOneが使えます。
[ccW_scala]
val obj = collection.findOne().get // Option[DBObject]からDBObjectを取り出すためにgetを呼ぶ
println(obj("name")) //me
[/ccW_scala]

以上、かんたんにSasbahの使い方についてまとめてみました。

<h3>関連リンク</h3>
<ul>
<li><a href="https://github.com/mongodb/casbah">GitHub</a></li>
<li><a href="http://api.mongodb.org/scala/casbah/2.0.2/tutorial.html">Casbahチュートリアル</a></li>
<li><a href="http://api.mongodb.org/scala/casbah/2.0.2/scaladoc/">ScalaDoc (casbah-core v2.0.2)</a></li>
</ul>

ちなみに、細切れで説明した上記サンプルプログラムの全体を以下に掲載しておきます。

※convertObjectTypeメソッドの中身については現在検証中です(；・∀・)
<script src="https://gist.github.com/857260.js?file=CasbahSample.scala"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>722</wp:post_id>
		<wp:post_date>2011-03-07 08:45:28</wp:post_date>
		<wp:post_date_gmt>2011-03-06 23:45:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>access-to-mongodb-in-scala-with-casbah</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="casbah"><![CDATA[casbah]]></category>
		<category domain="post_tag" nicename="mongodb"><![CDATA[mongodb]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>ScalaからMongoDBへアクセスする - Salat編</title>
		<link>http://blog.restartr.com/2011/03/09/access-to-mongodb-in-scala-with-salat/</link>
		<pubDate>Wed, 09 Mar 2011 00:00:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=749</guid>
		<description></description>
		<content:encoded><![CDATA[前回はCasbahというライブラリを使ってMongoDBへアクセスしてみました。

<a href="http://blog.restartr.com/2011/03/07/access-to-mongodb-in-scala-with-casbah/">ScalaからMongoDBへアクセスする – Casbah編</a>

今回は、Casbahに加えて、<a href="https://github.com/novus/salat">Salat</a>というライブラリをを組み合わせて、より便利にMongoDBとScalaとやりとりをする方法について見ていきます。

<h3>Salat</h3>

<a href="https://github.com/novus/salat">novus/salat - GitHub</a>

Salatは、CasbahのMongoDBObjectとscalaのケースクラスと相互変換してくれる、ORマッパーです。wikiから引用するとこうあります。
<blockquote>
Salat is a bi-directional Scala case class serialization library that leverages MongoDB's DBObject (which uses BSON underneath) as its target format. This project is focused on fostering a DWIM and intuitive usage pattern for the end-user's benefit, without sacrificing run time performance.
</blockquote>
パフォーマンスの犠牲なしに、より便利にMongoDBとやりとりできるというものらしいです。DWIMって初耳なんですが、"Do What I Mean."の略語だそうです。意図したとおりに動いてくれる、くらいの意味でしょうか。
あと、「Salat」って、ロシア語で「サラダ」の意味だそうです。

では、Salatの簡単な使い方を見ていきます。

<!--more-->
<h3> インストール </h3>
今回もsbt前提です。
<script src="https://gist.github.com/860266.js?file=SalatTestProject.scala"></script>
CasbahとSalatどちらも必要です。今回はCasbahは2.0.2を、Salatは0.0.5を利用します。あとはいつものように"sbt reload update"を実行するだけです。

<h3>CasbahでMongoDBへアクセス</h3>
まずはCasbaとSalatをインポート。
[ccW_scala]
import com.novus.salat._
import com.novus.salat.global._
import com.mongodb.casbah.Imports._
[/ccW_scala]

CasbahのみでMongoDBに入れる例を復習します。
[ccW_scala]
val collection = MongoConnection()("salat_test")("sample")
collection += MongoDBObject("id"->1, "name"->"me", "age"->27)
println(collection.findOne( MongoDBObject("id"->1)).get )
// { "_id" : { "$oid" : "4d76475ce10d23dcda26857d"} , "id" : 1 , "name" : "me" , "age" : 27}
[/ccW_scala]
で、このような値がすでにMongoDBに入っているとして、それぞれのフィールドにアクセスする場合、以下のようになります。
[ccW_scala]
val me2 = collection.findOne( MongoDBObject("id"->1)).get
println( me2.getClass ) // class com.mongodb.BasicDBObject
println( me2.get("name") ) // me
[/ccW_scala]
最後の"me2.get("name")"というのが格好悪いですね。もしかしたらDBから取り出したときに"name"というキーが存在しないかもしれません。ということで、そのフォーマットをケースクラスで定義できるSalatの出番です。
Salatでは、grater[<Type>]のインスタンスを用いてMongoDBObjectとケースクラスの変換を行います。シリアライズは
DBに保存する際は「asDBObject」メソッドで取り出してクラスインスタンスとして扱う場合は「asObject」メソッドを使います。

まずはクラスインスタンスをDBに入れる例。

Userというケースクラスを定義して、graterを用いてDBObjectに変換しています。
[ccW_scala]
case class User(id: Int, name: String, age: Int)

val me = User(id=2, name="me2", age=54)
val g = grater[User]
collection += g.asDBObject(me)
[/ccW_scala]

つぎに、DBからとりだした値をクラスインスタンスに変換する例です。
[ccW_scala]
val meInDB = collection.findOne( MongoDBObject("id"->2)).get 
println( meInDB.getClass )
// class com.mongodb.BasicDBObject
println( meInDB )
// { "_id" : { "$oid" : "4d764830e10d23dc4758c29a"} , "_typeHint" : "User" , "id" : 2 , "name" : "me2" , "age" : 54}
println( g.asObject(meInDB) )
// User(2,me2,54)
[/ccW_scala]
このように、ケースクラスへのマッピングが行われることにより、Scalaのコード中で扱うMongoDBのドキュメントの型が明確になり、見通しがよくなります。

「asObject(meInDB)」で変換する前の、DBからとりだしたままの状態(BasicDBObject型)の段階で
<blockquote>
"_typeHint" : "User"
</blockquote>
というキーと値が見えます。この値がこのドキュメントに対応するクラス型を定義することになります。

<h4>問題点：意図しないケースクラスへの変換</h4>
別のケースクラスに変換しようとするとどうなるでしょうか。
[ccW_scala]
case class UserA(id: Int, name: String, age: Int)
println( grater[UserA].asObject(meInDB) ) // UserA(2,me2,54)
case class UserB(id: Int, name: String, salary: Int)
println( grater[UserB].asObject(meInDB) )
// java.lang.Exception: class UserB requires value for 'salary'
[/ccW_scala]
クラス名が違うUserAに変換しようとすると変換できてしまいます。キー名が異なるUserBに変換しようとした場合はコンパイルエラーとなります。「_typeHint」の値がうまく機能しているのか、少々疑問が残ります…

<h4>問題点：クラス階層の保持</h4>
また、クラス階層をもつ場合がテストケースにあるのですが、これも微妙な挙動をします。

<a href="https://github.com/novus/salat/blob/master/salat-core/src/test/scala/com/novus/salat/test/model/TestModel.scala">salat-core/src/test/scala/com/novus/salat/test/model/TestModel.scala at master from novus/salat - GitHub</a>

上記はテストケース用のモデル定義なのですが、Desmondのように別クラスの型を保持するケースクラスをDBObjectに変換する際に、Desmond型は保持できるのですが、それに含まれるAlice型が保持できずにリストに変換されてしまいます。

こんな感じのコードで試してみました。
[ccW_scala]
case class Group(group_id: Int, name: String, leader: User, members: List[User])

val me = User(id=11, name="me", age=27)
val you = User(id=12, name="you", age=30)
val members = MongoDBList.newBuilder
members += me
members += you
val group = Group(group_id=1, name="you and me", leader=me, members=List(me, you))
println(group)
// Group(1,you and me,List(User(11,me,27), User(12,you,30)))

println(grater[Group].asDBObject(group))
// // { "_typeHint" : "Group" , "group_id" : 1 , "name" : "you and me" , "leader" : [ 11 , "me" , 27] , "members" : [ [ 11 , "me" , 27] , [ 12 , "you" , 30]]}
[/ccW_scala]
DBObjectに変換すると、leaderの値やmembersのList要素がリストに変換されてます。
このままMongoDBに保存して、それを取り出したあとで"grater[Group].asObject(group)"しようとするとエラーになります。

まだ触り始めたばかりでGithubのWikiもちゃんと読み込んでないので、扱い方が違っているのかもしれません。引き続き動作検証をすすめたいと思います。（結局、Rogueを使うというオチになりそうな気がしないくもないですが…）

<h3>関連リンク</h3>
<ul>
<li><a href="https://github.com/novus/salat/wiki/Quick-start">Quick start - GitHub</a></li>
</ul>

今回も一応全コードを掲載しておきます。
<script src="https://gist.github.com/860266.js?file=SalatSample.scala"></script>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>749</wp:post_id>
		<wp:post_date>2011-03-09 09:00:38</wp:post_date>
		<wp:post_date_gmt>2011-03-09 00:00:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>access-to-mongodb-in-scala-with-salat</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="casbah"><![CDATA[casbah]]></category>
		<category domain="post_tag" nicename="mongodb"><![CDATA[mongodb]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>130</wp:comment_id>
			<wp:comment_author><![CDATA[yamamoto2012]]></wp:comment_author>
			<wp:comment_author_email>do.luck.club@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.180.234.16</wp:comment_author_IP>
			<wp:comment_date>2012-07-19 17:05:02</wp:comment_date>
			<wp:comment_date_gmt>2012-07-19 08:05:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[こんにちは。非常に有用な情報をありがとうございます。
さて、クラス名が違うUserAに変換しようとすると変換できてしまう件ですが、Scalaで言うところのStructured typingになっている
気がします。UserBの型が違うというならtype mismatchが出るはずですが、 class UserB requires value for 'salary'
となっており、構造をチェックしているように見えますので。
Structured typingという事なら、単純な型チェックより融通がきいてMongoDBを使うには便利だと思います。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1342685102.81";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1343029057.9022";s:7:"message";s:52:"admin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>大震災を通じて感じた違和感</title>
		<link>http://blog.restartr.com/2011/03/16/i-feel-a-wrongness-about-terrible-disaster/</link>
		<pubDate>Wed, 16 Mar 2011 13:09:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=772</guid>
		<description></description>
		<content:encoded><![CDATA[大震災から早くも５日が経過しました。

私は東京で震度５を体験しました。感じたあの揺れの大きさは今も鮮明に残っています。現在も余震が続いていたり、様々な二次災害が続いていますが、これまでに感じた違和感を書きだしてみました。

全然まとめにもなっていないし、多くは「感覚値」でしかないですが。

<h3>情報の信ぴょう性</h3>
テレビというかマスコミの信ぴょう性って今に始まったことではないですよね？

今回の地震を発端としてさらにひどさが際立っているのは確かだけれど、受け手の判断基準に任されているというのはこれまでと同じ。テレビは「正しいことを伝える媒体」ではなく「話題を提供する媒体」でしかないと思います。

※いま話題になっている事柄についての意見はここでは述べるのは辞めておきます。

<h3>ソーシャルメディア上の振る舞い</h3>
で、Twitterなどソーシャルメディアにおいても同様。

地震発生後から、TL上にとにかくたくさん知らないアカウントのツイートが嫌というほど流れてきた。
現在は落ち着き始めているものの、まだ多いのは確か。RTされるツイートには、感動話、批判話、同情話、ネタなどさまざまで、無責任なRTで溢れかえっていたというのが正直な感想。そもそも、「あんた、誰よ？」。

プライベートで使用しているアカウントではアーティストを中心にフォローしているのだけれど、この人達のRTがひどい。拡散希望を募り、自分のアカウントを媒体にRTしまくる。行方不明者が見つかるかもしれないという可能性は否定できないけど、その拡散の責任を負うのはアーティスト達ではない気がします。

RTされて有難いと思えたのは、被災地の画像でした。事実としてそこに存在する被災風景。気ままで演出好きなだけのマスコミからは伝えられないその事実を伝えようとしてくれることには感謝したいです。


<h3>次々と立ち上がる被災支援Webサービス</h3>
地震が起きてまもなくGoogleがperson-finderというサービスを立ち上げ、そのスピードには驚きました。
そしてその後たくさんの被災関連のサイトが乱立。Twitterのツイートを被災地ごとに整理するのもや、特定のハッシュタグをまとめるもの、独自のハッシュタグでのツイートを強いるものや、独自データベースに情報を登録してくださいというものなど。

「なんとか役に立ちたい」という気持ちは理解できるけど、利用者としてはどれを使ったらよいのかわからないのでは。結局GoogleやYahooが提供してくれる情報サイトに落ち着いているのではないでしょうか。

やるべきことは、「データベースの集約」と「情報入手経路（媒体）の充実化」では。

そもそも、生み出したそのwebサービス、役目を終えるまでメンテを続けられますか？


<h3>危惧していること</h3>
というか、揺れたときみんなツイートしすぎｗ

ツイートするのに必死で、逃げ遅れたとか笑えないですよ…]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>772</wp:post_id>
		<wp:post_date>2011-03-16 22:09:05</wp:post_date>
		<wp:post_date_gmt>2011-03-16 13:09:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>i-feel-a-wrongness-about-terrible-disaster</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>ScalaとJetty7のWebSocketでリアルタイムチェックインマップを作ってみた</title>
		<link>http://blog.restartr.com/2011/04/06/realtime-checkin-map-build-with-scala-and-jetty7-websocket/</link>
		<pubDate>Wed, 06 Apr 2011 00:00:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=799</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blog.restartr.com/wp-content/uploads/2011/04/check-in-map-screenshot.png"><img src="http://blog.restartr.com/wp-content/uploads/2011/04/check-in-map-screenshot.png" alt="チェックインマップのスクリーンショット" title="チェックインマップのスクリーンショット" width="619" height="441" class="alignnone size-full wp-image-800" /></a>

最近、会社の組織変更に伴い新グループに移動しました。<br />
その際、グループ内の自己紹介用に作ったものをGithubに上げてみました。<br />
動いているものを公開したかったのですが永続的に公開できる場所がないのでソース公開のみです。

<ul>
<li><a href="https://github.com/ReSTARTR/checkin_map"> ReSTARTR/checkin_map - GitHub </a></li>
</ul>

以前scala advent calender 2010で「<a href="http://blog.restartr.com/2010/12/29/websocket-server-written-in-scala-with-netty/">NettyでWebSocketサーバーを実装する</a>」にてWebSocketサーバーを実装してましたが、今回はJettyを使っての実装にしてみました。

pub/subモデルもどきを採用してみたりしましたが、正直勉強不足でうまい実装方法ができていないのが現状。<br />
少しづつリファクタリングしたいところ。<br />
コメントやフォークでのツッコミいただけると大変嬉しいです。

実行方法
----
こちらに実行方法を記述してる通りにやれば動作するはず。
<ul>
<li><a href="https://github.com/ReSTARTR/checkin_map/blob/master/README.md">https://github.com/ReSTARTR/checkin_map/blob/master/README.md</a></li>
</ul>

仕組み
----
 * TwitterのStreamingAPIを使って、foursquareのチェックインツイートを取得
 * それをWebsocket経由で地図にリアルタイムプロット

Jetty7を使うに当たって
----
今のところ、sbt-0.7.5RC1 + jetty7.3.1.v20110307で動作確認済みです。

jetty7.3のwebsocketを使うには、sbt-0.7.5RC以上を使わないといけないようです。<br />
sbt0.7.4だとjetty7.1までしかコンパイルできず、jetty7.1だとwebsocketの最新仕様にあってなくてソケットオープン時にコケます。<br />
(このあたりの組み合わせは記憶があいまいですが。。。）

scalaのjsonオブジェクトではなくsjsonを使うこと
----
scala.util.parsing.json.JSONをつかってシリアライズすると、javascript側でのevalに失敗します。<br />
（原因はクオート処理しないため。）<br />
Scala内で完結するならまだしも、JavaScriptへ転送する場合はsjsonが良いようです。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>799</wp:post_id>
		<wp:post_date>2011-04-06 09:00:50</wp:post_date>
		<wp:post_date_gmt>2011-04-06 00:00:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>realtime-checkin-map-build-with-scala-and-jetty7-websocket</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="foursquare"><![CDATA[foursquare]]></category>
		<category domain="post_tag" nicename="jetty"><![CDATA[jetty]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="twitter"><![CDATA[twitter]]></category>
		<category domain="post_tag" nicename="websocket"><![CDATA[websocket]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>エンジニアとしての生き方 -IT技術者たちよ、世界へ出よう！-</title>
		<link>http://blog.restartr.com/2011/04/12/how-to-live-as-an-engineer/</link>
		<pubDate>Tue, 12 Apr 2011 00:30:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=819</guid>
		<description></description>
		<content:encoded><![CDATA[[tmkm-amazon]4844329944[/tmkm-amazon]

エンジニアとしてのキャリアを見つめ直すための本です。著者のブログや雑誌寄稿を再構成されたもの。私は著者ブログ購読していないので今回が初見なわけですが、内容については同意できることばかりでした。
ということで、ざーっと読んでみて感じたこととかをメモ的に残しておきます。


本の趣旨としては「海外へ出よう」というメッセージなのですが、日本を出ていってしまったら日本の企業は変わらないままなのでは。そうではなくて自分たちが内部から変えるべきなのでしょうか。それとも変わらない会社が淘汰されて日本全体が解体されていくのが望ましいのでしょうか。

企業のあり方については第三章の最後に触れられていて、P115に、米国のやり方が日本でも正しいとは言えないことについて述べられています。
<blockquote>自由競争による貧富の差を広げる。「格差を嫌い、「結果平等」を好む日本人がそんな状況に耐えられるのか疑問である。</blockquote>
と述べた上で、政府が土台を整備する必要があると下記の言葉で絞めていました。

P116: 
<blockquote>結局は日本人の気質にあった「日本なりの資本主義のあり方」というのを見つけて、その枠組のなかで、アジアに進出しようとする日本企業を税制面などで優遇するなどして、日本企業の海外での競争力を高める方向でサポートするのがこれからの政府の役割なんだと思う。</blockquote>

### 第二章：日本のエンジニアは大丈夫か

P57:
<blockquote>そして最も許せないのが、そういった上流→下流とうい階層構造でプログラムを作る工程そのものだ。</blockquote>

「最初の設計はおおまかな仮設計であり、プロトタイプをつくりながら仕様を決定していく」ということについては、同意。これってドメイン駆動設計（DDD）にも通じるような。設計から実装まで幅広い範囲のイテレーションを回すアジャイル的スタイル。日本では明確な職業名を与えることで無意識に役割や分業を考えてしまいがちであるけれど、本当は職業名なんて些細なことなのでしょう。というか技術を知らない企画から目的が曖昧な企画出されても、ね…

それから、ものづくりの本質を捉えきれていない点についても触れていて、P81に以下の記述があります。

<blockquote>たぶん、最も強く意識すべきは「合議制」では良いものは作れない」という法則。デザインに関わる人が多ければ多いほど、いろいろな意見が寄せられてしまい、「せっかく有意義な意見を出してもらったのだから」と次々に意見を取り入れられているうちに、機能だけはあるけど魂がなくて妙に使いにくいものができてしまう。</blockquote>

これについては自分の意見に責任を持てないことの裏返しなのかも知れませんね。みんなで決めたことじゃないと強くプロジェクトを推し進めることができない、とか。
P81に「企画に関わる人を減らして、魂のあるものを作る」とあるが、まさにその通りで、上長の承認が得られないと企画として動き出すことができなかったり、大きな組織であるが故の責任委譲が機能しない傾向にあるのでしょう。

### 第四章：自分を変えて自由になろう

#### 4-2 キャリアパスの考え方
<blockquote>「入社時にスキルを問わない会社」には就職してはいけない</blockquote>

自分の場合は大学は文系だったし知識もほぼない状態だったけど、スキルが問われなかったおかげで今の会社の就職し、そこから技術なりを身につけていくことができた。可能性が広がる点については評価すべきではないかと思います。とはいえ、たまに使ってしまう「文系なんで」という言葉。これってExcuseとして使っている訳で、反省しないと認識しています。スキルを問わない会社に希望する学生は、これからスキルを磨く強い意思のある人間か、専門的スキルを望まれない会社に就職したいだけの人間のどちらかでしょう。
ただ、このような採用方針は、専門スキルを伸ばせるだけの力が社内にある会社でのみ採用されるべきだと思います。外部研修とOJTによる放置プレイで成長できる人間は稀でしょう。「入社時にスキルを問わない会社」は技術職と採用担当の意思がズレている可能性があるので注意すべきだと思います。

#### P141: 自分の適性を見つめ直す
<blockquote>以上のようなことを考えた上で、自分がこの業界に対してどんな価値を提供できるのか、自分は何が得意で、理想的には何がしたいのかを問いただしてみる。</blockquote>

これは定期的に見返したいところ。今の会社がなくなったときに自分には何が残るのかを、常に意識しないといけないでしょうね。

### 第五章：エンジニアとして世界で成功する

P192: 
<blockquote>学生諸君にお願いしたいのは、この手の課題にどんどん取り組んで「新しい技術をすばやく習得して応用する」テクニックを身につけることである。</blockquote>
金魚の群れのシミュレーションの例を取り上げてのこのことば。技術は習得してもそれを応用にもっていくことが重要なんだなと。情報そのものはネットにあるので、知識よりも「適応力」や「応用力」がずっと重要と言っている。引き出しとしての知識だけでなく、それがどう活用できるのか、まで考えを巡らせる癖をつける必要がありそうです。

P217: 
#### 私がMBAを取得することにした10の理由
<blockquote>5.メインジョブ・エンジニア、サポジョブ・MBAというのが最強だから</blockquote>
この真意が知りたい。

<em>※2011/04/14追記※</em>
後日、Twitterにて著<a href="http://twitter.com/#!/ReSTARTR/status/58511606774108160">者の中島さんに質問</a>したところ、回答ブログを頂きました。
<ul>
<li><a href="http://satoshi.blogs.com/life/2011/04/engineer.html">Life is beautiful: 「メインジョブ・エンジニア、サポジョブ・MBAというのが最強」の意味</a></li>
</ul>

#### P218: リーダーに必要とされる感情知性（Emotional Intelligence）
  * Emotional Intelligenceの5つのの要素
     * self-awareness
     * self-regulation
     * motivation
     * empathy
     * social skill

P244 
#### 5−8 技術書以外の本もよもう−世界を目指すエンジニアのための推薦図書−
[tmkm-amazon]4798100234[/tmkm-amazon]
[tmkm-amazon]4798101524[/tmkm-amazon]
[tmkm-amazon]4121006240[/tmkm-amazon]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>819</wp:post_id>
		<wp:post_date>2011-04-12 09:30:35</wp:post_date>
		<wp:post_date_gmt>2011-04-12 00:30:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-live-as-an-engineer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="books"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>HTC Desire Sを買ってみた</title>
		<link>http://blog.restartr.com/2011/04/25/bought-htc-desire-s/</link>
		<pubDate>Mon, 25 Apr 2011 14:12:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=846</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.flickr.com/photos/53244662@N04/5653772980/" title="IMG_4557 by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5310/5653772980_b12c71a761_z.jpg" width="640" height="427" alt="IMG_4557"></a>

はじめてのAndroidとして<a href="http://www.htc.com/www/product/desires/overview.html">HTC Desire S</a>を買ってみました。

購入したのは秋葉原の<a href="http://www.jan-gle.com/">JAN-GLE</a>。

通販で買うつもりでしたが、たまたま下記ツイートを見かけたので週末に店舗に行って買ってきたというわけです。

<a href="http://blog.restartr.com/wp-content/uploads/2011/04/4ee8a29b22700d15be20990984897581.png"><img src="http://blog.restartr.com/wp-content/uploads/2011/04/4ee8a29b22700d15be20990984897581.png" alt="" title="4ee8a29b22700d15be20990984897581" width="738" height="338" class="aligncenter size-full wp-image-850" /></a>

今まではiPhone3GSを使い続けていましたが、そろそろ2年縛りが解ける頃だったこともあり、android機に手を出してみようという気になりました。
何を買うかはずいぶん迷った挙句、Sumsung Nexus SとHTC Desire Sの2機種に絞り込み。
最後は店員さんと話し合った結果HTC Desire Sを選択しました。

いろいろいじり中ですが、なかなか完成度が高い印象をうけています。
追ってインプレを書いてみようと思います。

※せっかくなのでScalaでAndroidアプリでも書いてみようかなとも思ったり。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>846</wp:post_id>
		<wp:post_date>2011-04-25 23:12:59</wp:post_date>
		<wp:post_date_gmt>2011-04-25 14:12:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bought-htc-desire-s</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[android]]></category>
		<category domain="post_tag" nicename="desire-s"><![CDATA[desire s]]></category>
		<category domain="category" nicename="gadget"><![CDATA[gadget]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Desire SをiPhone3GSと比較してみた - 外観編</title>
		<link>http://blog.restartr.com/2011/04/27/compare-desire-s-andiphone-3gs-f/</link>
		<pubDate>Wed, 27 Apr 2011 00:00:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=859</guid>
		<description></description>
		<content:encoded><![CDATA[先日購入したばかりのHTC Desire S。
今回は基本スペックの確認と、今まで現役使用していたiPhone3GSとの外観の比較をしてみます。

### 基本スペック
各所に公表されているとおりなのでここでは細かく触れませんが、比較するとこんな感じになります。
Desire S, iPhone3GS, iPhone4, Nexus Sの主要項目(独断と偏見)の比較表になります。

|     | DesireS | iPhone3GS | iPhone4 | Nexus S |
|:----|:--------|:----------|:--------|:--------|
| 縦幅 | 115mm | 115.5mm | 115.2mm | 123.9mm |
| 横幅 | 59.8mm | 62.1mm | 58.6mm | 63mm |
| 奥行き | 11.63mm | 12.3mm | 9.3mm | 10.88mm |
| 重量 | 130g | 135g | 137g | 129g |
| CPU | 1.1GHz | 600MHz | 1GHz | 1GHz |
| RAM | 768MB | 256MB | 512MB | 512MB |
| 背面カメラ | 5.0M | 3.0M | 5.0M | 5.0M |
| 電池 | 1450mAh | 1219mAh | 1420mAh | 1500mAh |
| ディスプレイ | 3.7 | 3.5 | 3.5 | 4.0 |
| 解像度 | 800x480 | 480x320 | 960x640 | 800x480 |
| microSD | o | - | - | - |
| Wi-Fi | 802.11b/g/n | 802.11b/g | 802.11b/g | 802.11b/g/n |
| OS | android2.3.3 | iOS | iOS | android2.3.3 |


スペックだけみると最後発のDesireSが非常にバランス良く見えます。
もちろん、OSや諸々の組み合わせによって満足度は変わるので一概には言えないでしょう。

iPhone3GSが出た当時はそのスペックもかなり魅力的に感じていたのですが、さすがに二年後の現役モデルと比較するとくすんで見えますね…


### 外観についてiPhone3GSと比較

ボタンの位置やサイズ感など、比べてみればみるほどよく似ていることがわかります。

まずは表側。パッと見は同サイズ。
ディスプレイはDesireSが若干縦長です。

<a href="http://www.flickr.com/photos/53244662@N04/5653202925/" title="IMG_4574 by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5185/5653202925_aa51ca6efb_z.jpg" width="500" height="333" alt="IMG_4574"></a>



裏面。こちらも同様の形状をしていて、中心に向かってカーブしているデザイン。
カメラの位置もほぼ同じですね。

<a href="http://www.flickr.com/photos/53244662@N04/5653773818/" title="IMG_4575 by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5147/5653773818_cd430ae2af_z.jpg" width="500" height="333" alt="IMG_4575"></a>


上面。イヤホンジャックと電源ボタンがありますが、こちらも同じ配置です。

ただ、ジャックの口がDesire Sは平面に切られているのに対して、iPhone3GSはカーブに沿って口の形状が加工されています。
仕上げの細かさで言えばiPhone3GSのほうが上ということでしょうか。

<a href="http://www.flickr.com/photos/53244662@N04/5653773240/" title="IMG_4581 by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5107/5653773240_821093e634_z.jpg" width="500" height="333" alt="IMG_4581"></a>



厚みもほぼ同じ。

iPhoneは表面が一直線ですが、DesireSはボディ末端がカーブしています。

<a href="http://www.flickr.com/photos/53244662@N04/5653774040/" title="IMG_4585 by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5187/5653774040_22573c28bb_z.jpg" width="500" height="333" alt="IMG_4585"></a>



iPhone 3GSのカバーをつけてみると、少しDesire Sが小さいことがよくわかります。

特に縦のサイズがコンパクトさが際立ちますね。

<a href="http://www.flickr.com/photos/53244662@N04/5653203875/" title="Desire S that is wared cover for iPhone3GS by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5307/5653203875_2a1048bd3a_z.jpg" width="500" height="333" alt="Desire S that is wared cover for iPhone3GS"></a>




DesireSはiPhone3GSよりは少し小さいです。
手に持ってみると、裏面のカーブが大きいDesireSのほうがしっくり手になじむ感じがします。
ただ、つや消し塗装のユニボディなせいか、サラサラした感じで滑って落としそう。。。


現在はiPhone3GSの黒SIMをつけて使用しています。
あと、SDカードは最初からSANDISKの8GBが挿入されていました。

<a href="http://www.flickr.com/photos/53244662@N04/5653223571/" title="IMG_4590 by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5029/5653223571_8bc82103b3_z.jpg" width="500" height="333" alt="IMG_4590"></a>



ちなみにDesire SにはDesireの保護シートをつけている為サイズが足りていませんがご愛嬌ってことでｗ

次回は、カメラ性能について比較してみようと思います。

### 参考リンク:
 * <a href="http://www.htc.com/www/product/desires/overview.html">HTC - Products - HTC Desire S - Overview</a>
 * <a href="http://www.samsung.com/us/mobile/cell-phones/GT-I9020FSTTMB">Nexus S from Google | Samsung Nexus</a>
 * <a href="http://www.apple.com/jp/iphone/">アップル - iPhone - 携帯電話、iPod、インターネットデバイスがひとつに。</a>
 * <a href="http://www.knowyourmobile.com/comparisons/854017/samsung_google_nexus_s_vs_htc_desire_s.html">Samsung Google Nexus S vs HTC Desire S</a>
 * <a href="http://ja.wikipedia.org/wiki/IPhone">iPhone - Wikipedia</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>859</wp:post_id>
		<wp:post_date>2011-04-27 09:00:30</wp:post_date>
		<wp:post_date_gmt>2011-04-27 00:00:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>compare-desire-s-andiphone-3gs-f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[android]]></category>
		<category domain="post_tag" nicename="desire-s"><![CDATA[desire s]]></category>
		<category domain="category" nicename="gadget"><![CDATA[gadget]]></category>
		<category domain="post_tag" nicename="iphone3gs"><![CDATA[iphone3gs]]></category>
		<category domain="post_tag" nicename="iphone4"><![CDATA[iphone4]]></category>
		<category domain="post_tag" nicename="nexus-s"><![CDATA[nexus s]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Desire SをiPhone3GSと比較してみた – カメラ編 </title>
		<link>http://blog.restartr.com/2011/04/28/compare-iphone3gs-to-desire-s-%e2%80%93camera/</link>
		<pubDate>Thu, 28 Apr 2011 00:00:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=873</guid>
		<description></description>
		<content:encoded><![CDATA[今回は、Desire Sのカメラ性能がどの程度なのか、iPhone3GSとデジカメを比較しながらみていきます。

iPhoneもDesire Sどちらもデフォルトのカメラアプリをデフォルトの設定で使用しました。
あと、Degital Cameraは具体的なモデル名は言及しませんが2年くらい前の所謂"普通のデジカメ"です。

## Desire Sで撮影してみての感想

最近の携帯のカメラってこんなもんなんですかね。あまり携帯カメラ事情に詳しくないのもあって、正直想像以上に綺麗で驚きました。とくに順光の性能が良いです。Desire Sは多少青味が強くでますが、あとから少し補正する前提なら満足度が高いと思いました。

ただ、夕暮れ以降になるととたんに脆くなり、フォーカスが迷いまくります。iPhone3GSの方が合焦速度は早いくらいです。かつ、合焦したはずが実際はピンぼけってことも。ISOはAUTO/100/200/400/800まであるのですが、日中〜明るめの屋内までがカバー範囲でしょうか。

もちろん、ビンテージカメラ風に加工してくれるアプリを用いた楽しみ方(instagramやpicplzなど)もあると思います。が、私の場合、手軽に撮れるスナップ機として必要最低限の機能を求めており、基本性能を重要視していました。
使ってみるとiPhone3GSではストレスフルだった起動速度が非常に満足のいくもので、起動⇛撮影⇛確認みたいなフローがストレスなく行えます。（あくまでiPhone3GSとの比較であり、最近のスマートフォンなら大体こんな感じなのかもしれません。)

## Desire SとiPhone3GSとの比較撮影サンプル

Desire Sのフォーマットは5:3と4:3に切り替え可能ですが、今回は5:3のワイドで撮影しました。
（※というか撮影後に切り替え可能なことに気づいた…orz)

コメントはDesire S中心に書きました。

### 風景その１
太陽を背にした順光での比較です。

#### iPhone 3GS
<a href="http://www.flickr.com/photos/53244662@N04/5653782282/" title="001_IP by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5303/5653782282_b4d5cf3d97_z.jpg" width="500" height="375" alt="001_IP"></a>


#### Desire S
<a href="http://www.flickr.com/photos/53244662@N04/5653778670/" title="001_DS by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5265/5653778670_5886531d9c_z.jpg" width="500" height="333" alt="001_DS"></a>


#### Degital Camera
<a href="http://www.flickr.com/photos/53244662@N04/5653775032/" title="001_DC by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5067/5653775032_76f7ac9abf_z.jpg" width="500" height="300" alt="001_DC"></a>



### 風景その２
左前方に太陽があります。


#### iPhone 3GS
<a href="http://www.flickr.com/photos/53244662@N04/5653211387/" title="002_IP by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5262/5653211387_0076831cc3_z.jpg" width="500" height="375" alt="002_IP"></a>


#### Desire S
<a href="http://www.flickr.com/photos/53244662@N04/5653208715/" title="002_DS by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5187/5653208715_6d4e0d0523_z.jpg" width="500" height="333" alt="002_DS"></a>


#### Degital Camera
<a href="http://www.flickr.com/photos/53244662@N04/5653204723/" title="002_DC by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5305/5653204723_3c3e7052f2_z.jpg" width="500" height="300" alt="002_DC"></a>



### 逆光性能
フォーカスはクレーン本体にあわせています。
Desire Sのカメラのレンズ前面をプラスチックが覆っているせいかフレアが目立ちます。あえて狙うこともできると思いますが。
暗い部分もディティールも割と残っています。

#### iPhone 3GS
<a href="http://www.flickr.com/photos/53244662@N04/5653782540/" title="003_IP by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5226/5653782540_7f2971459f_z.jpg" width="500" height="375" alt="003_IP"></a>


#### Desire S
<a href="http://www.flickr.com/photos/53244662@N04/5653778984/" title="003_DS by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5146/5653778984_62109ea1c3_z.jpg" width="500" height="333" alt="003_DS"></a>


#### Degital Camera
<a href="http://www.flickr.com/photos/53244662@N04/5653204925/" title="003_DC by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5062/5653204925_cd2962bae4_z.jpg" width="500" height="300" alt="003_DC"></a>



### ダイナミックレンジ
明るい部分から暗い部分までちゃんとつぶれず残っています。

#### iPhone 3GS
<a href="http://www.flickr.com/photos/53244662@N04/5653782852/" title="004_IP by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5022/5653782852_0236fd9b22_z.jpg" width="500" height="375" alt="004_IP"></a>


#### Desire S
<a href="http://www.flickr.com/photos/53244662@N04/5653209073/" title="004_DS by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5146/5653209073_9c4225cd50_z.jpg" width="500" height="333" alt="004_DS"></a>


#### Degital Camera
<a href="http://www.flickr.com/photos/53244662@N04/5653775946/" title="004_DC by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5188/5653775946_73fa06e8fd_z.jpg" width="500" height="300" alt="004_DC"></a>



### 夕日を逆光で撮る
これは私が割とよく好んで撮るシーンですが、ちゃんと暗い部分まで残っています。

#### iPhone 3GS
<a href="http://www.flickr.com/photos/53244662@N04/5653212703/" title="005_IP by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5066/5653212703_b5c493e234_z.jpg" width="500" height="375" alt="005_IP"></a>


#### Desire S
<a href="http://www.flickr.com/photos/53244662@N04/5653209315/" title="005_DS by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5103/5653209315_4d578dc3f6_z.jpg" width="500" height="333" alt="005_DS"></a>


#### Degital Camera
<a href="http://www.flickr.com/photos/53244662@N04/5653776184/" title="005_DC by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5070/5653776184_cf12b0a47a_z.jpg" width="500" height="300" alt="005_DC"></a>



### トワイライト
このあたりの時間からDesire Sの挙動が怪しくなります。とくに暗所にノイズが目立つようになりました。

#### iPhone 3GS
<a href="http://www.flickr.com/photos/53244662@N04/5653212949/" title="006_IP by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5308/5653212949_bcd0001834_z.jpg" width="500" height="375" alt="006_IP"></a>


#### Desire S
<a href="http://www.flickr.com/photos/53244662@N04/5653209585/" title="006_DS by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5068/5653209585_fafbf35f56_z.jpg" width="500" height="333" alt="006_DS"></a>


#### Degital Camera
<a href="http://www.flickr.com/photos/53244662@N04/5653776478/" title="006_DC by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5267/5653776478_d209130e42_z.jpg" width="500" height="300" alt="006_DC"></a>



### ライトアップされた建造物
Desire Sの写真、フォーカスあってません…

#### iPhone 3GS
<a href="http://www.flickr.com/photos/53244662@N04/5653213723/" title="007_IP by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5223/5653213723_355085e054_z.jpg" width="375" height="500" alt="007_IP"></a>


#### Desire S
<a href="http://www.flickr.com/photos/53244662@N04/5653210185/" title="007_DS by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5029/5653210185_1862065604_z.jpg" width="333" height="500" alt="007_DS"></a>


#### Degital Camera
<a href="http://www.flickr.com/photos/53244662@N04/5653206365/" title="007_DC by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5223/5653206365_7aed7efdd2_z.jpg" width="300" height="500" alt="007_DC"></a>



### 街灯のある暗がり
こちらも、Desire Sの写真はフォーカスあってないです。

#### iPhone 3GS
<a href="http://www.flickr.com/photos/53244662@N04/5653214051/" title="008_IP by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5061/5653214051_ec8f359063_z.jpg" width="500" height="375" alt="008_IP"></a>


#### Desire S
<a href="http://www.flickr.com/photos/53244662@N04/5653780952/" title="008_DS by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5061/5653780952_74bb8d6c3e_z.jpg" width="500" height="333" alt="008_DS"></a>


#### Degital Camera
<a href="http://www.flickr.com/photos/53244662@N04/5653777348/" title="008_DC by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5263/5653777348_a4328aa334_z.jpg" width="500" height="300" alt="008_DC"></a>



### 夜の寺院
iPhone3GSよりはDesire Sが色味など幾分かマシ。

#### iPhone 3GS
<a href="http://www.flickr.com/photos/53244662@N04/5653213413/" title="011_IP by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5108/5653213413_7d06759434_z.jpg" width="500" height="375" alt="011_IP"></a>


#### Desire S
<a href="http://www.flickr.com/photos/53244662@N04/5653209905/" title="011_DS by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5110/5653209905_010d44e046_z.jpg" width="500" height="333" alt="011_DS"></a>


#### Degital Camera
<a href="http://www.flickr.com/photos/53244662@N04/5653207079/" title="011_DC by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5270/5653207079_20d043dc28_z.jpg" width="500" height="300" alt="011_DC"></a>



### 街の夜景
ここまで暗いと、手前の暗い部分にノイズがのりまくります。

#### iPhone 3GS
<a href="http://www.flickr.com/photos/53244662@N04/5653214545/" title="009_IP by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5265/5653214545_67f3c03688_z.jpg" width="500" height="375" alt="009_IP"></a>


#### Desire S
<a href="http://www.flickr.com/photos/53244662@N04/5653781294/" title="009_DS by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5270/5653781294_42844e1e51_z.jpg" width="500" height="333" alt="009_DS"></a>


#### Degital Camera
<a href="http://www.flickr.com/photos/53244662@N04/5653777944/" title="009_DC by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5023/5653777944_dc9478b928_z.jpg" width="500" height="300" alt="009_DC"></a>



### ほぼ暗闇の河川沿い
肉眼だと"Degital Camera"の写真くらいの明るさなのですが、Desire SもiPhone3GSも街灯以外ほぼまっ暗。ここまでくると携帯カメラには不利すぎるシチュエーションですかね。

#### iPhone 3GS
<a href="http://www.flickr.com/photos/53244662@N04/5653214277/" title="010_IP by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5306/5653214277_9cd4145e14_z.jpg" width="500" height="375" alt="010_IP"></a>


#### Desire S
<a href="http://www.flickr.com/photos/53244662@N04/5653781498/" title="010_DS by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5143/5653781498_4ededbb142_z.jpg" width="500" height="333" alt="010_DS"></a>


#### Degital Camera
<a href="http://www.flickr.com/photos/53244662@N04/5653207725/" title="010_DC by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5187/5653207725_8f2e979f83_z.jpg" width="500" height="300" alt="010_DC"></a>

## 参考リンク
 * <a href="http://pocketnow.com/android/htc-desire-s-review">HTC Desire S Review</a>(簡単なレビューとカメラ・ビデオのサンプルがあります。)



Desire Sのインプレは多分これで終了です。

今後はiOSと比較しながらandroid端末の良さについていろいろ考えてみようと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>873</wp:post_id>
		<wp:post_date>2011-04-28 09:00:42</wp:post_date>
		<wp:post_date_gmt>2011-04-28 00:00:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>compare-iphone3gs-to-desire-s-%e2%80%93camera</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[android]]></category>
		<category domain="post_tag" nicename="desire-s"><![CDATA[desire s]]></category>
		<category domain="category" nicename="gadget"><![CDATA[gadget]]></category>
		<category domain="post_tag" nicename="iphone3gs"><![CDATA[iphone3gs]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>SIMフリーのandroid端末でSoftBankのMMSを受信する方法</title>
		<link>http://blog.restartr.com/2011/05/01/how-to-send-and-receive-softbank-mms-on-sim-free-android/</link>
		<pubDate>Sun, 01 May 2011 13:18:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=904</guid>
		<description></description>
		<content:encoded><![CDATA[Desire SでS!メールを受信しようと、apnの設定をしてみたのですが、全く送受信が成功しませんでした。
いろいろ調査していたところ、SoftBankメールのアプリのバージョンが原因だと判明しました。
古いバージョンをインストールすれば問題ないようです。

SoftBankメールを送受信するための手順を下記に記しておきます。

### 1.apn設定

| 項目名 | 設定値 |
|:----|:-----|
| 名前 | ＜任意＞ |
| APN | smile.world |
| プロキシ | ＜未設定＞ |
| ポート | ＜未設定＞ |
| ユーザー名 | dna1trop |
| パスワード | so2t3k3m2a |
| MMSC | http://mms/ |
| MMSプロキシ | smilemms.softbank.ne.jp |
| MMSポート | 8080 |
| MCC | 440 |
| MNC | 20 |
| 認証タイプ | ＜未設定> |
| APNタイプ | ＜未設定＞ |

<br />
※こちらを参考にしました。
<ul>
<li><a href="http://blog.yukinishijima.net/android/android-dev-phone-1-%E3%81%A7mms%E3%82%92%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7%E3%81%AE%E9%81%93%E3%81%AE%E3%82%8A">Android Dev Phone 1 でMMSを使えるようにするまでの道のり&nbsp;|&nbsp;Yuki Nishijima Blog</a></li>
</ul>

### 2.SoftBankメールをインストール

最新版(2011.05.01時点でv2.1)の<a href="https://market.android.com/details?id=jp.softbank.mb.mail">SoftBankメール</a>では送受信に失敗します。


なので、下記ブログ記事よりv1.6の古いバージョンをダウンロード＆インストールします。<br />
※既にAndroidマーケットから最新版をダウンロードしている場合は、そちらを先にアンインストールしておく必要があります。

<ul>
<li><a href="http://gadgetordiary.wordpress.com/2011/04/13/softbank%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA1-6%E3%82%92%E5%86%8D%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/">Softbankメールアプリ1.6を再インストール &laquo; デジタルガジェッター日記</a></li>
</ul>


端末のブラウザからダウンロードしてインストールするか、android-sdkの入っているPCから
[ccW]
adb install jp.softbank.mb.mail-1.6.apk
[/ccW]
でインストールできます。


あとは、アプリを起動すればメールの閲覧や送信が自由にできます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>904</wp:post_id>
		<wp:post_date>2011-05-01 22:18:15</wp:post_date>
		<wp:post_date_gmt>2011-05-01 13:18:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-send-and-receive-softbank-mms-on-sim-free-android</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[android]]></category>
		<category domain="post_tag" nicename="desire-s"><![CDATA[desire s]]></category>
		<category domain="category" nicename="gadget"><![CDATA[gadget]]></category>
		<category domain="post_tag" nicename="mms"><![CDATA[mms]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[how-to-receive-and-send-mms-of-softbank-android-2-3-3-on-desire-s]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>ScalaをDotCloudにアップロードするためのsbtサンプル</title>
		<link>http://blog.restartr.com/2011/05/09/sample-sbt-project-for-dotcloud/</link>
		<pubDate>Mon, 09 May 2011 14:35:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=914</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://dotcloud.com/">dotcloud</a>を必要最低限操作するためのactionをsbtに追加してみました。

sbtのアクション自体はじめてなので作法がよくわかってないので、間違っているかも知れませんが。

### 使い方

※scalaファイルは最後に掲載しています。
とりあえず下記を作成するサービス名に置き換えればOKです。
<code>
  val dotApplicationName = "APPNAME"
  val dotServiceName = dotApplicationName + ".SERVNAME"
</code>

あとは、下記を順に実行すればOK(dot_prepareはdot_pushの前に必ず実行されるので省略可能)

 * "sbt dot_create" : サービスの作成
 * "sbt dot_prepare" : リリース用ディレクトリ作成とwarファイルのコピー
 * "sbt dot_push" : dotcloudへのwarファイルpush

### dotcloud用に注意すべきこと

"sbt package"を使用すると、"＜projectName＞-＜scala_ver＞-＜app_ver＞.war"の形式でwarファイルが作成されます。
が、dotcloudのドキュメントにはこう書いてあるので、"root.war"で作成するのが望ましいです。

<blockquote>
The java service will make your application available at http://frontend.myapp.dotcloud.com/ if your archive is named root.war or http://frontend.myapp.dotcloud.com/webapp/ if your archive is named webapp.war (../foobar/ if the archive was named foobar.war and so on). So, you can effectively serve multiple web applications with the same java service.
</blockquote>
<a href="http://docs.dotcloud.com/components/java/">Java &mdash; DotCloud documentation</a>


さらに、"dotcloud push"はwarファイルを含むディレクトリを指定することになり、それ以下がすべて同期されてしまいます。デフォルトだと、"./target/scala_2.8.1/"以下のすべてが。

なので、warのみ格納する"release"ディレクトリを作り、 そこに"root.war"としてひとつだけ存在させておきました。
順番に書くと、

 * sbt packageでtarget/scala_2.8.1/＜projectName＞-＜scala_ver＞-＜app_ver＞.warを生成
 * そのwarファイルをtarget/release/root.warにコピー
 * "dotcloud push ＜dotcloud_appname＞ target/release/" でwarのみアップロード

という方法で対応しました。

以下、サンプルのプロジェクト設定です。

<script src="https://gist.github.com/962534.js?file=RameeProject.scala"></script>

### 参考リンク
 * <a href="http://docs.dotcloud.com/cli/">DotCloud command line &mdash; DotCloud documentation</a> 
 * <a href="http://code.google.com/p/simple-build-tool/wiki/Process">Process - simple-build-tool - A build tool for Scala - Google Project Hosting</a>
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>914</wp:post_id>
		<wp:post_date>2011-05-09 23:35:43</wp:post_date>
		<wp:post_date_gmt>2011-05-09 14:35:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sample-sbt-project-for-dotcloud</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dotcloud"><![CDATA[dotcloud]]></category>
		<category domain="post_tag" nicename="paas"><![CDATA[paas]]></category>
		<category domain="post_tag" nicename="sbt"><![CDATA[sbt]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>DotCloudのMongoDBをScalaから使ってみる</title>
		<link>http://blog.restartr.com/2011/05/28/access-from-scala-to-mongodb-on-dotcloud/</link>
		<pubDate>Sat, 28 May 2011 11:00:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=942</guid>
		<description></description>
		<content:encoded><![CDATA[DotCloudにDuoStackが<a href="http://gigaom.com/cloud/exclusive-paas-startups-unite-dotcloud-buys-duostack/">買収され</a>て、DotCloudでもMongoDBが使えるようになりましたし、node.jsも使えるしで、ますますDotCloudが魅力的なものになってきました。
ただし、node.jsはサポートされても、WebSocketは正式サポートされていないと<a href="http://docs.dotcloud.com/components/nodejs/">公式マニュアル</a>にも書いてありますがWebSocketサポート済みのDuoStack買収によってどう流れるか気になるところです。

さて今回は、前回作ったものをベースにScalaからMongoDBへアクセスするサンプルをDotCloudで動かすまでを書いておきます。（まぁ、Scalaのコードはオマケみたいなものですけど…）<br />
前回の記事はこちらです。
 * <a href="http://blog.restartr.com/2011/05/09/sample-sbt-project-for-dotcloud/">ScalaをDotCloudにアップロードするためのsbtサンプル</a>

ちなみにDotCloudは下記バージョンにて動作しているみたいです（2011.05.28現在)

   * nginx 0.7.65
   * jetty 6.1
   * mongodb 1.8.1

### 作成したサンプルアプリ
事情により停止する場合があるかもしれませんがご了承を。

 * <a href="http://samplemongo.ramee.dotcloud.com/">http://samplemongo.ramee.dotcloud.com/</a>

### DotCloudにMongoDBサーバーを準備する

DotCloudのMongoDBマニュアルはこちら

  * <a href="http://docs.dotcloud.com/components/mongodb/">MongoDB — DotCloud documentation</a>

上記マニュアルにしたがって作成すればMongoDBサーバーを準備できます。<br />
基本的には、追加したいサーバーを登録して、ユーザーを作成するだけです。<br />
簡単。

今回は"example.mongo"という名前で作成する例を記してありますので、<br />
それぞれ自分の作成したいアプリ名に読み替えて下さい。

#### サーバーを作成

事前に"dotcloud create example"は実行してあるものとします。<br />
詳しくはこちらの<a href="http://docs.dotcloud.com/tutorials/firststeps/#id2">マニュアル</a>を見てください。


<code>
$ dotcloud deploy -t mongo example.mongo
</code>

<code line_numbers="false">
> Created "example.mongo".
</code>

#### DB情報を確認（ID/PASS）

<code>
$ dotcloud info example.mongo
</code>

deployコマンド実行してから実際に作成されるまで少し時間がかかります。<br />
すぐにinfoコマンドを実行すると下記エラーがでます。<br />
※正確に測ってませんが数十秒くらい？

<code line_numbers="false">
> Sat May 28 08:14:43 Error: couldn't connect to server 127.0.0.1 shell/mongo.js:79
> exception: connect failed
> Connection to mongo.example.dotcloud.com closed.
> Abort.
</code>

作成完了していれば、下記情報が表示されますので、"mongodb_password: ******"に記載されたパスワードをメモしておきます。

<code line_numbers="false">
cluster: wolverine
config:
    mongodb_password: ******
created_at: 1306570413.6722209
name: example.mongo
namespace: example
ports:
-   name: ssh
    url: ssh://mongodb@mongo.example.dotcloud.com:5906
-   name: mongodb
    url: mongodb://root:******@mongo.example.dotcloud.com:5907
state: running
type: mongodb
</code>


#### MongoDBサーバーへログイン
<code>
$ dotcloud run example.mongo mongo
</code>

infoコマンドで表示されたパスワードを使って、"sampledb"というdbにアプリユーザーを追加します。

<code line_numbers="false">
> use sampledb
switched to db sampledb
> db.getSisterDB("admin").auth("root", "<infoコマンドで表示されるパスワード>");
1
> db.addUser("APPUSER_NAME", "APPPUSER_PASS");
{
     "user" : "APPUSER_NAME",
     "readOnly" : false,
     "pwd" : "xxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
}
> exit
bye
Connection to mongo.example.dotcloud.com closed.
</code>

※とりあえず一旦ログアウトしてますが、別に必須じゃないです。

#### 再度ログインしてテスト操作してみる
<code>
$ dotcloud run example.mongo mongo
</code>

新規作成したユーザーでDB操作が可能か確認してみます。

<code line_numbers="false">
# mongo
Warning: Permanently added '[mongo.example.dotcloud.com]:5906,[174.129.17.131]:5906' (RSA) > to the list of known hosts.
MongoDB shell version: 1.8.1
connecting to: test
> use sampledb;
switched to db sampledb
> db.auth("sampleuser", "samplepass");
1
> db.sampledb.save({id:1,name:"foo"});  
> db.sampledb.find();
{ "_id" : ObjectId("4de0b033a1fd29eb0e1522fd"), "id" : 1, "name" : "foo" }
</code>

問題なさそうなので、あとはアプリを"dotcloud push"して動かすだけです。

### scalaからアクセスするサンプル 

サービス名を「example.samplemongo"として作成する例です。

requirementsはイカのとおり。

 * scala 2.9.0
 * sbt 0.7.7
 * jetty 7.3.1.v20110307
 * casbah 2.1.5.0

<code>sbt</code>
で基本ディレクトリを作成したら、下記プロジェクト設定を{root}/project/build/MongoSampleProject.scala"として保存します。

前回の設定クラスをコピーしてきたので、"sbt dot_create"と"sbt dot_push"も一応使えます。

※"example.mongo"の名称は適宜読み替えでお願いします。
##### MongodbSampleProject.scala

<script src="https://gist.github.com/996769.js?file=MongodbSampleProject.scala"></script>

配置できたら、
<code>
sbt reload update
</code>
でライブラリを読み込みます。

あとは下記Servletの実装とweb.xmlを用意したらOK．

##### MongodbServlet.scala

<script src="https://gist.github.com/996769.js?file=MonbodbServlet.scala"></script>

##### web.xml

<script src="https://gist.github.com/996769.js?file=web.xml"></script>

できたら、"sbt dot_push"でdotcloudへアップロードされるはずです。

最後に、"http:／／samplemongo.exapmle.dotcloud.com"にアクセスして、フォームからデータ登録ができれば成功です。


RDBMSにくらべてデータ保存・取得までが圧倒的に簡単で、PaaSでもMongoDBはいい感じですね！

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>942</wp:post_id>
		<wp:post_date>2011-05-28 20:00:57</wp:post_date>
		<wp:post_date_gmt>2011-05-28 11:00:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>access-from-scala-to-mongodb-on-dotcloud</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dotcloud"><![CDATA[dotcloud]]></category>
		<category domain="post_tag" nicename="mongodb"><![CDATA[mongodb]]></category>
		<category domain="post_tag" nicename="paas"><![CDATA[paas]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>147</wp:comment_id>
			<wp:comment_author><![CDATA[カルティエ ピアス]]></wp:comment_author>
			<wp:comment_author_email>jolwhen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jpcartierinbands.org</wp:comment_author_url>
			<wp:comment_author_IP>98.190.240.201</wp:comment_author_IP>
			<wp:comment_date>2013-09-12 18:38:31</wp:comment_date>
			<wp:comment_date_gmt>2013-09-12 09:38:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[バレンシアガ ピンク シティ カルティエ ピアス http://www.jpcartierinbands.org]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1378978711.718677997589111328125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>東京から福島へ一泊二日でボランティアに行ってきた</title>
		<link>http://blog.restartr.com/2011/06/19/volunteer-at-shinchi-fukushima-pref/</link>
		<pubDate>Sun, 19 Jun 2011 03:03:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=970</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.flickr.com/photos/53244662@N04/5847245836/" title="IMG_5100 by ReSTARTR_y, on Flickr"><img src="http://farm4.static.flickr.com/3538/5847245836_ca37b883fe_z.jpg" width="640" height="427" alt="IMG_5100"></a>

6/11,12の土日を利用して、福島県相馬郡新地町にボランティア活動に行ってきました。

## 活動の経緯

東日本大震災がおきてから、被災地に対して何かできることを、ということでこれまで募金と献血をやってきました。が、それだけでなく何かできることはないかと常々考えていました。<br />
仕事柄、ITを利用した貢献も考えたのですが、イマイチ現地の状況がわからない。情報を得ようとしても地域やソースによって様々かつ時間とともに大きく変化しているからです。<br />
また、社会人とはいうものの土日の時間やお金については結構余裕があるので、じゃあ現地でボランティアをすることで現状を知ることができるのではないか、と考えたのが今回の経緯です。
その後、被災地の状況に詳しい元同僚に相談し、その子の母親と友人2名を加えた5名で活動をしてきました。

### 活動内容
<a href="http://www.flickr.com/photos/53244662@N04/5846683717/" title="IMG_5090 by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5109/5846683717_604f687639_m.jpg" width="240" height="160" alt="IMG_5090"></a>

津波の被害をうけた民家の瓦礫撤去作業を行いました。<br />
とはいっても大きな物はあらかた自衛隊が撤去しているので、我々の役目は倒れた木の撤去や、瓦・ガラス等の破片の収集、側溝の泥かきなど、担当した民家の敷地内を綺麗にすること。<br />
計10名程度で、1日かけて行いましたが、天候が曇りだったこともあって順調に作業をすることができました。

## 現地に行ってみて

#### ボランティアセンターすごい
<a href="http://www.flickr.com/photos/53244662@N04/5822614663/" title="現地到着。まだ受付前。 by ReSTARTR_y, on Flickr"><img src="http://farm3.static.flickr.com/2673/5822614663_ec084f0dfd_m.jpg" width="240" height="144" alt="現地到着。まだ受付前。"></a>

被災地のボランティアセンターもずいぶん落ち着いてきているようです。<br />
活動に必要な道具（スコップやマスク）だけでなく、水や活動後のアイスコーヒーなどの提供もして頂きました。<br />
ボランティア活動自体初めてだったのですが、たとえ不慣れであっても、コーディネーターの方々や一緒に活動する方々の力を借りながら活動することは可能であると実感しました。<br />
現地でボランティアをしたいと考えているけど踏み出せなかった方は、真夏になる前に一度足を運んでみてはいかがでしょう。

#### 電波悪い
SoftBankの黒SIMをDesireSに入れて利用しているのですが、ほぼ繋がりません。<br />
全然つながらない訳ではないですが、かなり不安定でたまにつながる程度。picplzで写真アップロードしようとしても100%失敗します。<br />
今回の震災でインターネットが活躍したという話は聞きますが、このような電波状況のままでは欲しい情報も手に入らないでしょう。震災後にこうなったのかもともと電波の弱い地域だったのかわかりませんが、これではインターネットの存在も無意味。<br />

利用した福島県伊達市（福島市の近く）の宿泊施設で、地震を体験したのですが、電波が皆無だったために震源や地震の規模などの情報が全く手に入りませんでした。<br />

これまで、インターネットでほしい情報をいつでもどこでもすぐに手に入れられると思っていただけに、手に入らない状況に出くわすとかなりの不安感を覚えます。<br />
こうなると、頼れるものはテレビやラジオ、町内放送やご近所ネットワークになってくるでしょう。
もちろん有線でのインターネットもあるかもしれませんが、緊急時にわざわざPCを起動したりしないでしょう。

そう考えると、インターネットの果たすべき役割はリアルタイムに必要な一次的情報ではなく、その後の情報配信とその整理に注力すべきだと実感しました。


#### 活動内容と現地で聞いたこと

一日目は新地町でボランティアを行い、宿泊施設はりょうぜん里山がっこうを利用。
二日目は里山がっこうの自然体験をさせてもらい、その後温泉街で足湯につかって帰宅。

 * <a href="http://www.date-satoyama.com/">NPO法人りょうぜん里山がっこう</a>

里山がっこうでは、震災後の放射能の影響とその取組みについて色々お話を伺いました。友人のブログにその詳細が書かれていますので、そちらを参照してもらうほうが良いと思います。

 * <a href="http://agreenqoostar.blog129.fc2.com/blog-entry-604.html">AGREEN　イナカとトカイの橋渡し　 伊達市りょうぜん里山がっこうの「除染」への取り組み</a>

1日目の活動レポートもあります。

 * <a href="http://agreenqoostar.blog129.fc2.com/blog-entry-603.html">AGREEN　イナカとトカイの橋渡し　 新地町ボランティアレポート</a>

## ボランティア活動に必要な情報

#### ボランティアバスツアー

被災地は基本的に交通が整備されていません。
一人暮らしで車も所有していない自分としては、現地の交通手段がネックになります。
幸い、「ボランティアバスツアー」というものがあったのでこれを利用することを考えました。

 * <a href="http://www.pref-f-svc.org/archives/1216">東日本大震災復興支援・新地町で活動する災害ボランティア募集 | 福島県災害ボランティアセンター</a>

これなら一人でも現地に向かうことも可能ですし、そこからはコーディネートしてもらえます。
結局は、冒頭にも書いたとおり、田舎暮らしのマッチングの仕事の関係で被災地にも詳しい友人に相談した結果、彼女のご家族に福島駅から現地まで車をだして頂けることになり、東京ー福島間は夜行バスを利用して、友人4人とともに活動する結果となったのですが。

#### ボランティア情報のTwitterアカウント

定期的にボランディアバスツアーなどの情報は下記Twitterアカウントをフォローしておけば、チェックすることができます。(他にもあるかもしれませんが私はこちらでチェックしています。）

 * <a href="http://twitter.com/tominvc">@tominvc</a> | 被災地支援都民ボランティア
 * <a href="http://tiwtter.com/tokyovolunteer">@tokyovolunteer</a> | 東京ボランティア・市民活動センター
 * <a href="http://twitter.com/Tasukeaijp">@Tasukeaijp</a> | 助けあいジャパン

あとは、健康な体と必要不可欠な装備があれば十分貢献できると思います。


現地で少しばかり写真を撮ってきたのでFrickrにあげておきました。

<object type="text/html" data="http://www.flickr.com/slideShow/index.gne?user_id=53244662@N04&set_id=72157626993269710" width="500" height="500"> </object>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>970</wp:post_id>
		<wp:post_date>2011-06-19 12:03:20</wp:post_date>
		<wp:post_date_gmt>2011-06-19 03:03:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>volunteer-at-shinchi-fukushima-pref</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>139</wp:comment_id>
			<wp:comment_author><![CDATA[emerging fully dressed and avoiding the stares of the crowd13]]></wp:comment_author>
			<wp:comment_author_email>pawanbarch@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.mxw99.com/bbs/forum.php?mod=viewthread&amp;tid=298281</wp:comment_author_url>
			<wp:comment_author_IP>65.112.230.227</wp:comment_author_IP>
			<wp:comment_date>2013-05-17 23:41:42</wp:comment_date>
			<wp:comment_date_gmt>2013-05-17 14:41:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That is a great tip particularly to those new to the blogosphere. Short but very precise info... Many thanks for sharing this one. A must read post!]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368801703.103519916534423828125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>144</wp:comment_id>
			<wp:comment_author><![CDATA[フェラガモ財布]]></wp:comment_author>
			<wp:comment_author_email>pfuuukl@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://ferragamo.atukan.com/</wp:comment_author_url>
			<wp:comment_author_IP>92.247.168.62</wp:comment_author_IP>
			<wp:comment_date>2013-06-26 03:16:16</wp:comment_date>
			<wp:comment_date_gmt>2013-06-25 18:16:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ＤＲもアイアンもキャロからタイトリストに買換えました。キャディバックも揃えようと思っていますが、最安価っていくらぐらいですか？とにかくカッコ良いので欲しいのですが、今のバック購入して5ヶ月ぐらいなので、できるだけ安く購入したく思っています！(交渉するときの参考として)]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372184176.5103130340576171875;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Varnish勉強会 #tokyovcl に行ってきた</title>
		<link>http://blog.restartr.com/2011/06/21/go-to-varnish-study-tokyovc/</link>
		<pubDate>Tue, 21 Jun 2011 14:56:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=996</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.flickr.com/photos/53244662@N04/5856931526/" title="IMAG0053 by ReSTARTR_y, on Flickr"><img src="http://farm6.static.flickr.com/5029/5856931526_1119c53a87.jpg" width="500" height="299" alt="IMAG0053"></a>

6/18(土)に開催された[Varnish勉強会 Tokyo.vcl : ATND](http://atnd.org/events/16681)に行ってきました。
初のクックパッドさんオフィス訪問です。

Varnish3のリリースパーティーも兼ねての開催だったようで、ステッカーもいただいてしまいました。<br />
インフラ屋じゃない上に、Varnish触ったのは前日の晩という超初心者だったので結構不安でしたが、<br />
ビアバッシュを含め色々な話しが聞けた実りある良い勉強会でした。

主催の@hmskさんをはじめ登壇者の皆様、ならびにビアバッシュで交流してくださった皆様ありがとうございました。

### 雑感
 * Varnishは画像配信の事例が多い
 * HTTPサーバーの前だけじゃなくてSolrのような内部ネットワーク間の通信にも適用できる。
 * Varnish落ちたときにApacheの負荷を避けるためにSquidが使える。
 * 拡張次第でHTTPサーバーにもKVSにも化ける（やりすぎ注意？）。
 * クラウドでの運用はフロンティア。
 * 設定ファイルのvclはもはやプログラム
 * ESIの事例なかったけど使いにくいのかな？
 * とりあえず実戦投入して様子見ないとわからないことが多そう。
 * あ、どれだけ高速化したかについての言及がなかったような…

## 各発表メモ
スライドと、その丸写しみたいな感じのメモをペタペタ。

### VarnishCache3.0新機能とVUPの仕方(@xcir)
<div style="width:425px" id="__ss_8344516"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/xcir/tokyovclvarnishcache30vup" title="tokyo.vcl発表資料（VarnishCache3.0新機能とVUPの仕方）">tokyo.vcl発表資料（VarnishCache3.0新機能とVUPの仕方）</a></strong> <iframe src="http://www.slideshare.net/slideshow/embed_code/8344516" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/xcir">xcir</a> </div> </div>
   * ESIでのgzip
      * ブロックが圧縮されているとESIできなかった(~2）
      * defaultパラメータが改善された
   * stream support
      * 別のストリームは待機させられる（？

### イカ娘も終わったしVarnishでも使うか(@phji)
<div style="width:425px" id="__ss_8366215"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/phji/varnishika" title="イカ娘も終わったしVarnishでも使うか">イカ娘も終わったしVarnishでも使うか</a></strong> <iframe src="http://www.slideshare.net/slideshow/embed_code/8366215" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/phji">Kazutoshi Fujimoto</a> </div> </div>
   * [RAM8G Xeon 4core SSD256GB ] x 20servers
   * pixiv
      * nginx -> (consistent hash) -> quid -> nginx -> apache
      * lookupとかかないとキャッシュされないｗ

### twitter検索(yats)でvarnish使ってみた(@PENGUINANA_)
   * API 7000M req/month
   * PV 150Mreq/month
   * varnish(vps) -> nginx[ webAPI -> varnish -> Solr ]
   * service : cache + failover
   * Solr: slaveのキャッシュクリアーが重いので、その前面にVarnishをおいている(ラウンドロビンとFailover）
   * autocomplete
      * キャッシュと相性よさそう

### EC2とvarnishで画像配信(@mirakui)
<div style="width:425px" id="__ss_8352369"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/mirakui/ec2varnish" title="EC2とVarnishで画像配信">EC2とVarnishで画像配信</a></strong> <iframe src="http://www.slideshare.net/slideshow/embed_code/8352369" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/mirakui">Issei Naruta</a> </div> </div>
   * 失敗談
   * TOFU
      * アップロード時ではなくオンデマンドでリサイズ
      * akamai（CDN)に7000RPSのうち、ELBには700RPSくる。60%受けるリクエストをキャッシュできればApache負荷軽減できるのでは？
         * という導入経緯（からの失敗
      * 1st challenge
         * EC2(M2.XLARGE[17.1GB RAM] + EBS[100GB for swap])
         * 300rps
         * 結果：オンメモリだけなら順調だけど、あふれてきてOSにSWAPさせたとたんLOADAVERAGEが爆発して死亡。
      * 2nd challenge
         * EC2(M2.XLARGE[17.1GB RAM] + EBS[100GB for ext3])
         * "file storage"を使っても結局メモリ容量が大量に必要
      * ec2のxlargeインスタンスには、IO性能「標準」と「高」がある
         * 今回は「標準」を利用して失敗
         * 「高」ならうまくいくかも
   * varnish3
      * hash director
         * consistent hashingができるかも？
         * nginxいらずに複数varnish運用ができるかも？

### Puppetでvarnishもsquidも面倒みる(@ar1)
   * ふつうはvarnishは落ちるのでLBつかって並列で運用
   * varnishおちるとWebサーバーが負荷かかってしまう
      * LB -> varnish -> squid -> apache
      * squidどうしでキャッシュを共有できるので、１つSquidおちてもWebサーバーにききにいかずにすむ。
   * puppet
      * 設定をらくにする
      * cacheのExpire
      * サーバーのぬきさし

### 楽天でvarnish(@spchidren)
   * L7 balancingがやりたくてVarnish導入
      * URLによってWebサーバーのグループを切り替えたい
   * akamai -> LB -> varnish(RAM24G[malloc18G/hitrate 75%] -> apache(+mod_thumb)
   * LBからVarnishを切り離すのはどうやる？
   * CDNやVarnishのcache clearをどうやるか
      * 画像登録されたときにMQに登録して、必要に応じて消す
      * CDNは常にExpireされない状態にしておける。
   * ImageMagicおもい
      * varnishにサムネイルをつくるしくみを組み込んでみれば？（FreeImage)
      * cc_commandでインクルードさせて、C言語でサムネイルつくるしくみをくみこむ
   *  varnishのいくさき
      * nginxにも近いしredisにもちかづいてきてる
      * どこにいくんでしょ

### TDDでVCL書いてデプロイ(@hmsk)
   * varnishtest
      * RSpecぽい書き方できる
      * xxx.vcltestファイルにケースを記述
   * vmod
      * vclの設定をC言語っぽく描ける
      * パージや圧縮、エラーなどに使える
      * モバイル端末のリストのチェックにもVCLから外出しできる

## 関連リンク
 * ATND
   * [Varnish勉強会 Tokyo.vcl : ATND](http://atnd.org/events/16681)
 * Ustream
   * [http://www.ustream.tv/recorded/15453305](http://www.ustream.tv/recorded/15453305)
   * [http://www.ustream.tv/recorded/15453834](http://www.ustream.tv/recorded/15453834)
 * Togetter
   * [Togetter - 「第一回 Varnish勉強会 Tokyo.vcl」](http://togetter.com/li/151585)
 * 勉強会レポート
   * [Varnish勉強会 Tokyo.vclを行いました - ククラフト](http://d.hatena.ne.jp/hxmasaki/20110620/1308547067)
   * [私がクックパッドの画像配信野郎です - 床のトルストイ、ゲイとするとのこと](http://d.hatena.ne.jp/mirakui/20110619/1308497959)
   * [Tokyo.vclでVarnishCache3の新機能とVUPの仕方を話してきました &laquo; cat /dev/random &gt; /dev/null &amp;](http://blog.xcir.net/?p=438)
   * [東京varnish勉強会(Tokyo.vcl)まとめ &laquo;  blog.udzura.jp](http://blog.udzura.jp/2011/06/20/summary-of-tokyo-varnish-study-on-20110618/)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>996</wp:post_id>
		<wp:post_date>2011-06-21 23:56:40</wp:post_date>
		<wp:post_date_gmt>2011-06-21 14:56:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>go-to-varnish-study-tokyovc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cache"><![CDATA[cache]]></category>
		<category domain="post_tag" nicename="study"><![CDATA[study]]></category>
		<category domain="post_tag" nicename="varnish"><![CDATA[varnish]]></category>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>ScalaのORMapperのSquerylを試してみてハマった３つのこと</title>
		<link>http://blog.restartr.com/2011/08/16/3-things-that-i-was-in-trouble-using-squeryl/</link>
		<pubDate>Mon, 15 Aug 2011 23:00:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1024</guid>
		<description></description>
		<content:encoded><![CDATA[ScalaのORMとしてSquerylってのがあります。

<ul>
<li><a href="http://squeryl.org/index.html">Squeryl - A Scala ORM for SQL Databases</a></li>
</ul>

使い方は上記リンク先を見ればだいたいわかります。
あと、<a href="http://twitter.com/jugyo">@jugyo</a>さんのブログに導入あたりはまとまっていますし、つまづいたらGoogleGroupで検索すれば何か見つかるかもしれません。

<ul>
<li><a href="http://blog.twiwt.org/e/f34763"> Twiwt:Blog / jugyo : squeryl を試す </a></li>
<li><a href="http://blog.twiwt.org/e/7e40ce">Twiwt:Blog / jugyo : Squeryl の使い方 - セットアップ, モデルの定義, テーブル作成</a></li>
<li><a href="https://groups.google.com/group/squeryl/about"> Squeryl | Google Groups </a></li>
</ul>

さて、今回はTwitterっぽいものを想定して機能を試してみたのですが、３つほどハマったところを記しておきます。
環境はScala2.9.0.1、Sbt0.7.7、MySQL5.5、Squeryl0.9.4です。<br />
ソースはgistに登録。それを本文末尾にも掲載しておきました。

<h3>１．プライマリーキーの指定での嵌りどころ</h3>
1つのカラムがPKとなるテーブルスキーマの場合、org.squeryl.KeyedEntity[T]を継承して使います。
[ccW_scala]
class Users(id: Long, text: String) extends KeyedEntity[Long]
[/ccW_scala]

KeyedEntityにはidというフィールドが用意されていて、継承時に型を指定することで、PKの型に適用させることができます。今回の場合であればLong型のPK「id」ということになります。<br />
ただし、この場合、PKはautoincrementedになってしまいます。

コード的には下記のようにKeyedEntity[T]を使わずSchema継承時に定義するのと同等になるわけです。
[ccW_scala]
class Users(id: Long, text: String)

class Db extends Schema {
  val users = table[User]("users")
  on(users)(u => declare(
    u.id is (primaryKey, autoincremented))
}
[/ccW_scala]

これは結構困ります。そんな場合はSchemaを継承するときに定義を上書きすればOK。
[ccW_scala]
class Users(id: Long, text: String) extends KeyedEntity[Long]

class Db extends Schema {
  val users = table[User]("users")
  on(users)(u => declare(
    u.id is (primaryKey))
}
[/ccW_scala]

これはSquerylのGoogleGroupに書いてました。
<ul>
<li><a href="https://groups.google.com/forum/#!topic/squeryl/BTrKBwikMqs">how to cancel "autoincremented" from KeyedEntity[T]</a></li>
</ul>

<h3>２．DDLのカラムの順番の嵌りどころ</h3>
Db.printDdlを実行した時にカラムの順番が予測できません。<br />
PKが最初にくるのかと思えばそうでもないみたい。ここは細かく追ってないですが、これもGoogleGroupに答えがありました。

<ul><li><a href="https://groups.google.com/forum/#!topic/squeryl/ZwiDf5Q-IUI">CREATE TABLE columns in order of constructor arguments</a></li></ul>

答えとしては、org.squeryl.internals.DatabaseAdapter:: writeCreateTableあたりをorverrideしてなんとかしてくれとのこと。
<a href="https://github.com/max-l/Squeryl/blob/master/src/main/scala/org/squeryl/internals/DatabaseAdapter.scala#L255">https://github.com/max-l/Squeryl/blob/master/src/main/scala/org/squeryl/internals/DatabaseAdapter.scala#L255</a>

なんか良い方法はないの…
とりあえず、printDdlした結果をコピーして、順番だけ書き換えて、手動で直接DBにクエリ発行すればなんとかなるでしょう。

<h3>３．外部キーの利用でのはまりどころ</h3>
２つのテーブルにRelationを設定してからDb.createした際、外部キーが設定されない問題がありました。
MySQLは5.5を使っているので外部キーに対応していない訳でもないです。
問題はAdapterの選定にありました。
org.squeryl.adapter.MySQLAdapter
をつかっていたのですが、
org.squeryl.adapter.MySQLInnoDBAdapter
を使えばOKでした。

根本の原因は、org.squeryl.adapter.MySQLAdapterに
[ccW_scala]
override def supportsForeignKeyConstraints = false
[/ccW_scala]
と定義してあり、一方のorg.squeryl.adapter.MySQLInnoDBAdapterには
[ccW_scala]
override def supportsForeignKeyConstraints = true
[/ccW_scala]
と定義してあります。<br />
この値がtrueになっていないとForeignKeyの制約がDDLに含まれなくなってしまうので注意です。
<a href="https://github.com/max-l/Squeryl/blob/master/src/main/scala/org/squeryl/adapters/MySQLAdapter.scala#L75">Docコメントにも書いてある</a>ので注意です。

以上、Squerylを弄ってみて嵌ったことをまとめてみました。

<h3>Squerylの使用感</h3>
ちょっと前にTwitterのStreamAPIのデータをMySQLに格納するためにSquerylを使ったのと今回少し弄ってみただけなのでまだまだ知らないことだらけです。他にも機能的はたくさん用意されていると思いますし、APIも割となじみやすいので複雑すぎないテーブル定義の場合には積極的にSquerylを使っていこうと思います。

<em>※ドキュメントや本体のソースを追いかけたりしながら使い方を学ぶのは非常に楽しいです:)</em>

で、ソースは以下です。

<script src="https://gist.github.com/1146854.js"> </script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1024</wp:post_id>
		<wp:post_date>2011-08-16 08:00:15</wp:post_date>
		<wp:post_date_gmt>2011-08-15 23:00:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>3-things-that-i-was-in-trouble-using-squeryl</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="orm"><![CDATA[ORM]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="squeryl"><![CDATA[squeryl]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Scalaで設定ファイルを使いたい時どうしたらいいの？</title>
		<link>http://blog.restartr.com/2011/08/30/config-libraries-in-scala/</link>
		<pubDate>Mon, 29 Aug 2011 15:02:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1049</guid>
		<description></description>
		<content:encoded><![CDATA[<em style="color:red">2011.08.31 kmizushimaさんから頂いた<a href="http://blog.restartr.com/2011/08/30/config-libraries-in-scala/?preview=true&preview_id=1049&preview_nonce=ad0bbeeef6#comment-108">コメント</a>を元に、下記の記述を修正＆追記しました。<br />
<ul>
<li>Twitterのutil-evalの一時ファイル生成について</li>
<li>AkkaのConfigファイルのパース手法について</li>
</ul>
</em>

TwitterのOAuthの鍵やDB接続情報など、アプリを書く上で環境によって切り替える設定が大抵の場合あると思います。普段使っているPHPの場合、設定を外部ファイルに書きだす場合、ini,yaml,xml,phpのいずれかを使うことが多いのですが、Scalaの場合、設定ファイルってどうするのか気になりました。

ということで、適当に思いついたライブラリやフレームワークがどのように対応しているのか調査。

## ライブラリ

### propertiesファイル
 * javaの古くから使われている
 * キーと値のみ設定可能
 * 依存関係がないので手軽。
 * すべてが文字列
 * 例えばこんな感じ

path/to/conf.properties
[ccW]
hoge = "moge"
[/ccW]

[ccW_scala]
val p = new java.util.Properties()
val config = p.load(new java.io.FileInputStream("path/to/conf.properties");
config.get("hoge") // "moge"
[/ccW_scala]

### twitterのconfiggy
 * <a href="https://github.com/robey/configgy">https://github.com/robey/configgy</a>
 * 独自フォーマット
 * オワコン

### twitterのutil-eval
  * <a href="http://twitter.github.com/util/">http://twitter.github.com/util/</a>
  * Evalした値をそのまま利用
  * Scalaのコンパイラに任せられる。つまりScalaコードがそのまま設定ファイルに。
  * 型安全
  * 詳しいことはこちらを参照
    * <a href="http://d.hatena.ne.jp/xuwei/20110805/1312551980">twitter が Scala 大好きすぎて (?) 設定ファイルまで Scala のソースコードな件 - scalaとか・・・</a>
    * <a href="http://blog.youhei.jp/scala-util-eval">Scala アプリケーションのコンフィグレーションに Twitter 製の util-eval を使ってみた - blog.youhei.jp</a>
  * 下記処理にて設定クラスインスタンスをapply経由で取り出せる
    * <a href="https://github.com/twitter/util/blob/master/util-eval/src/main/scala/com/twitter/util/Eval.scala#L247">com.twitter.util.Eval#L247</a>
  * <del>一時的にjarファイルを生成するので環境に制約あるとダメ（たぶん）</del>
    * 一時ファイルを生成するのは、ローカルにcloneした古いままのバージョン（1.2.5）で動作確認していたためでした。
    * 古いコード: <a href="https://github.com/twitter/util/blob/7c81842286f30aee4b2176bceb8c79ded710c88e/src/main/scala/com/twitter/util/Evaluator.scala">com.twitter.util.Evaluator</a>のコメントに<a href="https://github.com/twitter/util/blob/7c81842286f30aee4b2176bceb8c79ded710c88e/src/main/scala/com/twitter/util/Evaluator.scala#L57">All generated .scala and .class files are stored, by default, in System.getProperty("java.io.tmpdir")</a>と書いてあったので、「一時ファイルが生成される」と認識し、実際の動作確認でもその一時ファイルが確認できていました。
    * しかし、新しいコード: <a href="https://github.com/twitter/util/blob/master/util-eval/src/main/scala/com/twitter/util/Eval.scala">com.twitter.util.Eval</a>のコメントには<a href="https://github.com/twitter/util/blob/master/util-eval/src/main/scala/com/twitter/util/Eval.scala#L50">If target is None, the results are compiled to memory (and are therefore ephemeral)</a>とある通り、パス指定がない場合はメモリ上の仮想ディレクトリに対して操作を行う模様です。

  * 使い方

設定のtraitを定義

src/main/scala/com/restartr/utilSample/MyConfig.scala
[ccW_scala]
package com.restartr.utilSample
trait MyConfig {
  val num: Int
  val str: String
}
[/ccW_scala]

実際の設定ファイルでは、設定のTraitを継承してインスタンス生成<br />
※クラスインスタンスでなくても文字列やリストでもOK。

path/to/config/MyConfig.scala
[ccW_scala]
import com.restartr.utilSample.MyConfig
new MyConfig {
  val num = 1
  val str = "san"
}
[/ccW_scala]

使いたい場所でEval。
[ccW_scala]
val conf = Eval[MyConfig](new java.io.File("path/to/config/MyConfig.scala"))
conf.num // 1
conf.str // "san"
[/ccW_scala]

### configrity
  * <a href="https://github.com/paradigmatic/Configrity">https://github.com/paradigmatic/Configrity</a>
  * akkaのフォーマットと同等
    * <a href="https://github.com/paradigmatic/Configrity/wiki/Formats">設定のフォーマット</a>
    * Scala 2.9以上対象。
    * configファイルの<strong>読み書き</strong>ができる
      * immutable, thread safe, allow functional design pattern

## 各種フレームワーク
以下のフレームワークはすべて独自実装でした。Propertiesじゃ役不足だし、かといってデファクトな設定用ライブラリがないからなのでしょうか。

### akkaのconfig
 * akka.confとかがそれ。
 * 独自パーサーを使用
    * 70行程度のシンプルなパーサー
    * <a href="https://github.com/jboner/akka/blob/master/akka-actor/src/main/scala/akka/config/ConfigParser.scala">akka.config.ConfigParser</a>
    * <del>正規表現で定義されてる</del>Scalaのパーザコンビネータ(RegexParsersを継承)で定義されている
     * "{"と"}"で階層構造を表現
<code>
akka {
  cluster{
    name = "test-cluster"
  }
}
</code>
 * 使える型
  * 数値
  * 文字列
  * 真偽値（on/off , true/false)
  * リスト [1,2,3] / ["hoge","moge"]

### play!frameworkのconfig
 * 独自パーサー
   * <a href="https://github.com/playframework/play/blob/master/framework/src/play/utils/OrderSafeProperties.java">play.utils.OrderSafeProperties</a>
 * java.util.propertiesを継承したもの。
 * 環境ごとにIDを割り当てられる
    * http://playdocja.appspot.com/documentation/1.2.1/production
    * http://playdocja.appspot.com/documentation/1.2.1/guide11
    * IDごとに%{ID}を頭につければ切り替えてくれるみたい

### Lift
 * LiftRulesが設定をもつ
    * <a href="http://simply.liftweb.net/index-3.1.html#toc-Subsection-3.1.2">http://simply.liftweb.net/index-3.1.html#toc-Subsection-3.1.2</a>
    * 実装はここ
      *<a href="https://github.com/lift/framework/blob/master/web/webkit/src/main/scala/net/liftweb/http/LiftRules.scala">net.liftweb.http.LiftRules</a>
    * たぶんこのへん
      * <a href="https://github.com/lift/framework/blob/master/core/util/src/main/scala/net/liftweb/util/Props.scala">net.liftweb.util.Props</a>

ざっと調べて使ってみたところ、手軽にやるならProperties、フレームワークを使うならそれに則り、厳密にやるならTwitterのEvalや、設定ファイルを読み書きできる独特なConfigrityなんかがよさそうです。

XMLは…まぁないでしょうね。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1049</wp:post_id>
		<wp:post_date>2011-08-30 00:02:15</wp:post_date>
		<wp:post_date_gmt>2011-08-29 15:02:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>config-libraries-in-scala</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="config"><![CDATA[config]]></category>
		<category domain="post_tag" nicename="library"><![CDATA[library]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>108</wp:comment_id>
			<wp:comment_author><![CDATA[kmizushima]]></wp:comment_author>
			<wp:comment_author_email>mizukota@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://d.hatena.ne.jp/kmizushima</wp:comment_author_url>
			<wp:comment_author_IP>49.132.117.124</wp:comment_author_IP>
			<wp:comment_date>2011-08-30 06:34:24</wp:comment_date>
			<wp:comment_date_gmt>2011-08-29 21:34:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[こんにちは。面白い記事を読ませていただき、ありがとうございました。特に、twitterのutil-eval辺り、あまり
追えて無かったのですが、参考になります。

ちょっと記事を読んで、いくつか気になる点があったのでツッコミをば。

&gt; 一時的にjarファイルを生成するので環境に制約あるとダメ（たぶん）

これ、実際に試してないので、的外れだったら申し訳ないのですが、ソースちょこっと読んだ限り、仮想ディレクトリ構造の中に仮想ファイルを生成して、その中に仮想的に.classファイル(相当)を生成することができるっぽいので(60行目辺り参照)、実は環境の制約はあまり無かったりする気がします。

&gt; akkaのconfig
&gt; 正規表現で定義されてる 

これは、正規表現で定義されてる、というよりScalaのパーザコンビネータ(RegexParsersを継承)で定義されている、というのが正確なところかと。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1314653665.07";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1314658103.5421";s:7:"message";s:52:"admin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>109</wp:comment_id>
			<wp:comment_author><![CDATA[ReSTARTR]]></wp:comment_author>
			<wp:comment_author_email>yoshida.masaki+blog@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>220.104.79.201</wp:comment_author_IP>
			<wp:comment_date>2011-08-30 08:08:52</wp:comment_date>
			<wp:comment_date_gmt>2011-08-29 23:08:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[>kmizushima さん
コメント＆ツッコミありがとうございます。

> 一時的にjarファイルを生成するので環境に制約あるとダメ（たぶん）
> 
> これ、実際に試してないので、的外れだったら申し訳ないのですが、ソースちょこっと読んだ限り、仮想ディレクトリ構造の中に仮想ファイルを生成して、その中に仮想的に.classファイル(相当)を生成することができるっぽいので(60行目辺り参照)、実は環境の制約はあまり無かったりする気がします。

たしかにソースではVirtualDirectoryを使ってメモリ上で操作していますね。
ただ実際使ってみたときには、ファイルシステム上にclassファイルが生成されているのが確認できたので、その結果から少し想像で書いていました。
少し曖昧なのでちゃんと調査してみます。


>> akkaのconfig
>> 正規表現で定義されてる
> 
> これは、正規表現で定義されてる、というよりScalaのパーザコンビネータ(RegexParsersを継承)で定義されている、というのが正確なところかと。

なるほど。たしかに言葉の表現に不足がありますね。修正しておきます。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1314659332.5807";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>第二回 #Playframework 勉強会 in Tokyo #play_ja に行ってきた</title>
		<link>http://blog.restartr.com/2011/10/10/play-framework-study-in-tokyo/</link>
		<pubDate>Mon, 10 Oct 2011 06:59:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1073</guid>
		<description></description>
		<content:encoded><![CDATA[ * <a href="http://atnd.org/events/19107">第二回 #Playframework 勉強会 in Tokyo #play_ja</a>

<a href="http://atnd.org/events/17724">第一回</a>は大阪開催だったのとそもそも開催を知らなくて参加できませんでしたが、第二回は有難いことに休日に東京で開催されたので行ってきました。運営の皆様、参加者の皆様、懇親会でお話させて頂いた皆様、どうも有難うございました。

### 勉強会のまとめ記事
下記ブログにありますのでそちらをどうぞ。

 * 
<a href="http://d.hatena.ne.jp/ikeike443/20111009/p1">
第二回 Playframework 勉強会 in Tokyo やりました #play_ja - 複雑系スパゲティソース(はてな版)
</a><br />まとめ記事へのリンクが最後にあります。</li>
 * <a href="http://ponta027.blogspot.com/2011/10/playframework.html">Playframework勉強会#2まとめ（スライド）</a><br />発表資料をまとめてあります。</li>

なのでここでは、全体的な話しではなく関心の強いところに関してのみ書こうと思います。
ただの感想文です。

### Play!の今とこれから
Play!がどのような分野で使われ、どのように変化していくのかが今の大きな関心事であり、今回の参加理由でした。
今回の発表を聞いていると、Java界隈の救世主（候補）的な位置づけとして期待されているという段階なのでしょう。
主催者の@<a href="https://twitter.com/ikeike443">ikeike443</a>さんの会社のシャノンさんでは実際業務でPlay!を使われていたり、@<a href="https://twitter.com/genki_">genki_</a>さんは今まさに<a href="http://harp.ruru.ne.jp/sol/play/play2.pdf">SI案件で業務アプリケーションにPlay!を導入しようとしている</a>ところだそうで。

### Play!2.x系による変化
ただ、Play!が今後2.x系でScalaベースでの開発に切り替わるので、それによって今の勢いがどう変わっていくのでしょうか。JavaベースのPlay!1.xにScalaユーザーを引き込むのと、ScalaベースのPlay!2.xにJavaユーザーを引きこむのでは、大きく状況が変わってくると思います。自分はScalaユーザーなのでこの動きは非常に嬉しいですが、もしかしたら勢いが減速してしまうのではとちょっと不安になったり。
（プラグインのサポートがどちらか一方の言語に限定されていて、結局導入を見送るなんてこともあると思います。）

### Play!の外部環境
とはいえ、外部環境としてはPlay!のサポートPassSがちょくちょく出てきているので当分は勢いが衰えることはないと思います。単体でサーバーとして動作させることが可能なだけでなく、war化も可能なのでTomcatやJettyに載っけることができる環境なら動かせてしまいます。とくに@<a href="http://twitter.com/hagikuratakeshi">hagikuratakeshi</a>さんや@<a href="https://twitter.com/mitsuhiro">mitsuhiro</a>さんが取り上げていたようにHerokuのPlay!サポートによって趣味プログラミングとして手を出しやすくなってますし。

### ScalaのフレームワークとしてのPlay!
Scala界隈ではUnfilteredやBlueEyesのような積極的にScalaの機能を利用したFWが注目されています。（少なくとも私のTwitterのTL上では…)ただし、日本語ベースのScalaのフレームワークのリファレンスや関連記事はまだまだ少ないのが現状です。
Play!の場合は翻訳も積極的に行われていますし、勉強会に100人近く参加するような日本のPlay!コミュニティの存在は正直無視できないと思います。今後のPlay!界隈の動向に注目です。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1073</wp:post_id>
		<wp:post_date>2011-10-10 15:59:13</wp:post_date>
		<wp:post_date_gmt>2011-10-10 06:59:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>play-framework-study-in-tokyo</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>イベントの参加人数の遷移が見れるサービス『EventStats』を作りました。 #atnd #zusaar #partake</title>
		<link>http://blog.restartr.com/2011/12/10/eventstats/</link>
		<pubDate>Sat, 10 Dec 2011 09:58:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1096</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>イベント管理サービスについて</h3>
勉強会などでよく利用されるのが、イベント管理サービス。<br />
ATNDやZusaar,Partakeなど、様々なサービスがあり、現在も新しいものが生まれている状況。

今や勉強会を開催する上で必須のサービスとなっていますよね。

ですが、主催者や参加者にとってそれらのサービスで閲覧できるのは『今どのような状況か』ということだけです。それまでどのように参加者が増えてきたのか、その後も参加者が増えそうか、ということまでは見ることができません。

「今」ではなく「過去」を知りたい。(by @ReSTARTR)

ということで作りました。

<h3>イベントごとに登録数、補欠数、枠数を記録するサービス「EventStats｣</h3>
<ul><li><a href="http://eventstats.restartr.com">EventStats - イベントの統計情報が見れます</a></li></ul>

簡単にいうと<a href="http://klout.com">Klout</a>の勉強会バージョン（のとっかかり）です。
このサービスを使えば、登録数と枠数の推移を時系列のチャートで確認することができます。<br />
5分おきに各イベント管理サービスの情報を取得して蓄積し、情報を表示しているだけのシンプルなサービスです。<br />
<em>(※ SVGベースのチャートのため、androidでは2.4/3.0以降でないと見れません)</em>

あと、2011年11月頭くらいからデータ蓄積開始したのでそれ以前のイベントの履歴は見れない場合があるのと、Partakeの枠数が0人なのも蓄積ミスです。

<h3>使い方</h3>
<ol>
<li><a href="javascript:(function(){s=window.location.href.split('/');type='';if(s[2]=='atnd.org'&&s[3]=='events')type='atnd';else if(s[2]=='www.zusaar.com'&&s[3]=='event')type='zusaar';else if(s[2]=='partake.in'&&s[3]=='events')type='partake';else return false; window.location.href=['http://eventstats.restartr.com/events/'+type,s[4]].join('/');})();">ブックマークレット</a>をブラウザに登録する</li>
<li>履歴を知りたいイベント管理サービスの詳細ページに移動する</li>
<li>ブックマークレットを実行する</li>
</ol>

<h3>技術的なこと</h3>
とりあえずHeroku上でScalaのUnfilteredを使って動かしています。<br />
技術的な話しは追々。

<h3>今後どう料理するか</h3>
実はMA7の締切りぎりぎりに公開してました。（証拠↓）

<a href="https://ma7.mashupaward.jp/works/478?locale=ja">https://ma7.mashupaward.jp/works/478?locale=ja</a>

が、リソースが足りてないさくらのVPSで動かしていたので、公開したことはとくにアナウンスとかしてませんでした。（MA7には当然のごとく選考漏れでしたが。）で、それからHerokuへの移行を進めつつ機能の修正などをやってたという訳です。

今後は蓄積したデータをもとに、勉強会運営や勉強会への参加の助けとなる数値を加えていければいいなと。
実はテストとか負荷試験とかあんまりできてないのであまりイジメないでください^^;

<ul><li><a href="http://eventstats.restartr.com">EventStats - イベントの統計情報が見れます</a></li></ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1096</wp:post_id>
		<wp:post_date>2011-12-10 18:58:51</wp:post_date>
		<wp:post_date_gmt>2011-12-10 09:58:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>eventstats</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web%e3%82%b5%e3%83%bc%e3%83%93%e3%82%b9"><![CDATA[Webサービス]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>（もうすぐ）退職します。</title>
		<link>http://blog.restartr.com/2011/12/02/dropped-out/</link>
		<pubDate>Fri, 02 Dec 2011 12:27:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1109</guid>
		<description></description>
		<content:encoded><![CDATA[私事ですが現職の会社を退職することになり、本日無事に最終出社を終えてきました。
退職日は年明けですが、これから有給消化期間に入ります。

ということで記念碑的に退職エントリを書いておこうと思います。

有益な退職エントリをご希望の方は下記まとめに移動することをオススメします。

- [「退職しました」ブログエントリのまとめ - NAVER まとめ](http://matome.naver.jp/odai/2128832350940033301)
- [「退職しました。」系エントリーに学びが多い件 - NAVER まとめ](http://matome.naver.jp/odai/2132023611765736801)

### 現職のはなし

現職では、2006年に新卒入社してから約5年半、某ポータルサイトの開発全般を担当してました。

1年に1回部署異動が発生するくらい頻繁に体制変更があったおかげで様々な経験をさせてもらい、「自分がやりたいこと」を見つけるにはとても良い環境だったと思います。

入社してすぐ営業研修で外回りとか経験した後、データ入稿まわりを担当。その後1年間で二度のサイトリニューアルプロジェクトを経験。1年間のサイト運用期間を経て、今担当しているログシステムの開発をやりました。
入社から数年はPHP+RDBMSを中心としたWebアプリ開発に従事してましたが、ここ1年くらいはログシステムをHadoop/Hiveにリプレースする担当をやってました。年を経るごとにインフラに近づいていってる感じです。

### 技術的知見が広がるシロモノ

Hadoopって技術的には上から下まで幅広い知識とか素養が必要なんですよね。
実際のクラスタ構築はインフラチームの担当でしたが、それに至るまでの導入実験とかは自分でもひと通り経験していて、それにを肌で実感していくうちにもっとシステム全般に関わりたいと思うようになりました。現職ではアプリケーションとそれを載せるインフラの担当が明確に分かれていました。そのおかげで我々はアプリケーションの開発に専念できるのですが、一方でインフラにはどうしても疎くなりがちでした。(現在社内ではその垣根を改善する動きが出てきているので今後はもっと良い体制に変わっていくと思います)

そういう意味でHadoopは「技術の交差点」なんだと思います。非常に低いレイヤーからアルゴリズムまでがごっちゃごちゃに混ざったおもちゃ箱のような。それまでPHPのステートレスなシングルスレッド内であれこれするだけしたが、そこでは得られなかったものに興味関心が広がっていきました。Hadoopで実際何を実現するかはさておき、それをひと通り経験することで技術者として一歩前にすすむことができるし、その中でさらに深堀りしたいものを見つけることのできるシロモノだったと思います。

### オープンソースコミュニティ

ここ1年ほどは社外のカンファレンスや勉強会へも平日休日問わずよく参加してたのですが、上司にもそれついてよく理解して頂き、本当自分の動きたいようにさせてもらえたことは有難い限りです。
外の世界は自分が想像している以上でした。勉強会で発表を聴いたり懇親会で話しをさせていただいたりすることで、自分の足りないところが嫌でも見えてきました。現職に限らず今後どのように成長したいのか、について改めて考えるきっかけにもなりました。
今はちょっとメンタル的な問題もあって勉強会参加は自粛していますが、年明け以降にまた少しづつ参加させていただこうと思ってます。

### さいごに

年明けまでは旅行とか帰省とかしてゆっくり静養しつつ、技術的な取り組みも継続していこうと思います。暇を見つけて開発しているものもあるのですが、それも近々公開できると思います。あと、次の会社も決まっているのですが今後の話しはまたあらためて別の機会に。

（このブログの読者に現職の方がどれくらいいるのかわかりませんが）とにかく現職で関わった皆様には本当に大変お世話になりました。改めて御礼もうしあげます。

約5年半、どうもありがとうございました。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1109</wp:post_id>
		<wp:post_date>2011-12-02 21:27:57</wp:post_date>
		<wp:post_date_gmt>2011-12-02 12:27:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dropped-out</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>EventStatsはherokuとMongoLabとさくらVPSで動いている</title>
		<link>http://blog.restartr.com/2011/12/28/eventstats-consist-of-heroku-mongolab-and-sakura-vps/</link>
		<pubDate>Wed, 28 Dec 2011 12:27:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1174</guid>
		<description></description>
		<content:encoded><![CDATA[今月頭に[ブログ書きました](/2011/12/10/eventststs)が、EventStatsという勉強会の参加者の推移が見れるサービスを公開しました。

 * [EventStats - イベントの統計情報が見れます](http://eventstats.restartr.com)

まぁ自分が欲しかっただけなんですけど、使ってみて頂ければ幸いです。

今回はそのサービスの構成とかについて書いてみます。

### アジェンダ
 1. 全体像
 1. システム構成
 1. Gitリポジトリ
 1. MongoDBのPaaS
 1. 各イベント管理サービスAPIの違い
 1. 開発メモ

### 1.全体像
開発環境も含めて全体像を図にしてみました。(初Cacooですが超べんりですね！)<br />
赤い線がGit操作で、黒い点線がMongoDBへのアクセスです。

<a href="https://cacoo.com/diagrams/Cp2yo6tQNlxCm5av"><img border="1" alt="全体像" src="https://cacoo.com/diagrams/Cp2yo6tQNlxCm5av-2260A.png"></a>

### 2.システム構成

大きく分けてwebとクローラーの２つです。

webはherokuに、クローラーはさくらのVPSに配置。<br />
まずは優先してデータ蓄積を…ということでクローラーをpythonとmongodbで作成しました。<br />
(サービス的にはやいとこデータためないと意味ないので。)

クローラーは５分おきに起動するのでScalaよりPythonを選択しました。起動コスト重視です。<br />(*Scalaでサクサク開発できる程のスキルではないというのもありますが…*)

実行場所はherokuのworkerも考えたましたが、最終的に既に利用していたさくらVPSでcronジョブとして運用することに。<br />
ということでScalaのWebはデータ参照のみで、データの更新はしません。

### 3.Gitリポジトリ

webとクローラーは分けてGitで管理。リモートリポジトリはどちらもさくらのVPS上においています。<br />
ただし、本番リリースは開発PCからherokuに別途pushします。<br />
※webもさくらVPSにリモートリポジトリを持って、本番データを参照するステージング環境として利用しています。

#### eventstats-web

 * host: [heroku](http://www.heroku.com/) (Chedar)
 * scala
     * フレームワーク: [unfiltered](https://github.com/unfiltered/unfiltered) 0.5.1
     * mongodb接続: [casbah](http://api.mongodb.org/scala/casbah/2.1.5.0/) 2.1.5-1
     * テンプレートエンジン: [unfiltered-scalate](https://github.com/unfiltered/unfiltered/tree/master/scalate) (ssp)
     * テスティングライブラリ: [unfiltered-specs](https://github.com/unfiltered/unfiltered/tree/master/spec)
 * チャートのレンダリング: [Google Chart Tools](http://code.google.com/apis/chart/index.html)

#### eventstats-crawler

 * host: さくらのvps
 * python 2.6
   * フレームワーク: なし
   * mongodb接続: [pymongo](http://api.mongodb.org/python/1.11/) 1.11
   * テスティングライブラリ: [nose](http://readthedocs.org/docs/nose/en/latest/)
   * その他: [BeautifulSoup](http://www.crummy.com/software/BeautifulSoup/) (*partake.inのwebスクレイピングに利用*)

### 4.MongoDBのPaas

herokuプラグインとして[MongoLab](https://addons.heroku.com/mongolab)と[MongoHQ](https://addons.heroku.com/mongohq)の２つが提供されています。どちらも無料枠があるのですが、**MongoLabの方が無料で利用できる容量が大きい**のでこちらを選択。<br />
月額の利用料金は以下です。（括弧内は1MBあたりの金額の目安です）

*これ以上の容量も利用可能ですが個人で払う範囲ではないと思い除外してます。*

#### MongoLab
 * $ 0.00/240MB
 * $10.00/0.5GB  ($0.020/MB)
 * $20.00/2.0GB  ($0.009/MB)

#### MongoHQ
 * $ 0.00/ 16MB
 * $ 5.00/256MB  ($0.019/MB)
 * $15.00/2.0GB  ($0.007/MB)

### 5.各イベント管理サービスAPIの違い

まずは**atnd, zusaar, partake.inの３サービスに対応**。<br />
それぞれ検索APIを提供してくれているのですが、当然ながら規格とかもないのでリクエストもレスポンスも違いがあります。
データ蓄積する際にそのAPIの差異を吸収して、webアプリから参照する際は気にしなくていい戦略をとりました。

APIの違い検索のみに特化して違いをまとめると以下の通りです。

#### atnd

イベント数も多いので、このAPIをスタンダードに設定。

* API仕様
 * [http://api.atnd.org/](http://api.atnd.org/)
* リクエストパス
 * [/events/](http://api.atnd.org/events/)
   * イベントの検索
 * [/events/users/](http://api.atnd.org/events/users/)
   * イベントに参加しているユーザーの検索

#### zusaar

基本的にはatnd準拠っぽい感じだけど細かい違いがあります。

 * API仕様
   * [http://www.zusaar.com/doc/api.html](http://www.zusaar.com/doc/api.html)
 * リクエストパス
   * [/api/event/](http://www.zusaar.com/api/event/)
     * イベントの検索
   * [/api/event/user/](http://www.zusaar.com/api/event/user/)
     * イベントに参加しているユーザーの検索

atndとの違い

 * エントリポイントやデータのキー名が単数形
   * events→event
   * users→user
 * 明確なフィールドとしてのtwitter_idが無い
    * 管理者も参加ユーザーも
 * ハッシュタグがない
 * レスポンスはjson一択

#### partake.in

全然違うAPI。APIリストにあっても未実装がほとんどなので、利用する際はソースを確認したほうが良いです。

今回必要になりそうなAPIは２つくらいでした。

 * API仕様
   * [http://code.google.com/p/partakein/wiki/PublicWebAPI](http://code.google.com/p/partakein/wiki/PublicWebAPI)
 * リクエストパス
   * [/api/event/search](http://partake.in/api/event/search/)
     * イベントの検索
   * [/api/event/get](http://partake.in/api/event/get/)
     * イベントの詳細データ取得
 * APIのソース(抜粋)
   * [in.partake.controller.api.event.SearchAction.java](http://code.google.com/p/partakein/source/browse/trunk/Partake/src/main/java/in/partake/controller/api/event/SearchAction.java)
   * [in.partake.controller.api.event.EventAction.java](http://code.google.com/p/partakein/source/browse/trunk/Partake/src/main/java/in/partake/controller/api/event/EventAction.java)

その他の特徴は以下。

 * 複数イベントを特定して一括取得するAPIはない
 * フィールド名がcamelCase形式
 * レスポンスはjson一択
 * 検索パラメータも特殊かつ少数
 * 検索APIで取得できるのはイベントの固定情報のみ
   * 参加枠数はAPIから取得可能
   * 変動するユーザー数は取得不可能
   * →Webページをスクレイピングするしかないという結論

上記をふまえ、atnd/zusaarはJSON形式でAPIからデータ取得。<br />
partake.inのみイベントのリストをAPIから取得して、ユーザー数はWebページのスクレイピングで対応しました。

### 6.開発メモ

#### web(heroku)からもクローラー(さくらのvps)からも離れた場所にある

開発PC上だと気にならなかったのですが、1件1件findしてinsertやupdateをしていると当然遅いです。なのである程度まとめて一気にinsertする方針に変更しました(ベンチ結果はありません ^^;)。

更新はクローラーの１プロセスからのみ実行されるので、トランザクションとか意識しなくて良いです。なので比較的自由な構成がとれます。

#### ScalaでJSON API

まずはUnfilteredでJSON APIを作成。けど、jsでjson取得〜チャート生成の実行時間が思いの外大きいので、jsonも１枚のHTMLに埋め込む方針に変更。


### さいごに

ざっと書きだすとこんな感じです。まぁこんな構成もあるよ、ってくらいにしか言えませんが。<br />
webとクローラーを分けたことで、開発中のスキーマ変更が柔軟に行えたのは良かったのですが、スキーマ定義を共通で管理していないので、そのあたりうまく管理できると良いなと思ったり。

当初はもう少しwebの機能も多かったのですが、効率化をしているうちにシンプルな形に落ち着きました。Scalaのコードもかなり小規模なものになっています。

イベント管理者の方からのご意見ご要望などいただけると嬉しいです :)

 * [EventStats - イベントの統計情報が見れます](http://eventstats.restartr.com)
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1174</wp:post_id>
		<wp:post_date>2011-12-28 21:27:52</wp:post_date>
		<wp:post_date_gmt>2011-12-28 12:27:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>eventstats-consist-of-heroku-mongolab-and-sakura-vps</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="casbah"><![CDATA[casbah]]></category>
		<category domain="post_tag" nicename="eventstats"><![CDATA[eventstats]]></category>
		<category domain="post_tag" nicename="heroku"><![CDATA[heroku]]></category>
		<category domain="post_tag" nicename="mongodb"><![CDATA[mongodb]]></category>
		<category domain="post_tag" nicename="pymongo"><![CDATA[pymongo]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="unfiltered"><![CDATA[unfiltered]]></category>
		<category domain="category" nicename="web%e3%82%b5%e3%83%bc%e3%83%93%e3%82%b9"><![CDATA[Webサービス]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>はてなダイアリーからTumblrへデータ移行するpythonスクリプト</title>
		<link>http://blog.restartr.com/2012/03/25/python-script-for-moving-from-movabletype-to-tumblr/</link>
		<pubDate>Sat, 24 Mar 2012 17:30:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1191</guid>
		<description></description>
		<content:encoded><![CDATA[どうも。もうすぐ入社３ヶ月が経って試用期間が終わろうとしている状況な僕です。

すっかり停滞気味のブログですが保守も兼ねて投稿を。

### はてダから<del>はてブロ</del>Tumblrへ

とあるブログをはてなダイアリーで書いていたのですが、Tumblrへブログのデータを移行したいという要求が出てきました。ということでpythonで移行スクリプトを書いてみました。

### ソースコード

例によってGitHubにて公開しておきます。

* [https://github.com/ReSTARTR/mt2tumblr](https://github.com/ReSTARTR/mt2tumblr)

python2.6以外はテストしてません( ｰ`дｰ´)ｷﾘｯ


### 使い方

oauth2に依存しているので、実行前にインストールしておいてください。
[ccW_python]
pip install oauth2
[/ccW_python]

使い方はREADMEどおりです。いつもどおりのテキトー英文です。

1. はてなダイアリーの管理画面から"管理 > インポート/エクスポート"でMovableType形式のファイルをダウンロード
2. ダウンロードしたファイルをresourcesディレクトリに配置
3. tumblrにアプリケーションを登録( [http://www.tumblr.com/oauth/apps](http://www.tumblr.com/oauth/apps) )
4. consumer_keyとconsumer_secretを入手
5. config.pyを編集する
[ccW_python]
CONSUMER_KEY = '<consumer_key>'
CONSUMER_SECRET = '<consumer_secret>'
BASE_HOSTNAME = '<your_tumblr_url>' # '<your-id>.tumblr.com'のように"http://"は抜きで。
PARSE_FILE_PATH = 'path/to/movable_type_data.txt'
POST_STATE = 'publish' # 動作テストしたいなら'draft'にすると良いです。
[/ccW_python]

実行する
[ccW]
python run.py
[/ccW]
  * まずはファイルの内容を読み込んで、日時、カテゴリ、タイトルが表示されるので問題ないか確認

OAuth認証する。

  * 下記のようにURLが表示されるのでブラウザでアクセス。
[ccW]
open in browser:http://www.tumblr.com/oauth/authorize?oauth_token={OAUTH_TOKEN}
oauth_verifier:
[/ccW]
  * リダイレクト先のURLに含まれる"oauth_verifier"の値をコピーしてターミナルにペースト。
    * リダイレクト先は404になりますが、oauth_verifierが欲しいだけなのでそれで問題なしです。

これで、Tumblerへのインポートが始まります。

(ﾟдﾟ)ｳﾏｰ

### 注意事項

* APIの呼び出し回数の制限に引っかかるかもしれませんがそのへんのエラー制御はできていません。
* MovableType形式のデータをTumblrに移行するスクリプトとしてつくっていますが、実際にははてなダイアリーからMovableType形式でエクスポートしたデータでしかテストしていません。それ以外で動くかは保証できません…
* 投稿時間はJSTからGMTに変換してます。不要なら適当に編集してください。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1191</wp:post_id>
		<wp:post_date>2012-03-25 02:30:19</wp:post_date>
		<wp:post_date_gmt>2012-03-24 17:30:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-script-for-moving-from-movabletype-to-tumblr</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="tumblr"><![CDATA[tumblr]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>EventStatsをConnpassに対応させました</title>
		<link>http://blog.restartr.com/2012/12/22/eventstats-support-connpass/</link>
		<pubDate>Sat, 22 Dec 2012 13:54:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1251</guid>
		<description></description>
		<content:encoded><![CDATA[ふと思い立って、イベントの登録者数の推移が見れるEventStatsをConnpassにも対応させました。

* [EventStats - イベントの統計情報が見れます](http://eventstats.restartr.com)

[ConnpassのAPI](http://connpass.com/about/api/)はイベントの参加者リストまでは取得できませんが、イベント検索はほぼatnd準拠。なので追加したコード量はわずかでした。

作った当初は何かいろいろやってたくさんの人に使ってもらえるWebサービスにしたかったれけど、結局は参加者数の推移を見る以外に何の取り柄もないままです。


##### 余談

このWebサービス、クローラーはPython、WebサイトはScalaで書いていて、一年近く前に書いたコードなのでちょっとだけ時間かかりました。仕事で使っているpythonに比べて、シンタックスを見るのも数ヶ月ぶりなScalaは何をやっているか思い出すのにもひと苦労です。もっとScalaにも取り組みたいのですが…]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1251</wp:post_id>
		<wp:post_date>2012-12-22 22:54:54</wp:post_date>
		<wp:post_date_gmt>2012-12-22 13:54:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>eventstats-support-connpass</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="eventstats"><![CDATA[eventstats]]></category>
		<category domain="category" nicename="web%e3%82%b5%e3%83%bc%e3%83%93%e3%82%b9"><![CDATA[Webサービス]]></category>
		<category domain="post_tag" nicename="%e5%8b%89%e5%bc%b7%e4%bc%9a"><![CDATA[勉強会]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>gr_overridden</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>プログラマーにとっての『UMLっぽい何か』</title>
		<link>http://blog.restartr.com/2013/04/01/uml-for-programmer/</link>
		<pubDate>Mon, 01 Apr 2013 11:12:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1302</guid>
		<description></description>
		<content:encoded><![CDATA[わりと普遍的な話題だったので便乗です。

<a href="http://nekoya.github.com/blog/2013/04/01/useful-uml/"> UMLも捨てたもんじゃない - nekoya press </a>

<blockquote>
<ul>
<li>UMLは設計の技法ではない</li>
<li>頭の中を整理するため、あるいは人と共有する際の表現技法である</li>
</ul>
</blockquote>

とか、

<blockquote>UMLの厳密な書式ルールには全くこだわりはなく、大まかなイメージだけ伝われば、細かい部分は口頭でフォローすれば十分だと考えていています。そういう意味ではUMLを正しく使っているとは言えないのかも知れませんが、それはそれでいいんじゃないのと。
</blockquote>
<br />
は、まったくもって同意見で、「UML」という"なんだか面倒くさそうなイメージ"を捨てて、コードを整理もしくは伝達する補足的なものとして扱うことが大事だと思います。UMLを本を読んできっちり勉強する必要もなくて、英会話が完璧な文法に則る必要がないのと基本的に同じだと思います。<br />
所謂SEが用いるUMLではなくプログラマーにとってのUMLは、もっとくだけたもので良いのです。

<h4>いつやるか</h4>

どのフェーズでこの図の作成にとりかかるかが問題になると思いますが、自分の場合は以下の場合に作成を試みることが多いです。<br />
（主にクラス図作成の場合を想定しています。）

<strong>1. プロトタイプ的に作り始めたコードが、ある程度育ってきて全体が見えづらいと感じた時</strong>

これは自分のために作成するもの。なのでUMLのルールに準拠する必要はありませんので、どちらかといえば書き捨て型といえます。
（※ドキュメントの無いコードを読む場合も書き捨て型で作成します。）
そして、この図をもとに設計を見なおしたりします。

<strong>2. 自分が作ったコードを他の誰かが読む時</strong>

これは他人のために作成するもの。すでに設計が固まった段階のコードを追いかける上での補足情報になります。<br />
完全にUML準拠する必要はないでしょうが、ある程度は従ったほうが余計な誤解もなくなるかもしれません。1である程度整理ができているのでこの段階での作成は非常にそれ程苦ではないはずです。

どちらの場合もコードありきで、後追いでの図形作成になります。注意すべきなのは、図にすべての情報を詰め込むわけではなく、必要最低限の情報に留めることで図をシンプルに保つことは必要です。

とまぁ、これくらいシンプルなルールであれば、普段の開発フローに取り入れることはさほど大きなコストではないと考えます。多くの人はこれくらいのことはやっているんじゃないかとは思いますが、先のブログでも書かれている通り表立って議論されることはあまりないように感じます。

<h4>図を描くためのツール</h4>

図形作成のためにいちいち<a href="http://astah.change-vision.com/ja/index.html">astah*</a>やExcel()のようなアプリケーションを立ち上げるのは面倒ですよね。<br />
<a href="https://drive.google.com">Google Drive</a>の「図形描画」や「プレゼンテーション」がオススメです。きっちりUML準拠の図を作成するわけではないので、クラス図(もどき)ならこれで十分ですし、共有も簡単です。シーケンス図はちょっと書きづらいかもしれませんが、そんな時はノートやホワイトボードに書いたものを写真に撮って適当な場所で共有すればOKでしょう。

ところで、オブジェクト指向の場合ではなく、（純粋）関数型の場合はどうなのでしょうかね。数式？]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1302</wp:post_id>
		<wp:post_date>2013-04-01 20:12:54</wp:post_date>
		<wp:post_date_gmt>2013-04-01 11:12:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>uml-for-programmer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="document"><![CDATA[document]]></category>
		<category domain="post_tag" nicename="oop"><![CDATA[oop]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
		<category domain="post_tag" nicename="uml"><![CDATA[uml]]></category>
		<category domain="category" nicename="%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Kauli株式会社を退職しました</title>
		<link>http://blog.restartr.com/2013/04/02/retirement201303/</link>
		<pubDate>Tue, 02 Apr 2013 13:45:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1346</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.flickr.com/photos/53244662@N04/8599680561/" title="Cleanup my keyboard by ReSTARTR_y, on Flickr"><img src="http://farm9.staticflickr.com/8106/8599680561_da30653690.jpg" width="500" height="333" alt="Cleanup my keyboard"></a>

<em>※2013/04/04 更新:会社名を公開しました</em>

3月末付で<a href="http://kau.li">Kauli株式会社</a>を退職しました。<br />
4月1日だと嘘っぽくなるかなと思い、1日ずらしてのご報告です。

2012年01月入社なので、1年3ヶ月という短い間でしたが、これまでで最も充実した1年だったように思います。

大規模な広告配信という技術的に非常に挑戦しがいのある分野で、非常に技術力の高いエンジニアと共にPythonプログラマーとして充実した日々を過ごさせてもらいました。<br />
「大規模なトラフィックを直に感じながらアプリケーション開発に取り組みたい」という希望を胸に入った会社で、

* データストアの検証(結果的にRedisを採用)
* 合計数十台自作サーバーの組立(参考：<a href="https://gist.github.com/nekoya/3749146" title="Kauli自作サーバ組み立てマニュアル" target="_blank">Kauli自作サーバ組み立てマニュアル</a>)
* 開発部総出でデータセンターでサーバーラッキング
* 某社SOAP APIに難儀
* 開発のベースをgithubに移行
* nginx + Python(werkzeug+uWSGI) + Redisによる広告配信システムの開発
* アプリケーションのパフォーマンスチューニング

等々、これまでにない経験を1年ちょっとという短い期間に経験できました。

正直離れるのが勿体無いとも思うのですが、キャリアの見直しをしたかったとか諸々の理由により、退職することを決意しました。<br />
同僚の方々には大変お世話になりました。どうもありがとうございました。

転職先はまだ決まっていないので、転職活動を進めつつ、じっくり勉強しておきたかったことに１つずつ取り組んでいこうかという感じです。

良い会社があればぜひ<a href="https://twitter.com/restartr">@ReSTARTR</a>にご紹介ください＞＜


...

なお、Kauli株式会社は継続してエンジニアを募集中のようですので、<br />
大規模広告配信システムをPythonで開発したい方々は下記からぜひぜひご応募を。

* <b><a href="http://kau.li/jp/pages/recruit">Kauli - 採用情報</a></b>

それでは。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1346</wp:post_id>
		<wp:post_date>2013-04-02 22:45:29</wp:post_date>
		<wp:post_date_gmt>2013-04-02 13:45:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>retirement201303</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="etc"><![CDATA[雑記]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_tiny_url</wp:meta_key>
			<wp:meta_value><![CDATA[s:178:"a:3:{s:3:"url";s:53:"http://blog.restartr.com/2013/04/02/retirement201303/";s:5:"limit";i:1380633302;s:8:"tiny_url";s:53:"http://blog.restartr.com/2013/04/02/retirement201303/";}";]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_twet_result</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>pythonのテストにpytestを使ってみた</title>
		<link>http://blog.restartr.com/2013/04/05/my-first-pytest/</link>
		<pubDate>Fri, 05 Apr 2013 12:00:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1366</guid>
		<description></description>
		<content:encoded><![CDATA[pytestを使い始めました。

* <a href="http://pytest.org/latest/">pytest: helps you write better programs</a>

まだまだ機能は把握しきれていませんが、良いと思ったことは3つ。

1. テストがコケた箇所のコードがレポート内容に表示される
2. テスト対象を初期化したものの受け渡し方をスマートにできる
3. pytest.vimがなかなか使える

### 1.テストがコケた箇所のコードがレポート内容に表示される

これが巷でよく聞く一番のメリットかとは思いますが、コケたときの情報が全然違います。
pytestはかなり詳細に表示してくれるので、レポートの内容だけでどこをどう直せば良いか把握できます。

#### unittestの実行結果(-vオプション付き)

<a href="http://www.flickr.com/photos/53244662@N04/8621946368/" title="unittest by ReSTARTR_y, on Flickr"><img src="http://farm9.staticflickr.com/8523/8621946368_d7bc9a450d_z.jpg" width="640" height="220" alt="unittest"></a>

#### pytestの実行結果(-vオプション付き)

<a href="http://www.flickr.com/photos/53244662@N04/8620844529/" title="pytest by ReSTARTR_y, on Flickr"><img src="http://farm9.staticflickr.com/8244/8620844529_ce66ff7f9c_z.jpg" width="640" height="401" alt="pytest"></a>

文字列比較の場合は差分表示してくれたりするので便利です。


### 2. テスト対象を初期化したものの受け渡し方をスマートにできる

これが結構良い感じだと思いました。

かなり単純なクラスを対象にして例を書きます。

[ccW_python]
# -*- coding: utf-8 -*-

class Hoge(object):

    def __init__(self, v):
        self.val = v

    def update(self, v):
        self.val = v
[/ccW_python]

#### python同梱のunittestで書く

こんな感じで、self.hogeを使ってテスト対象を受け渡します。

[ccW_python]
# -*- coding: utf-8 -*-
from hoge import Hoge
import unittest

class TestHoge1(unittest.TestCase):

    def setUp(self):
        self.hoge = Hoge(1)

    def test_type(self):
        self.assertIsInstance(self.hoge, Hoge)

    def test_val(self):
        self.assertEqual(self.hoge.val, 1)

        self.hoge.update('hoge')
        self.assertEqual(self.hoge.val, 'hige')

if __name__ == '__main__':
    unittest.main()
[/ccW_python]

pytestで書くとこんな感じになります。

[ccW_python]
# -*- coding: utf-8 -*-
from hoge import Hoge
import pytest

class TestHoge1(object):

    def pytest_funcarg__hoge(request):
        return Hoge(1)

    def test_type(self, hoge):
        assert isinstance(hoge, Hoge)

    def test_val(self, hoge):
        assert hoge.val == 1

        hoge.update('hoge')
        assert hoge.val == 'hige'

if __name__ == '__main__':
    pytest.main()
[/ccW_python]

何が良いかっていうと、各テストメソッドで必要な初期化済みHogeインスタンスを、pytest_funcarg__hoge()で作って渡してやることができます。pytest_funcarg__NAMEを定義すれば、各テストメソッドでNAMEとして引数にとることができるわけです。(<a href="http://pytest.org/latest-ja/funcargs.html">テスト関数 (funcargs) にオブジェクトを注入</a>)

unittest.TestCaseのsetUpを使う場合、self.hogeに一旦入れてやらないといけないし、各テストメソッドではself.hogeでアクセスする必要も出てきます。

見た目が簡潔になるのはとても良いことです。

### 3. pytest.vimがなかなか使える

vimのプラグインにpytest.vimっていうのがありました。
これもなかなか使い勝手が良いです。

詳しくは下記動画を御覧ください。

* <a href="http://vimeo.com/19774046"> pytest.vim 0.0.5 on Vimeo </a>

pytestの概要は以下スライドにて。

<iframe src="http://www.slideshare.net/slideshow/embed_code/14006990" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/pfctdayelise/funcargs-other-fun-with-pytest" title="Funcargs &amp; other fun with pytest" target="_blank">Funcargs &amp; other fun with pytest</a> </strong> from <strong><a href="http://www.slideshare.net/pfctdayelise" target="_blank">Brianna Laugher</a></strong> </div>

他の機能は触りながらおいおい掴んでいければなと。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1366</wp:post_id>
		<wp:post_date>2013-04-05 21:00:24</wp:post_date>
		<wp:post_date_gmt>2013-04-05 12:00:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-first-pytest</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_tiny_url</wp:meta_key>
			<wp:meta_value><![CDATA[s:176:"a:3:{s:3:"url";s:52:"http://blog.restartr.com/2013/04/05/my-first-pytest/";s:5:"limit";i:1380718874;s:8:"tiny_url";s:52:"http://blog.restartr.com/2013/04/05/my-first-pytest/";}";]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_twet_result</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>pythonのクロージャに変数を束縛する方法</title>
		<link>http://blog.restartr.com/2013/04/17/bind-a-variable-to-closure-in-python/</link>
		<pubDate>Wed, 17 Apr 2013 13:19:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1378</guid>
		<description></description>
		<content:encoded><![CDATA[ハマったので。

[ccW_python]
a = 2
double = lambda x: x*a
double(4)  # 8 (=4*2)
double(10) # 20 (=10*3)

a = 3
double(4)  # 12 # WTF?
double(10) # 30
[/ccW_python]

doubleというクロージャ内の変数aを、クロージャ宣言時のaで束縛したいのです。

対応は２つ。

1. lambdaのデフォルト引数で束縛する
2. functools.partialで束縛する

### 1. lambdaのデフォルト引数で束縛する

参考：[closures - Python lambda's binding to local values - Stack Overflow](http://stackoverflow.com/questions/10452770/python-lambdas-binding-to-local-values)

[ccW_python]
a = 2
double = lambda x, y=a: x*y
double(4)  # 8 (=4*2)
double(10) # 20 (=10*3)

a = 3
double(4)  # 12 (=4*2)
double(10) # 30 (=10*2)
[/ccW_python]

### 2. functools.partialで束縛する

やってることは1と同じなのですが、一応動くよねということで。

[ccW_python]
from functools import partial
a = 2
double = partial(lambda x, y=None: x*y, y=a)
double(4) # 8 (=8*2)
double(10) # 30 (=10*2)

a = 3
double(4)  # 12 (=4*2)
double(10) # 30 (=10*2)
[/ccW_python]

### そもそも変数上書きしなければ良いんじゃない？

普段は変数の上書きは基本的にやりません。なので変数の束縛とかあまり意識してませんでした。

今回、プロジェクトオイラーを解くにあたって、素数ジェネレータをつくろうとした結果、ハマったのでした。

[ccW_python]
from itertools import ifilter, count

def gen_primes():
    it = count(2)  # [2, 3, 4, ...]
    while True:
        v = it.next()
        yield v
        it = ifilter(lambda x, y=v: x % y > 0, it)
        # 当初は以下のようにしていた
        # これだと次のループ時のifilter内でvの値が変わってしまう
        # it = ifilter(lambda x: x % v > 0, it)

for v in gen_primes():
    print v
    if v > 100:
        break
[/ccW_python]

### 余談1: functools.partialの使いどころ

ちょくちょく[functools.partial](http://docs.python.jp/2.7/library/functools.html#functools.partial)使ってましたが、そんなの使わなくてもlambdaで事足りますね。今更気づきました...

[ccW_python]
mul = lambda a, b: a * b
mul(3,2)  # 6

# lambda
double = lambda a, b=2: mul(a,b)
double(3)  # 6

# functools.partial
import functools
double = functools.partial(mul, 2)
double(3)  # 6
[/ccW_python]

こうなると、functools.partialの使いどころが難しいですね。
戻り値がpartialオブジェクトなので、あとで引数とかが参照できることくらいでしょうか...

[ccW_python]
>>> f = functools.partial(lambda a, b=0:a+b, b=0)
>>> f
<functools.partial object at 0x1092b2ec0>
>>> f.args
()
>>> f.keywords
{'b': 0}
>>> f.func
<function <lambda> at 0x1092eab18>
>>> f.args = (1,)  # 引数を後から上書きはできない
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: readonly attribute
[/ccW_python]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1378</wp:post_id>
		<wp:post_date>2013-04-17 22:19:14</wp:post_date>
		<wp:post_date_gmt>2013-04-17 13:19:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bind-a-variable-to-closure-in-python</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="closure"><![CDATA[closure]]></category>
		<category domain="post_tag" nicename="functools"><![CDATA[functools]]></category>
		<category domain="post_tag" nicename="lambda"><![CDATA[lambda]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_tiny_url</wp:meta_key>
			<wp:meta_value><![CDATA[s:218:"a:3:{s:3:"url";s:73:"http://blog.restartr.com/2013/04/17/bind-a-variable-to-closure-in-python/";s:5:"limit";i:1381757067;s:8:"tiny_url";s:73:"http://blog.restartr.com/2013/04/17/bind-a-variable-to-closure-in-python/";}";]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_twet_result</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>GoとPythonをZeroMQで繋ぐ</title>
		<link>http://blog.restartr.com/2013/04/26/connect-go-and-python-with-zeromq/</link>
		<pubDate>Fri, 26 Apr 2013 14:34:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.restartr.com/?p=1425</guid>
		<description></description>
		<content:encoded><![CDATA[最近Rubyでプロジェクトオイラーを解きながらRubyに慣れようとしてるのですが、ちょっと飽きてきたので息抜きにGoを書いたりしています。

ついでにZeroMQも試してみたかったので、GoとPythonをZeroMQで繋いでみました。

構成はこんな感じで、Python(かGo)clientを起動し、Goで動くmonitorq経由でGoのserverにつながります。<br />
PUB/SUBでmonitorからモニタリングできるのがミソです。

[cc]
                  +----------------------------------------+
                  |                                        |
  +------+        |--------------------------+     +-----+ |
  |client|--------|9001     monitorq     9002|-----|serv | |
  |(REQ) |        |(ROUTER)   9003   (DEALER)|     |(REP)| |
  +------+        |--------------------------+     +-----+ |
                  |          |(PUB)                        |
                  |          |                             |
                  |          |                             |
                  |          |(SUB)                        |
                  |      +-------+                         |
                  |      |monitor|                         |
                  |      +-------+                         |
                  +----------------------------------------+
[/cc]
<em>※client/server/monitorは複数たちあげるとよしなに振り分けてくれます。</em>


* monitorqでfan-in/outする
[ccW]
$ go run queue.go monitorq
[/ccW]

* clientから"PING"を投げる(と、"PONG#<pid>"が帰る)
[ccW]
$ python run queue.py client
PONG#<28870>
PONG#<28870>
 :
[/ccW]

* serverから"PONG"を返す(clientからのPINGを表示)
[ccW]
$ go run queue.go serv
Recv: PING#<73835>
Recv: PING#<73835>
 :
[/ccW]

* monitorでリクエスト総数をモニタリング
[ccW]
$ go run queue.go monitor
MONITOR: IN: 2082, OUT 2082
MONITOR: IN: 2083, OUT 2083
 :
[/ccW]

コードはgistにあげてます。

* [gist](https://gist.github.com/ReSTARTR/5467656)

ZeroMQなら他にもいろんな構成がとれるので、使いどころは結構あるのではないかと。

今回、不慣れなGoで書いてみましたが、これくらいであればもわりと素直にかけるなぁという印象です。<br />
Goで書かれたZeroMQのサンプルは以下githubリポジトリにたくさんあるので、覗いてみると色々勉強になります。

* [zguide/examples/Go at master · imatix/zguide](https://github.com/imatix/zguide/tree/master/examples/Go)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1425</wp:post_id>
		<wp:post_date>2013-04-26 23:34:48</wp:post_date>
		<wp:post_date_gmt>2013-04-26 14:34:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>connect-go-and-python-with-zeromq</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="go"><![CDATA[go]]></category>
		<category domain="category" nicename="golang"><![CDATA[golang]]></category>
		<category domain="post_tag" nicename="golang"><![CDATA[golang]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="zeromq"><![CDATA[zeromq]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_tiny_url</wp:meta_key>
			<wp:meta_value><![CDATA[s:212:"a:3:{s:3:"url";s:70:"http://blog.restartr.com/2013/04/26/connect-go-and-python-with-zeromq/";s:5:"limit";i:1382541250;s:8:"tiny_url";s:70:"http://blog.restartr.com/2013/04/26/connect-go-and-python-with-zeromq/";}";]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_twet_result</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
