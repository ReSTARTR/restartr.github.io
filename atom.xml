<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[I Will Survive]]></title>
  <link href="http://blog.restartr.com/atom.xml" rel="self"/>
  <link href="http://blog.restartr.com/"/>
  <updated>2015-10-21T20:32:37+09:00</updated>
  <id>http://blog.restartr.com/</id>
  <author>
    <name><![CDATA[ReSTARTR]]></name>
    <email><![CDATA[yoshida.masaki+restartr@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elixir/PhoenixでISUCON5予選の参考実装を書いた]]></title>
    <link href="http://blog.restartr.com/2015/10/21/write-an-isucon5-qualify-app-in-elixir-slash-phoenix/"/>
    <updated>2015-10-21T19:32:17+09:00</updated>
    <id>http://blog.restartr.com/2015/10/21/write-an-isucon5-qualify-app-in-elixir-slash-phoenix</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/isucon/isucon5-qualify">ISUCON5予選の参考実装</a>を、Elixir/Phoenixで実装してみました。</p>

<p>汚いながらもとりあえずひととおり動いたので現時点でのコードをGithubにpush。</p>

<ul>
  <li><a href="https://github.com/ReSTARTR/isucon5-qualify-elixir">github.com/ReSTARTR/isucon5-qualify-elixir</a></li>
</ul>

<h3 id="section">実装について補足</h3>

<p>まずは他言語の初期実装と同等のSQLを再現することを目標としました。</p>

<p>Goの実装を参考に、まずは各ページを実装してブラウザでひととおり機能が実装できているか確認。
その後ベンチマークをすべて通過するまでひたすら修正するという手順ですすめました。</p>

<p>そのため、テンプレートの細かい表示(時刻フォーマット等)の不備や、ベンチマーカーがチェックしない機能が抜けている可能性があります。</p>

<h3 id="section-1">ベンチマーク結果</h3>

<p>気になる性能ですが、Goと比較すると以下のような結果となりました。</p>

<p>※VirtualBox上にたてたMySQLにたいして、ホストのMacOSX上でアプリケーションを実行しています</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Lang</th>
      <th style="text-align: right">requests</th>
      <th style="text-align: right">elapsed</th>
      <th style="text-align: right">success</th>
      <th style="text-align: right">redirect</th>
      <th style="text-align: right">failure</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Elixir/Phoenix</td>
      <td style="text-align: right">333</td>
      <td style="text-align: right">76093</td>
      <td style="text-align: right">239</td>
      <td style="text-align: right">93</td>
      <td style="text-align: right">1</td>
    </tr>
    <tr>
      <td style="text-align: left">Go</td>
      <td style="text-align: right">138</td>
      <td style="text-align: right">106728</td>
      <td style="text-align: right">98</td>
      <td style="text-align: right">39</td>
      <td style="text-align: right">1</td>
    </tr>
  </tbody>
</table>

<p><a href="https://github.com/isucon/isucon5-qualify/blob/master/eventapp/lib/score.rb">スコア計算式</a>をもとに計算してみると以下のようなスコアとなります(eror, exception, violationsはないので減点は無し)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Eixir/Phoenix</span>
</span><span class="line"><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">001</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">base_score</span> <span class="o">=</span> <span class="mi">239</span> <span class="o">+</span> <span class="mi">93</span> <span class="o">*</span> <span class="mi">0</span><span class="o">.</span><span class="mi">1</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="mi">248</span><span class="o">.</span><span class="mi">3</span>
</span><span class="line"><span class="c1"># Go</span>
</span><span class="line"><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">002</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">base_score</span> <span class="o">=</span> <span class="mi">98</span> <span class="o">+</span> <span class="mi">39</span> <span class="o">*</span> <span class="mi">0</span><span class="o">.</span><span class="mi">1</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="mi">101</span><span class="o">.</span><span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同じクエリを再現したうえで、だいたい2.5倍くらいの性能差？でしょうか。
が、完全に模倣できているか自信はないのであくまで参考程度ということで…</p>

<p>以下にベンチマーカーの出力内容も貼っておきます。</p>

<p>elixir/phoenix版の結果</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="nt">&quot;valid&quot;</span> <span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">  <span class="nt">&quot;requests&quot;</span> <span class="p">:</span> <span class="mi">333</span><span class="p">,</span>
</span><span class="line">  <span class="nt">&quot;elapsed&quot;</span> <span class="p">:</span> <span class="mi">76093</span><span class="p">,</span>
</span><span class="line">  <span class="nt">&quot;done&quot;</span> <span class="p">:</span> <span class="s2">&quot;[{Isucon5InitExecutor},{BootstrapChecker},{Isucon5Load,Isucon5Load,Isucon5Load,Isucon5Load,Isucon5Checker}]&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="nt">&quot;responses&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class="line">    <span class="nt">&quot;success&quot;</span> <span class="p">:</span> <span class="mi">239</span><span class="p">,</span>
</span><span class="line">    <span class="nt">&quot;redirect&quot;</span> <span class="p">:</span> <span class="mi">93</span><span class="p">,</span>
</span><span class="line">    <span class="nt">&quot;failure&quot;</span> <span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class="line">    <span class="nt">&quot;error&quot;</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class="line">    <span class="nt">&quot;exception&quot;</span> <span class="p">:</span> <span class="mi">0</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nt">&quot;violations&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="p">]</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="err">BUILD</span> <span class="err">SUCCESSFUL</span>
</span><span class="line">
</span><span class="line"><span class="err">Total</span> <span class="err">time:</span> <span class="mi">1</span> <span class="err">mins</span> <span class="mf">27.449</span> <span class="err">secs</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>go版の結果</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="nt">&quot;valid&quot;</span> <span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">  <span class="nt">&quot;requests&quot;</span> <span class="p">:</span> <span class="mi">138</span><span class="p">,</span>
</span><span class="line">  <span class="nt">&quot;elapsed&quot;</span> <span class="p">:</span> <span class="mi">106728</span><span class="p">,</span>
</span><span class="line">  <span class="nt">&quot;done&quot;</span> <span class="p">:</span> <span class="s2">&quot;[{Isucon5InitExecutor},{BootstrapChecker},{Isucon5Load,Isucon5Load,Isucon5Load,Isucon5Load,Isucon5Checker}]&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="nt">&quot;responses&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class="line">    <span class="nt">&quot;success&quot;</span> <span class="p">:</span> <span class="mi">98</span><span class="p">,</span>
</span><span class="line">    <span class="nt">&quot;redirect&quot;</span> <span class="p">:</span> <span class="mi">39</span><span class="p">,</span>
</span><span class="line">    <span class="nt">&quot;failure&quot;</span> <span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class="line">    <span class="nt">&quot;error&quot;</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class="line">    <span class="nt">&quot;exception&quot;</span> <span class="p">:</span> <span class="mi">0</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nt">&quot;violations&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="p">]</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="err">BUILD</span> <span class="err">SUCCESSFUL</span>
</span><span class="line">
</span><span class="line"><span class="err">Total</span> <span class="err">time:</span> <span class="mi">1</span> <span class="err">mins</span> <span class="mf">54.937</span> <span class="err">secs</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">今後</h3>

<p>今回のISUCONアプリは結構機能を積んでいるため、Elixir/Phoenixに慣れるにはちょうど良いテーマなのではないかと思います。</p>

<p>ただPhoenix初心者ということもあり、実装していたほとんどの時間は”Ectoでどうやってクエリを再現するか”に使っていて、
ロジックの書き方とか各モジュールの使い分けとかまであまり気にできてません。
Phoenix/Ectoの有効性を台無しにしていること間違いなし…
まぁ、そこんところはおいおい感覚をつかんでいこうかな、と。</p>

<p>このあとはEctoの抽象化を活かしつつさらに最適化をすすめていったときに、どのような性能を発揮するのか気になるところです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Go Programming Blueprints"を読んだ]]></title>
    <link href="http://blog.restartr.com/2015/10/15/go-programming-blueprints/"/>
    <updated>2015-10-15T19:54:29+09:00</updated>
    <id>http://blog.restartr.com/2015/10/15/go-programming-blueprints</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00T4ACPA0)">
<img src="https://raw.githubusercontent.com/matryer/goblueprints/master/artwork/bookcover.jpg" alt="Go Blueprints by Mat Ryer book cover" />
</a></p>

<ul>
  <li><a href="http://www.amazon.co.jp/gp/product/B00T4ACPA0">Go Programming Blueprints - Solving Development Challenges with Golang</a></li>
</ul>

<p>最近Kindleで購入したので、でひととおり読んで写経してみました。</p>

<h3 id="section">概要と雑感</h3>

<p>2015年1月に発売された書籍であり、Goのバージョンでいうと1.3から1.4の頃に書かれたものです。
著者はGolang UK Conference 2015でトークもしていた<a href="https://twitter.com/matryer">@matryer</a>さん。
(<em>※<a href="https://www.youtube.com/watch?v=tIm8UkSf6RA">Golang UK Conference 2015 - Mat Ryer - Building APIs - YouTube</a></em>)</p>

<p>いくつかのGo製アプリケーション開発を通じて、Goの機能・パターンを学習する、という感じのもの。機能やパターンについて網羅的ではないものの、特定のユースケースをベースにしているため、パターンの理解は容易に感じます。取り扱うトピックも、web/apiサーバーとコマンドラインツールがバランスよく取り上げられています。</p>

<p>対象読者は「すべてのGoプログラマー」と記載がありますが、<a href="https://tour.golang.org">A Tour of Go</a>をひととおりやったあとくらいがちょうど良い気がします。</p>

<p>リファレンス的な構成の他書や<a href="https://golang.org/doc/effective_go.html">Effective Go</a>のような公式ドキュメントのものとうまくすみ分けができているのではないかと。</p>

<p>ただ誤字・脱字が少し目立つかな（章ごとに1,2個程度ですが)という点が残念ではありますが、比較的わかりやすいミスなので読んでいて混乱するほどではありません。</p>

<p><a href="https://github.com/golang/go/wiki/Books">Go Books</a>としては比較的マイナーっぽく、日本語圏の情報もないので購入はちょっとしたギャンブルでしたが、ある程度まとまったストーリーとして読めるGo関連の書籍は少ない印象ですし、自分としてはちょうど良い買い物だったかなと思います。</p>

<p><em>※ソースコードも<a href="https://github.com/matryer/goblueprints">matryer/goblueprints</a>に公開されています</em></p>

<p>_※当然英語ですが、さほど読みにくい感じはなかったです</p>

<h3 id="section-1">構成</h3>

<p>全8章で作成するアプリケーションのうち、1章で簡潔するものと章をまたがるものがあり、構成は以下のようになっています。</p>

<h4 id="websocket">1, 2, 3: websocketによるチャットアプリケーション</h4>

<ul>
  <li>http.Handle/HandleFuncの基本的な使い方とか、TDDによるパッケージ開発、</li>
  <li>ソーシャルログイン機能の追加(OAuthは<a href="https://github.com/stretchr/gomniauth">stretchr/gomniauth</a>を利用)</li>
  <li>アイコン画像のアップロード機能の追加</li>
</ul>

<h4 id="section-2">4: 空きドメイン検索ツール</h4>

<ul>
  <li>Unixコマンドのように、STDIN/OUTを使った複数コマンドによる連携
    <ul>
      <li><code>$ 単語生成 | 単語の補正 | TLDの付与 | WHOISチェック</code></li>
      <li>これらをos.Command.Stdin,Stdoutで束ねるコマンド
        <ul>
          <li><em>.o(シェルスクリプトでも良いのではと思いますが、外部プロセスとの連携の練習ということで…)</em></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="twitter">5, 6: Twitterのリアルタイムカウンター</h4>

<ul>
  <li>複数のプロセスで構成される分散システム
    <ol>
      <li>twitter streaming apiから拾ったツイートを<a href="http://nsq.io">NSQ</a>に追加するプログラム</li>
      <li>NSQのsubscriberが単語別件数を集計して、1秒ごとにMongoDBを更新するプログラム</li>
      <li>MongoDBの内容を管理・閲覧ツール(RESTful APIとWEBアプリ)</li>
    </ol>
  </li>
</ul>

<p>トピック</p>

<ul>
  <li>シグナルトラップによる安全なプロセス終了処理</li>
  <li>sync.Mutexによる協調動作の実装</li>
  <li><a href="https://github.com/stretchr/graceful">stretchr/graceful</a>での安全な終了処理</li>
</ul>

<h4 id="google-places-api">7: Google Places APIを使ったロケーション推薦アプリケーション</h4>

<ul>
  <li>iotaによるEnum相当の実現</li>
  <li>TDDでパッケージ開発
    <ul>
      <li><em>.o(ここで<a href="https://github.com/cheekybits">cheekybits/is</a>が出てきたけど、全体で統一感出してほしい…)</em></li>
    </ul>
  </li>
  <li>型アサーションによるキャスト</li>
</ul>

<h4 id="section-3">8 ファイル自動バックアップシステム</h4>

<ul>
  <li>2つのCLIツールの作成
    <ul>
      <li>backup: バックアップする対象リストの管理コマンド
        <ul>
          <li>メタデータ管理は<a href="https://github.com/mattyer/filedb">mattyer/filedb</a></li>
        </ul>
      </li>
      <li>backupd: メタデータをもとに実ファイル監視とバックアップ実行する常駐プログラム</li>
    </ul>
  </li>
</ul>

<h3 id="section-4">蛇足</h3>

<p>そういえば、カーニハン著のThe Go Programming Languageが11月発売とのこと</p>

<ul>
  <li><a href="http://www.amazon.co.jp/gp/product/0134190440">The Go Programming Language</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DockerとWeaveを使って1台のマシンでConsulを複数動かしてみる]]></title>
    <link href="http://blog.restartr.com/2015/03/09/consul-cluster-with-docker/"/>
    <updated>2015-03-09T00:22:13+09:00</updated>
    <id>http://blog.restartr.com/2015/03/09/consul-cluster-with-docker</id>
    <content type="html"><![CDATA[<p>軽くConsulを試してみたくて、でもVagrantで複数台仮想マシンを立ち上げるのはちょっと気が重い…ということでUbuntu14.10 on MacBookAirにDockerコンテナを複数立ち上げてクラスタを構築してみるテストをしました。</p>

<p>Dockerfileとか簡単な動かし方(を適当英語で書いたもの)をgithubにあげてあります</p>

<ul>
  <li><a href="https://github.com/ReSTARTR/test-consul-with-docker">ReSTARTR/test-consul-with-docker</a></li>
</ul>

<p>Docker内のプロセスがLISTENするポートに対してコンテナ外から接続する場合、<code>-p</code>でホストのポートにひもづけるか、<code>--link</code>でコンテナ同士をつなぐのが最も手軽な方法です。が、consulは複数のポート（HTTP API用、DNS用、ゴシッププロトコル用等）を使うため、この手軽な方法でクラスタを構築することができません。</p>

<p>Dockerコンテナの接続パターンとしてはいくつかあって、deeeetさんのブログ記事に詳しく書かれています。</p>

<ul>
  <li><a href="http://deeeet.com/writing/2014/12/01/docker-link-pattern/">Dockerコンテナ接続パターン (2014年冬) | SOTA</a></li>
</ul>

<p>今回は手元のMacBook Airだけで完結させたかったので、weaveを使ったコンテナ間ネットワークを利用することにしました。</p>

<h3 id="weave">weave</h3>

<ul>
  <li><a href="http://zettio.github.io/weave/">weave  | weave, the Docker network</a></li>
</ul>

<p>dockerコンテナ間の内部ネットワークを構築するものです。詳しくはjacopenさんのSlideShareを。</p>

<ul>
  <li><a href="http://www.slideshare.net/jacopen/weave-40871981">Weaveを試してみた</a></li>
</ul>

<p>使い方はとても簡単で、weaveコンテナを立ち上げて、weaveコマンド経由でdockerコマンドを実行するだけ。
これならVagrantのような仮想マシンのためにメモリとディスク容量を割く必要もなくなります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo weave launch
</span><span class="line"><span class="nv">$ </span>sudo docker ps
</span><span class="line">CONTAINER ID        IMAGE                COMMAND                CREATED             STATUS              PORTS                                            NAMES
</span><span class="line">2eda921c011e        zettio/weave:0.9.0   <span class="err">&quot;</span>/home/weave/weaver    31 seconds ago      Up 30 seconds       0.0.0.0:6783-&gt;6783/tcp, 0.0.0.0:6783-&gt;6783/udp   weave
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>これだけで仮想ネットワークができあがります。ホストOSで必要なポートは6783だけです。</p>

<p>あとはweaveコマンドにIPを指定しつつdockerコマンドのオプションを付けて起動すればOK。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ C</span><span class="o">=</span><span class="k">$(</span>sudo weave run 10.0.0.1/24 -it ubuntu<span class="k">)</span>
</span><span class="line"><span class="nv">$ </span>sudo docker <span class="nb">exec</span> <span class="nv">$C</span> -it /bin/bash
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ただ、さくらVPSのCentOS6では動きませんでした。面倒なので深く追ってません。。。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo /usr/local/bin/weave launch
</span><span class="line">WARNING: Linux kernel version 3.5 or newer is required <span class="o">(</span>you have 2.6<span class="o">)</span>
</span><span class="line">ERROR: ip utility, iproute2-ss091226 does not support network namespaces.
</span><span class="line">       Please install iproute2-ss111010 or later.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="consul">consul</h3>

<ul>
  <li><a href="https://www.consul.io/">consul</a></li>
</ul>

<p>Hashicorp謹製クラスタのオーケストレーションツール。今更説明する必要もないと思うので詳細は省略します。
consul（と周辺ツールのconsul-templateやenvconsul)を使えば複数のホスト間で設定を共有できる、というのを試すのが今回の目的でしたが、とりあえず複数のconsulを動かすところまでを書きます。</p>

<h3 id="consul-1">consulを起動してクラスタを構築する</h3>

<p>weaveネットワークに接続したコンテナを4台立ち上げて、consul1, consul2をserverとして、consul3, consul4をclientとして起動します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo weave run 10.0.0.1/24 -it -v <span class="k">$(</span><span class="nb">pwd</span> -P<span class="k">)</span>:/opt --name<span class="o">=</span>consul1 restartr/consul-ready
</span><span class="line"><span class="nv">$ </span>sudo weave run 10.0.0.2/24 -it -v <span class="k">$(</span><span class="nb">pwd</span> -P<span class="k">)</span>:/opt --name<span class="o">=</span>consul2 restartr/consul-ready
</span><span class="line"><span class="nv">$ </span>sudo weave run 10.0.0.3/24 -it -v <span class="k">$(</span><span class="nb">pwd</span> -P<span class="k">)</span>:/opt --name<span class="o">=</span>consul3 restartr/consul-ready
</span><span class="line"><span class="nv">$ </span>sudo weave run 10.0.0.4/24 -it -v <span class="k">$(</span><span class="nb">pwd</span> -P<span class="k">)</span>:/opt --name<span class="o">=</span>consul4 restartr/consul-ready
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>あとはconsul agentを順に起動するだけ。</p>

<p>ここで注意するのが<code>-bind</code>オプション。
これを指定しないとdockerデフォルトのeth0のでクラスタにjoinすることになってしまい、このネットワークは他のコンテナとつながっていないためにクラスタ構築に失敗します。
必ず<code>weave run 10.0.0.X/24</code>で指定したIPにbindしておきましょう。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo docker <span class="nb">exec</span> -d consul1 consul agent -server -data-dir<span class="o">=</span>/tmp/consul -bootstrap-expect 1 -bind 10.0.0.1
</span><span class="line"><span class="nv">$ </span>sudo docker <span class="nb">exec</span> -d consul2 consul agent -server -data-dir<span class="o">=</span>/tmp/consul -config-dir<span class="o">=</span>/opt/consul.d/web.json -bind 10.0.0.2
</span><span class="line"><span class="nv">$ </span>sudo docker <span class="nb">exec</span> -d consul3 consul agent -data-dir<span class="o">=</span>/tmp/consul -config-dir<span class="o">=</span>/opt/consul.d/web.json -bind 10.0.0.3
</span><span class="line"><span class="nv">$ </span>sudo docker <span class="nb">exec</span> -d consul4 consul agent -data-dir<span class="o">=</span>/tmp/consul -config-dir<span class="o">=</span>/opt/consul.d/web.json -bind 10.0.0.4
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>で、先に起動したconsul1に対して残りのコンテナ内のconsul agentをjoinさせていきます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo docker <span class="nb">exec </span>consul2 consul join 10.0.0.1
</span><span class="line"><span class="nv">$ </span>sudo docker <span class="nb">exec </span>consul3 consul join 10.0.0.1
</span><span class="line"><span class="nv">$ </span>sudo docker <span class="nb">exec </span>consul4 consul join 10.0.0.1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>と、<code>consul members</code>でjoinしている一覧が見えるようになります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo docker <span class="nb">exec </span>consul1 consul members
</span><span class="line">Node          Address        Status  Type    Build  Protocol
</span><span class="line">725dca3980ea  10.0.0.1:8301  alive   server  0.5.0  2
</span><span class="line">f82001d6a7b4  10.0.0.2:8301  alive   server  0.5.0  2
</span><span class="line">dcf304f77fdf  10.0.0.3:8301  alive   client  0.5.0  2
</span><span class="line">3be672bd18b1  10.0.0.4:8301  alive   client  0.5.0  2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>クラスタから離れるときは<code>consul leave</code>です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo docker <span class="nb">exec </span>consul4 consul leave
</span><span class="line">Graceful leave <span class="nb">complete</span>
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>sudo docker <span class="nb">exec </span>consul1 consul members
</span><span class="line">Node          Address        Status  Type    Build  Protocol
</span><span class="line">dcf304f77fdf  10.0.0.3:8301  alive   client  0.5.0  2
</span><span class="line">3be672bd18b1  10.0.0.4:8301  left    client  0.5.0  2       <span class="c"># &lt;- Statusが&#39;alive&#39;から&#39;left&#39;に変わる</span>
</span><span class="line">725dca3980ea  10.0.0.1:8301  alive   server  0.5.0  2
</span><span class="line">f82001d6a7b4  10.0.0.2:8301  alive   server  0.5.0  2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>という感じで、複数のマシンをいじってる感じがまったくしないくらい<code>weave</code> &amp; <code>docker exec</code>は便利です。
weaveがプロダクション環境で使えるか、という点については未知ですが。</p>

<p>次回（があれば）consulを使った設定の管理について試したメモを書きたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Peek - Railsアプリのプロファイリングツール]]></title>
    <link href="http://blog.restartr.com/2015/01/18/peek-for-profiling-rails-app/"/>
    <updated>2015-01-18T13:26:53+09:00</updated>
    <id>http://blog.restartr.com/2015/01/18/peek-for-profiling-rails-app</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/peek/peek">Peek</a>という、Railsアプリケーションに組み込めるプロファイリングツール（群）があります。
<a href="https://github.com/blog/1252-how-we-keep-github-fast">How we keep Github fast</a>でも言及されているツールです。(2012年なので少し古いですが。)</p>

<h3 id="section">プロファイリングツールと適正</h3>

<p>プロファイリング用のツールはたくさんあって、時間がかかる特定の処理を改善するために使うものもあれば、常時記録して特異な変化を監視するものもあります。</p>

<p>今回は後者寄りの要件であり、これに見合うものとしてPeekを取り上げました。</p>

<p>Railsでこれ以外のツールとしては、<a href="https://github.com/MiniProfiler/rack-mini-profiler">rack-mini-profiler</a>や<a href="https://github.com/newrelic/rpm">newrelic/rpm</a>などがあり、それらについて今回の要件と照合してみました。</p>

<h4 id="newrelic-rpm">newrelic rpm</h4>

<p>newrelicのサービス上で結果が確認出来るだけではなく、<a href="https://github.com/newrelic/rpm#developer-mode">デベロッパーモード</a>の場合に”/newrelic”にアクセスするとリクエストごとのプロファイル結果が見れます。
ただ、別途”/newrelic”のURLを開く必要があり、パフォーマンスチェックを忘れがちになる可能性があります。</p>

<h4 id="rack-mini-profiler">rack-mini-profiler</h4>

<p>トータルの処理時間は画面隅に表示されるけれど、個々の処理時間については画面隅のボックスをクリックして詳細を開かないといけません。</p>

<h4 id="peek">peek</h4>

<p>Peekは適切な粒度で常に目に入れることができるツールであり、常用するのにちょうど良いのでは、という印象です。</p>

<p>先のGihtubのブログでは”Mission controll bar”いう、スタッフがプロダクション環境でも常にパフォーマンスを確認できる仕組みが整えられています。</p>

<h3 id="peek-1">Peekのしくみ</h3>

<p>しくみは以下ブログ記事が詳しいです。</p>

<ul>
  <li><a href="http://r7kamura.hatenablog.com/entry/2014/09/24/004607">Railsの性能測定用プラグイン peek/peek - ✘╹◡╹✘</a></li>
</ul>

<p>リクエストごとにIDを発行し、そのリクエストごとに各種計測値をデータストア（ファイル、Redis、Memcached等）に保存。
ページ表示後に別リクエスト(“/peek/…“)として非同期で計測値を取得して、画面の要素を置換する、というしくみ。</p>

<h3 id="peek-2">Peekの拡張</h3>

<p>Peek自体はプラットフォームを提供するだけで、実際の個々の値を記録したりするのはそのプラグイン。</p>

<p>対応しているのは<a href="https://github.com/peek/peek#available-peek-views">Available Peek views</a>
に記載されています。仮にほしいものが見つからなかったとしても、わりと手軽に追加できるような仕組みになっています。</p>

<p>ということでmemcached用のプラグインをつくりました。</p>

<ul>
  <li><a href="https://github.com/ReSTARTR/peek-memcached">peek-memcached</a></li>
</ul>

<p><a href="https://github.com/evan/memcached">evan/memcached</a>という、cで実装されたruby用memcachedクライアントがあって、それを使ったmemcachedアクセスを記録するプラグインです。</p>

<p>このプラグインでは<code>Memcached#get</code><code>Memcached#set</code>メソッドにモンキーパッチあてて、回数と時間を記録しています。</p>

<ul>
  <li>呼び出し回数(calls)</li>
  <li>総処理時間(duration)</li>
</ul>

<p>に加えて、下記も記録できるようになっています。</p>

<ul>
  <li>キャッシュヒット数(Get[HIT])</li>
  <li>キャッシュミス数(Get[MISS])</li>
  <li>キャッシュ更新数(Set)</li>
</ul>

<h3 id="peek-3">Peekの惜しいところ</h3>

<p>要素が増えるとブラウザの横幅に収まりきらなくなって、折り返し＆はみ出します。本当に必要な要素に絞る抑止力にはなりますが、もう少しコンパクトに収められるとよりよいかな、と。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年に購入した技術書]]></title>
    <link href="http://blog.restartr.com/2014/12/31/books-2014/"/>
    <updated>2014-12-31T20:22:02+09:00</updated>
    <id>http://blog.restartr.com/2014/12/31/books-2014</id>
    <content type="html"><![CDATA[<p>投稿数を稼ぐべく、とりあえず今年購入した（であろう）本をリストアップしつつ、今年の振り返りでも。</p>

<p>購入しただけで読めてないものや、途中のものもありますが、技術書なんてリファレンスなので全部読む必要もないわけで(言い訳)。
一度手放した本とか角川祭りとかでKindleストアでの購入が増えた年でした。Kindle3からPaperwhiteにアップデートしたのも大きい。
仕事上フロントエンド以外の広範囲を取り扱う機会が増えたため、読んだ本もわりと多岐にわたってます。</p>

<p>世の中的には、Immutable Infrastractureが一段落して、Docker, Golang, Microservicesなんかがバズワード化してました。</p>

<p>とくにGolangは日本語書籍は増えてないものの、Go製プロダクトが大量発生している状況は当分継続しそう。なので、いろんなRuby/Python/Perl/PHPなどLL製プロダクトのリプレースが進んでいくのでは。新しい流行としてはGolangにつづいてRust, Clojure, Elixrあたりがじわじわ来るんじゃないでしょうかね。</p>

<p>インフラ周りでいうと、コンテナ化、マルチクラウド、モニタリングまわりが大きく変化しそうです。</p>

<p>では、購入した書籍一覧です。購入日時はよくわからないので購入順には並んでません。(すべてアフィ無しリンクです)</p>

<h3 id="section">プログラミング</h3>

<ul>
  <li><a href="http://www.amazon.co.jp/gp/product/B0096BYG7C">Practical Object-Oriented Design in Ruby</a></li>
  <li><a href="http://www.amazon.co.jp/gp/product/B00HUEG8LE">Build Awesome Command-Line Applications in Ruby 2</a></li>
  <li><a href="http://www.manning.com/ketelsen/">Go in Action</a></li>
  <li><a href="http://www.amazon.co.jp/dp/B00MLUGZIS/">すごいErlangゆかいに学ぼう！</a></li>
  <li><a href="http://tatsu-zine.com/books/naruhounix">なるほどUnixプロセス ― Rubyで学ぶUnixの基礎</a></li>
  <li>(未読) <a href="http://www.jstorimer.com/products/working-with-tcp-sockets">Working With TCP Sockets</a></li>
  <li>(未読) <a href="http://www.amazon.co.jp/dp/4756136494">プログラミング作法</a></li>
</ul>

<h3 id="section-1">アーキテクチャ</h3>

<ul>
  <li><a href="http://www.amazon.co.jp/gp/product/B00GRKD6XU">エリック・エヴァンスのドメイン駆動設計</a></li>
  <li><a href="http://shop.oreilly.com/product/0636920033158.do">Building Microservices</a></li>
</ul>

<h3 id="section-2">ミドルウェア</h3>

<ul>
  <li><a href="http://www.amazon.co.jp/gp/product/B00HSC64P8">Redis入門　インメモリKVSによる高速データ管理</a></li>
  <li><a href="http://www.manning.com/grainger/">Solr in Action</a></li>
  <li><a href="http://shop.oreilly.com/product/0636920026136.do">ZeroMQ</a></li>
  <li><a href="http://www.amazon.co.jp/gp/product/B00J4KDYZU">高速スケーラブル検索エンジン　ElasticSearch Server</a></li>
</ul>

<h3 id="section-3">インフラ</h3>

<ul>
  <li><a href="http://www.amazon.co.jp/dp/4873116767/">ハイパフォーマンス ブラウザネットワーキング</a></li>
  <li><a href="http://www.amazon.co.jp/gp/product/B00FLYU9T2">Systems Performance: Enterprise and the Cloud </a></li>
  <li><a href="http://www.amazon.co.jp/dp/477416500X">Chef実践入門 ~コードによるインフラ構成の自動化 </a></li>
  <li><a href="http://www.amazon.co.jp/gp/product/B00LRROTI4">The Docker Book: Containerization is the new virtualization </a></li>
  <li><a href="http://www.amazon.co.jp/dp/B00JWM4W2E">Docker入門 Immutable Infrastructureを実現する</a></li>
</ul>

<h3 id="section-4">読み物</h3>

<ul>
  <li><a href="http://www.amazon.co.jp/gp/product/B00OJVMK5O">How Google Works </a></li>
  <li><a href="http://www.amazon.co.jp/dp/4274068471">Coders at Work プログラミングの技をめぐる探求</a></li>
  <li><a href="http://www.amazon.co.jp/dp/4873114713">言語設計者たちが考えること</a></li>
  <li>(未読) <a href="http://www.amazon.co.jp/gp/product/B00MIFE3BC">アカマイ　知られざるインターネットの巨人</a></li>
  <li>(未読) <a href="http://www.amazon.co.jp/dp/4274064069">UNIXという考え方―その設計思想と哲学</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[InfoQ eMAG: Microservicesを少し読んだまとめと感想]]></title>
    <link href="http://blog.restartr.com/2014/08/20/microservices-architecture/"/>
    <updated>2014-08-20T00:14:35+09:00</updated>
    <id>http://blog.restartr.com/2014/08/20/microservices-architecture</id>
    <content type="html"><![CDATA[<p>なんだか、世間的にMicroservicesが次の注目対象になりそうな感じです。</p>

<p>DockerConでも複数のセッションで言及があったり、はてブにもたまに関連記事があがってきたりしてます。</p>

<p>実態はどんなものかイメージしにくかったのですが、最近InfoQで公開されたeMAGが情報としてまとまっている気がしたので、これを読み進めています。</p>

<ul>
  <li><a href="http://www.infoq.com/minibooks/emag-microservices">InfoQ eMAG: Microservices</a></li>
</ul>

<h3 id="section">本に含まれている内容</h3>

<p>この本は、過去のInfoQ記事や各ブログを再構成したもので、以下の記事タイトルがまとめられています。</p>

<ul>
  <li>Microservices: Decomposing Applications for Deployability and Scalability</li>
  <li>Microservices and SOA</li>
  <li>Adrian Cockcroft on Microservices and DevOps</li>
  <li>Microservices? What about Nanoservices?</li>
  <li>Building Products at SoundCloud</li>
  <li>The Strengths and Weaknesses of Microservices</li>
  <li>GOTO Berlin: Microservices as an Alternative to Monoliths</li>
</ul>

<p>そのうち、以下を読んだので、まとめと雑感を書きます。</p>

<ul>
  <li>Microservices: Decomposing Applications for Deployability and Scalability</li>
  <li>Building Products at SoundCloud</li>
</ul>

<p>本の主題はMicroservices Architectureですが、それに伴うソフトウェアの設計手法などの参照もたくさん含まれているので、いろんな情報への入口としても勉強になると思います。</p>

<h4 id="microservices-decomposing-applications-for-deployability-and-scalability">Microservices: Decomposing Applications for Deployability and Scalability</h4>

<ul>
  <li>ドメイン単位で複数に分割されたもの小さなサービスのの集合体をMicroservices Architectureと呼ぶ</li>
  <li>既存フレームワークとかでservice層として定義していた単位が別々のプロセスに切りだされているイメージ</li>
  <li>一方、既存のシステムはMonolithic Architectureと呼ばれる</li>
  <li>システム設計における単一責任原則の適用ともいえる</li>
  <li>現実に則したSOAの焼き直しである</li>
</ul>

<p>メリット</p>

<ul>
  <li>個々にデプロイ可能である</li>
  <li>個々のMicroserviceが独立しているため、サービス全体の可用性向上を期待できる</li>
  <li>開発チームを小さい単位に分割しやすい</li>
  <li>言語やフレームワークの移行が容易になる。変更が小規模なので仮に失敗しても取り戻しやすい。</li>
</ul>

<p>デメリット</p>

<ul>
  <li>個々にはシンプルでも全体の複雑性は増す</li>
  <li>サービス間のIPCメカニズムが必要</li>
  <li>サービス間をまたいだテストがやりにくい</li>
  <li>他サービスに影響する変更のデプロイは手順を十分に検討する必要がある</li>
  <li>運用が大変。ハイレベルな自動化が要求される</li>
</ul>

<h4 id="building-products-at-soundcloud">Building Products at SoundCloud</h4>

<p>SoundCloudのMicroservices移行話は「Building Products at SoundCLoud」という三回分のブログ記事を再構成してまとめた内容になっています。</p>

<ul>
  <li><a href="https://developers.soundcloud.com/blog/building-products-at-soundcloud-part-1-dealing-with-the-monolith">Building Products at SoundCloud—Part I: Dealing with the Monolith</a></li>
  <li><a href="https://developers.soundcloud.com/blog/building-products-at-soundcloud-part-2-breaking-the-monolith">Building Products at SoundCloud—Part II: Breaking the Monolith</a></li>
  <li><a href="https://developers.soundcloud.com/blog/building-products-at-soundcloud-part-3-microservices-in-scala-and-finagle">Building Products at SoundCloud—Part III: Microservices in Scala and Finagle</a></li>
</ul>

<p>MonolithicなRailsアプリからMicroservicesに移行するまでの手順や失敗が紹介されていて、これから移行を進めるチームにとって有益になるでしょう。</p>

<p>彼らは既存アプリの機能をいきなり別言語で切り出すのではなく、</p>

<blockquote>
  <p>分析→リファクタリング→Service分割→新技術の採用</p>
</blockquote>

<p>という手順を踏んでいます。この移行における重要な点は、どのような新技術を採用するかではなく、DDDをベースとしたドメイン分析を行うことにあると思います。分割の単位を誤ったなら個々のサービスの依存性を排除しきれなくなり全体の複雑性は確実に高くなります。</p>

<p>ドメイン分割の一例として、<a href="http://martinfowler.com/bliki/BoundedContext.html">Bounded Context</a>を利用した例が紹介されています。</p>

<p>また、依存性の低い個々のMicroserviceにできることで、それぞれに独立したチームを配置することも可能になります。
ただ、それぞれのチームが無秩序に技術選定を行うことでスキルや情報の局所性(<a href="http://en.wikipedia.org/wiki/Bus_factor">Bus Factor</a>の低下)を招くことになるため、一定のルールを決めることも重要になるようです。結果として彼らはJVMベースのScala,ClojureJRubyを中心としたシステムを作ることを決定しています。(同時にGoとRubyもサポート)</p>

<h4 id="section-1">雑感</h4>

<p>Microservicesへ移行するにはサービス規模・システム規模・開発チーム規模が大きいことが前提であり、そうでない限りはMonolithicなシステムで頑張るほうが良いかな、というのが個人的な意見です。また、DDDのような適切なドメイン分析ができるアーキテクトが存在しない場合にもMicroservicesはあまり良い選択肢とはいえないと思います。それらの前提をクリアできるのであれば、長いプロダクトのライフスパンにおいて、システムそのものだけでなく開発チームも含めて良い影響をもらたすことになるのではないでしょうか。</p>

<p>ということで「Microservicesの本質はドメイン分析であり、デプロイ単位や技術選定などのメリットは副次的なものである」というのがこのeMAGを読んで得たとりあえずの結論です。</p>

<h4 id="section-2">参考リンク</h4>

<p>Martin Fowler氏の記事だけでなく、DockerConでのYelpのスライドやInfoQのbitlyの記事も参考になります。</p>

<ul>
  <li><a href="http://martinfowler.com/articles/microservices.html">Microservices</a></li>
  <li><a href="https://recompile.net/posts/microservices.html">マイクロサービス（microservices）とは何か — recompile.net</a></li>
  <li><a href="http://www.slideshare.net/dotCloud/building-a-smarter">Building a smarter application Stack by Tomas Doran from Yelp</a></li>
  <li><a href="http://www.infoq.com/jp/news/2014/08/bitly-lessons-learned">bitlyでの分散システム構築から学んだこと</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goのjson.Marshal/Unmarshalの仕様を整理してみる]]></title>
    <link href="http://blog.restartr.com/2014/08/13/golang-json-marshal-unmarshal/"/>
    <updated>2014-08-13T00:02:42+09:00</updated>
    <id>http://blog.restartr.com/2014/08/13/golang-json-marshal-unmarshal</id>
    <content type="html"><![CDATA[<h3 id="tldr">TL;DR</h3>

<ul>
  <li>goの構造体につけるタグは、フォーマットが不正だと読み込まれない(当然)</li>
  <li>json.Marshalは、構造体のjsonタグがあればその値をキーとしてJSON文字列を生成する</li>
  <li>json.Unmarshalは、構造体のjsonタグがあればその値を対応するフィールドにマッピングする
    <ul>
      <li>jsonタグがなければ、完全一致もしくはcase-insensitiveなフィールドにマッピングする</li>
    </ul>
  </li>
</ul>

<p>では、ひとつづつ確認していきます。</p>

<h3 id="go">goの構造体につけるタグは、フォーマットが不正だと読み込まれない(当然)</h3>

<p>goの構造体にはタグの機能があって、型の後に特定のフォーマットでアノテーションが記述できます</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">MyType</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">Hoge</span> <span class="kt">string</span> <span class="s">`foo:&quot;1&quot; bar:&quot;2&quot;`</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>key:"value"</code>をスペース区切りで複数かけます。
で、アクセスするにはリフレクションを使います。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">t</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">TypeOf</span><span class="p">(</span><span class="nx">MyType</span><span class="p">{})</span>
</span><span class="line"><span class="nx">tagFoo</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">Field</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">Get</span><span class="p">(</span><span class="s">&quot;foo&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nx">tagBar</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">Field</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">Get</span><span class="p">(</span><span class="s">&quot;bar&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;foo=%s, bar=%s\n&quot;</span><span class="p">,</span> <span class="nx">tagFoo</span><span class="p">,</span> <span class="nx">tagBar</span><span class="p">)</span>
</span><span class="line"><span class="c1">// foo=1, bar=2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>タグのフォーマットが不正な場合は、値が空になります。コンパイルエラーにはなりません。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">MyType</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">Hoge</span> <span class="kt">string</span> <span class="s">`foo:1`</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">t</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">TypeOf</span><span class="p">(</span><span class="nx">MyType</span><span class="p">{})</span>
</span><span class="line"><span class="nx">tagFoo</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">Field</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">Get</span><span class="p">(</span><span class="s">&quot;foo&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;foo=%#v\n&quot;</span><span class="p">,</span> <span class="nx">tagFoo</span><span class="p">)</span>
</span><span class="line"><span class="c1">// foo=&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>このエラーをコンパイルする前に検知するには、<code>go vet</code>コマンドが使えます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>go vet my_type.go
</span><span class="line">my_type.go:10: struct field tag <span class="sb">`</span>foo:1<span class="sb">`</span> not compatible with reflect.StructTag.Get
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>できれば<code>go compile</code>実行したときに自動的にチェックしてほしいところですが…</p>

<p>で、jsonパッケージのMarshal/Unmarshalは、このタグを使ってアノテーションを記述することができます。</p>

<h3 id="jsonmarshaljsonjson">json.Marshalは、構造体のjsonタグがあればその値をキーとしてJSON文字列を生成する</h3>

<p>json.Marshalは構造体からJSON文字列への変換する関数です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">MyType</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">A</span> <span class="kt">string</span>
</span><span class="line">  <span class="nx">FooBar</span> <span class="kt">string</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">mt</span> <span class="o">:=</span> <span class="nx">MyType</span><span class="p">{</span><span class="s">&quot;aaaa&quot;</span><span class="p">,</span> <span class="s">&quot;baz&quot;</span><span class="p">}</span>
</span><span class="line"><span class="nx">b</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">mt</span><span class="p">)</span>
</span><span class="line"><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s\n&quot;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span>
</span><span class="line"><span class="c1">// {&quot;A&quot;:&quot;aaaa&quot;,&quot;FooBar&quot;:&quot;baz&quot;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>普通にやると、フィールド名がそのままJSONのキーになります。</p>

<p>ここで構造体のタグ機能をつかって、フィールド名のアノテーションを書くことで、任意のフィールド名でJSONが生成できます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">MyType</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">A</span> <span class="kt">string</span> <span class="s">`json:&quot;a&quot;`</span>
</span><span class="line">  <span class="nx">FooBar</span> <span class="kt">string</span> <span class="s">`json:&quot;foo_bar&quot;`</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">mt</span> <span class="o">:=</span> <span class="nx">MyType</span><span class="p">{</span><span class="s">&quot;aaaa&quot;</span><span class="p">,</span> <span class="s">&quot;baz&quot;</span><span class="p">}</span>
</span><span class="line"><span class="nx">b</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">mt</span><span class="p">)</span>
</span><span class="line"><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s\n&quot;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span>
</span><span class="line"><span class="c1">// {&quot;a&quot;:&quot;aaaa&quot;,&quot;foo_bar&quot;:&quot;baz&quot;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>アノテーション指定した”a”がJSONのキーとして使用されていることが確認できます。</p>

<h3 id="jsonunmarshaljson">json.Unmarshalは、構造体のjsonタグがあればその値を対応するフィールドにマッピングする</h3>

<p>json.UnmarshalはJSON文字列から構造体へ変換する関数です。</p>

<p>まずはタグなしのパターン</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">MyType</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">A</span> <span class="kt">string</span>
</span><span class="line">  <span class="nx">FooBar</span> <span class="kt">string</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">mt</span> <span class="nx">MyType</span>
</span><span class="line"><span class="nx">json</span><span class="p">.</span><span class="nx">Unarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">`{&quot;A&quot;:&quot;aaa&quot;, &quot;FooBar&quot;:&quot;baz&quot;}`</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">mt</span><span class="p">)</span>
</span><span class="line"><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%#v\n&quot;</span><span class="p">,</span> <span class="nx">mt</span><span class="p">)</span> <span class="c1">// main.MyType{A:&quot;aaaa&quot;,FooBar:&quot;baz&quot;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>JSONのフィールド名がsnake_caseのパターン</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">var</span> <span class="nx">mt</span> <span class="nx">MyType</span>
</span><span class="line"><span class="nx">json</span><span class="p">.</span><span class="nx">Unarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">`{&quot;a&quot;:&quot;aaa&quot;,&quot;foo_bar&quot;:&quot;baz&quot;}`</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">mt</span><span class="p">)</span>
</span><span class="line"><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%#v\n&quot;</span><span class="p">,</span> <span class="nx">mt</span><span class="p">)</span> <span class="c1">// main.MyType{A:&quot;aaaa&quot;, FooBar:&quot;&quot;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ここで「ん？」となるわけです。タグによるアノテーションがないのになぜ小文字のフィールドがちゃんと読み込まれているのか…と。</p>

<p>この仕様、json.Unmarshalのgodocにちゃんと書いてあります。</p>

<p><a href="http://golang.org/pkg/encoding/json/#Unmarshal">func Unmarshal</a></p>

<blockquote>
  <p>To unmarshal JSON into a struct, Unmarshal matches incoming object keys to the keys used by Marshal (either the struct field name or its tag), preferring an exact match but also accepting a case-insensitive match.</p>
</blockquote>

<p>どうやら、json.Unmarshalは、JSONに含まれるキーと完全一致か、case-insensitiveに一致する構造体のフィールドにマッピングする仕様となっているようです。もちろん、snake_caseなJSONのキーはアノテーションがないとマッピングされず無視されます。（構造体のフィールドとしてsnale_caseが存在しない限りは)</p>

<h3 id="section">経緯</h3>

<p>先日、<a href="http://connpass.com/event/7914/">ヒカルのGO! hikarie.go #2</a>で<a href="https://twitter.com/yosuke_furukawa">@yosuke_furukawa</a>さんによるGoでJSON APIを書いてみるというハンズオンを体験してきました。</p>

<ul>
  <li><a href="https://github.com/yosuke-furukawa/golang-study">yosuke-furukawa/golang-study</a></li>
</ul>

<p>そこで、アノテーションをつけた構造体を使ってMarshalした時に、書いたコードがこれです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:name`</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">user</span> <span class="o">:=</span> <span class="nx">User</span><span class="p">{</span><span class="s">&quot;restartr&quot;</span><span class="p">}</span>
</span><span class="line"><span class="nx">b</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span>
</span><span class="line"><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s\n&quot;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span> <span class="c1">// {&quot;Name&quot;:&quot;restartr&quot;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>小文字で出力してほしいのに、アノテーションが効かない…となったわけです。
他の参加者が<code>json:"name"</code>でないといけないことに気づいて、この件は一件落着。</p>

<p>だったのですが、もう少し詳しく調べると上に整理したような仕様が見えてきたというわけです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:name`</span> <span class="c1">// 実際は無視されている</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">user</span> <span class="nx">User</span>
</span><span class="line"><span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">`{&quot;name&quot;:&quot;restartr&quot;}`</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">)</span>
</span><span class="line"><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s\n&quot;</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="c1">// main.User{Name:&quot;restartr&quot;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>実はこの時書いた<code>json:name</code>というアノテーションは不正なフォーマットとして無視されていて、たまたまUser.Nameというフィールドにcase-insensitiveでUnmarshalした時にマッピングができていたにすぎなかったようです。</p>

<p>とまぁそんな感じでJSONの取り扱いについて正しい知識を得られたのですが、一人でやってた時には気づかなかった疑問とか知識として不足している点に気付けるので、ハンズオン形式も良いものですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker謹製ライブラリのlibchanについて調べてみた]]></title>
    <link href="http://blog.restartr.com/2014/06/28/about-docker-libchan/"/>
    <updated>2014-06-28T14:44:23+09:00</updated>
    <id>http://blog.restartr.com/2014/06/28/about-docker-libchan</id>
    <content type="html"><![CDATA[<p>DockerCon2014で発表された<a href="https://github.com/docker/libchan">libchan</a>について調べたことをまとめてみます。</p>

<p>libchanは<a href="https://github.com/docker/libcontainer">libcontainer</a>や<a href="https://github.com/docker/libswarm">libswarm</a>と共に発表されました。
libswarmはDockerを中心にしたエコシステムにおけるベンダーロックインを回避するためのソリューションであり、libcontainerは<a href="http://d.hatena.ne.jp/mainyaa/20140311/p1">Docker 0.9リリースドキュメント日本語訳: Execution driversとlibcontainer導入 - Happy New World</a>を参照するのがよいでしょう。</p>

<p>では、libchanとは何なのでしょうか。</p>

<p>READMEには<code>like Go channels over the network</code>とあります。ネットワーク上のgo channel?よくかりませんね。。。</p>

<p>README.mdとPROTOCOL.md、いくつかのテストコードをもとに簡単な実装をしてみた結果をまとめます。</p>

<h3 id="libchan">libchanとはなにか</h3>

<ul>
  <li><a href="https://github.com/docker/libchan/README.md">README</a></li>
</ul>

<p>libchanは超軽量なネットワークライブラリであり、多様な通信プロトコルの土台となるものです。
同一プロセス内でも、同一ホストの別プロセス間でも、ネットワークを超えた別ホストの別プロセス間でも双方向通信可能にするための基礎的なAPIを提供しています。
モダンなmicro-serviesなどRPCやRESTプロトコルにはフィットしない領域で、libchanを使うことが想定されています。</p>

<p>利用例はいまのところlibswarmのみです。というかlibswarmから抽出された汎用的な通信ライブラリだと思います。
APIが安定してくると他のフレームワーク等への導入などもあるかもしれません。</p>

<p>では、具体的にどうやって双方向通信を可能にしてるのでしょう。</p>

<h3 id="libchan-1">libchanのプロトコル</h3>

<ul>
  <li><a href="https://github.com/docker/libchan/PROTOCOL.md">PROTOCOL</a></li>
</ul>

<p>libchanは以下のコンポーネントで構成されています。</p>

<ul>
  <li>channel</li>
  <li>session</li>
  <li>message</li>
  <li>byte stream</li>
  <li>nesting</li>
</ul>

<p>channelとは、並行プログラム間の双方向通信用オブジェクトです。goのchannelに似てるけどそのものではありません。Sender/Receiverがそれぞれ1方向ずつの経路を持つため、ソケットというよりパイプの概念に近いです。</p>

<p>この２つの通信経路がsessionとなり、その間を流れるのがbyte stream。
で、byte streamにはmessageが乗っかり、messageにはchannelを含めることができるという概念です。</p>

<h3 id="libchan-2">libchanのメッセージ</h3>

<p>メッセージはlibchan.Message。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">libchan</span><span class="p">.</span><span class="nx">Message</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">Data</span> <span class="p">[]</span><span class="kt">byte</span> <span class="c1">// メッセージの内容</span>
</span><span class="line">  <span class="nx">Fd</span> <span class="o">*</span><span class="nx">os</span><span class="p">.</span><span class="nx">File</span>
</span><span class="line">  <span class="nx">Ret</span> <span class="nx">Sender</span>  <span class="c1">// 受信者が返答するためのchannel</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>このメッセージ型を、各種通信方式に対応したSender/Receiver経由でやりとりすることになります。</p>

<h3 id="section">メッセージの構造化</h3>

<p>メッセージは以下のようにして生成します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">message</span> <span class="o">:=</span> <span class="nx">libchan</span><span class="p">.</span><span class="nx">Message</span><span class="p">{</span><span class="nx">Data</span><span class="p">:</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;Hello, libchan&quot;</span><span class="p">),</span> <span class="nx">Ret</span><span class="p">:</span> <span class="nx">libchan</span><span class="p">.</span><span class="nx">RetPipe</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>で、ただのテキストではなく構造化されたデータも送れます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">import</span> <span class="s">&quot;github.com/docker/libchan/data&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nx">d</span> <span class="o">:=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Empty</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;foo&quot;</span><span class="p">,</span> <span class="s">&quot;bar&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nx">d</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="s">&quot;foo&quot;</span><span class="p">)</span> <span class="c1">// &quot;bar&quot;</span>
</span><span class="line"><span class="nx">d</span><span class="p">.</span><span class="nx">Pretty</span><span class="p">()</span> <span class="c1">// foo=bar</span>
</span><span class="line"><span class="nx">message</span> <span class="o">:=</span> <span class="nx">libchan</span><span class="p">.</span><span class="nx">Message</span><span class="p">{</span><span class="nx">Data</span><span class="p">:</span> <span class="nx">d</span><span class="p">,</span> <span class="nx">Ret</span><span class="p">:</span> <span class="nx">libchan</span><span class="p">.</span><span class="nx">RetPipe</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ちなみに、各メソッド(Add,Set,Get,Del)はMessageのポインタをかえさないので、変数を上書きするかメソッドチェインにする必要があります。</p>

<h3 id="section-1">メッセージの送受信</h3>

<p>作成したメッセージををSender経由で送ります。（ここでのSender/Receiverは擬似コードです）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">sender</span><span class="p">.</span><span class="nx">Send</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">libchan</span><span class="p">.</span><span class="nx">Message</span><span class="p">{</span><span class="nx">Data</span><span class="p">:</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">msg</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>で、Receiverが受信したメッセージは<code>data.Decode()</code>で<code>map[string][]string</code>に変換できます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">message</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">receiver</span><span class="p">.</span><span class="nx">Receive</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="nx">decoded</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">Data</span><span class="p">))</span>
</span><span class="line"><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%$v\n&quot;</span><span class="p">,</span> <span class="nx">docoded</span><span class="p">)</span> <span class="c1">// map[string][]string{&quot;foo&quot;:[]string{&quot;bar&quot;}}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="senderreceiver">Sender/Receiver</h3>

<p>実際にメッセージを送受信するのは、Send/Receiverメソッドを持つinterfaceを実装したものを使います。
定義はだいたいこんなかんじになっています。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">Sender</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">Send</span><span class="p">(</span><span class="nx">msg</span> <span class="o">*</span><span class="nx">Message</span><span class="p">)</span> <span class="p">(</span><span class="nx">Receiver</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Sender</span><span class="p">)</span> <span class="nx">Send</span><span class="p">(</span><span class="nx">msg</span> <span class="o">*</span><span class="nx">libchan</span><span class="p">.</span><span class="nx">Message</span><span class="p">)</span> <span class="p">(</span><span class="nx">libchan</span><span class="p">.</span><span class="nx">Receiver</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">Receiver</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">Receiver</span><span class="p">(</span><span class="nx">mode</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">Message</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">Receiver</span><span class="p">)</span> <span class="nx">Receive</span><span class="p">(</span><span class="nx">mode</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">libchan</span><span class="p">.</span><span class="nx">Message</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>主要な実装は以下</p>

<ul>
  <li><a href="https://github.com/docker/libchan/blob/master/nop.go">nop</a></li>
  <li><a href="https://github.com/docker/libchan/blob/master/inmem.go">inmem</a></li>
  <li><a href="https://github.com/docker/libchan/blob/master/unix">unix</a></li>
  <li><a href="https://github.com/docker/libchan/blob/master/http2">http2</a></li>
</ul>

<h3 id="inmem-in-memory-go-channel">inmem (In-memory Go channel)</h3>

<p><a href="https://github.com/docker/libchan/blob/master/inmem_test.go">inmem_test.go</a>を参考に実装してみます。</p>

<p>まずは<code>libchan.Pipe()</code>を使って、receiver/senderを取得します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">receiver</span><span class="p">,</span> <span class="nx">sender</span> <span class="o">:=</span> <span class="nx">libchan</span><span class="p">.</span><span class="nx">Pipe</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>送信側はgorutine内でsender経由でメッセージを送信して、送信側から受信したメッセージに対してさらに返信します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">recv</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">sender</span><span class="p">.</span><span class="nx">Send</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">libchan</span><span class="p">.</span><span class="nx">Message</span><span class="p">{</span>
</span><span class="line">    <span class="nx">Data</span><span class="p">:</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">),</span>
</span><span class="line">    <span class="nx">Ret</span><span class="p">:</span> <span class="nx">libchan</span><span class="p">.</span><span class="nx">RetPipe</span><span class="p">,</span>
</span><span class="line">  <span class="p">)</span>
</span><span class="line">  <span class="nx">msg</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">recv</span><span class="p">.</span><span class="nx">Receive</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">// mode=0で自動Close()</span>
</span><span class="line">  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">Data</span><span class="p">))</span> <span class="c1">// &quot;World&quot;</span>
</span><span class="line"><span class="p">}()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>受信側はreceiver経由でメッセージ受信して、それに対して返信します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">msg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">receiver</span><span class="p">.</span><span class="nx">Receive</span><span class="p">(</span><span class="nx">libchan</span><span class="p">.</span><span class="nx">Ret</span><span class="p">)</span>
</span><span class="line"><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">Data</span><span class="p">))</span> <span class="c1">// &quot;Hello&quot;</span>
</span><span class="line"><span class="c1">// msg.Retが返信用のchannelとなっている</span>
</span><span class="line"><span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">Ret</span><span class="p">.</span><span class="nx">Send</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">libchan</span><span class="p">.</span><span class="nx">Message</span><span class="p">{</span><span class="nx">Data</span><span class="p">:</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;World&quot;</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="unixhttp2">unix/http2の実装</h3>

<p>それぞれにテストコードがあるので覗いてみるとだいたいのイメージがつかめます。</p>

<ul>
  <li><a href="https://github.com/docker/libchan/blob/master/unix/unix_test.go">unix/unix_test.go</a></li>
  <li><a href="https://github.com/docker/libchan/blob/master/http2/listener_test.go">http2/listener_test.go</a></li>
</ul>

<h2 id="section-2">まとめ</h2>

<p>libchanにおけるchannelとgoのchannel、名前は同じでも別モノです。
今のところこれといった用途が思いつかないですが、libswarmから派生したものとすると多様なプロトコルの差異を吸収するためのアダプター実装を手助けしてくれるレイヤーと考えるのがよさそうです。</p>

<p>というか、DockerConでちょくちょく言及されていた「マイクロサービス」という概念のほうが興味あります。</p>

<h2 id="section-3">追記</h2>

<blockquote class="twitter-tweet" lang="ja"><p>そういえば書き忘れてたけど、アプリケーションが成長する過程においてlibchanの統一的なインターフェースによって比較的容易にスケールできるんだよ、ってことをDockerConのキーノートでいってたような。。。あとでみかえそう。</p>&mdash; Masaki YOSHIDA (@ReSTARTR) <a href="https://twitter.com/ReSTARTR/statuses/482775493511376896">2014, 6月 28</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>ということに気づき、再度キーノートを見返してました。libchanについては以下動画の30:45あたりからどうぞ。</p>

<iframe width="640" height="360" src="//www.youtube.com/embed/_DOXBVrlW78" frameborder="0" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerを使って任意のrubyバージョンのrpmを作成する]]></title>
    <link href="http://blog.restartr.com/2014/05/11/build-rpm-on-docker-container/"/>
    <updated>2014-05-11T00:00:00+09:00</updated>
    <id>http://blog.restartr.com/2014/05/11/build-rpm-on-docker-container</id>
    <content type="html"><![CDATA[<p>CentOSを使ってて不便なのがruby2系のインストール。</p>

<p>rbenvやruby-buildを使うかソースからインストールするのですが、この場合、環境を構築するたびにビルドすることになり時間もかかるし大変面倒です。</p>

<p>なのでDockerを使ってクリーンな環境でRubyの最新rpmをビルドしてみました。</p>

<p>Dockerを使えばビルド環境がすぐに立ち上げられるので、rpmビルドに必要なパッケージを確認したりするのに最適です。</p>

<p>今回のソースはgithubにpushしてあります。</p>

<ul>
  <li><a href="https://github.com/ReSTARTR/ruby-rpmbuild-container">ReSTARTR/ruby-rpmbuild-container</a></li>
</ul>

<h2 id="section">環境</h2>

<ul>
  <li>ゲストOS：Vagrantで起動したUbuntu-14.04</li>
  <li>コンテナ：centos:6.4</li>
</ul>

<h2 id="section-1">ファイルの配置</h2>

<p>以下ファイルを同一ディレクトリに入れておきます。</p>

<ul>
  <li>Vagrantfile</li>
  <li>provision.sh</li>
  <li>Dockerfile</li>
  <li>rubybuild.sh</li>
  <li>ruby-2.0.0-p481.spec</li>
</ul>

<h2 id="section-2">手順</h2>

<ol>
  <li>ゲストOSの起動(Vagrant)</li>
  <li>ゲストOSにsshログイン</li>
  <li>Dockerコンテナのビルド</li>
  <li>Dockerコンテナ内でrpmビルド</li>
</ol>

<h2 id="os">1. ゲストOSの起動</h2>

<p>Vagrantfile</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># -*- mode: ruby -*-</span>
</span><span class="line"><span class="c1"># vi: set ft=ruby :</span>
</span><span class="line"><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class="line">
</span><span class="line"><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;ubuntu/trusty64&quot;</span>
</span><span class="line">
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;/vagrant&quot;</span>
</span><span class="line">
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">path</span><span class="p">:</span> <span class="s1">&#39;provision.sh&#39;</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># お好みで</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:virtualbox</span> <span class="k">do</span> <span class="o">|</span><span class="n">vb</span><span class="o">|</span>
</span><span class="line">    <span class="n">vb</span><span class="o">.</span><span class="n">customize</span> <span class="o">[</span><span class="s2">&quot;modifyvm&quot;</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;--memory&quot;</span><span class="p">,</span> <span class="s2">&quot;2048&quot;</span><span class="p">,</span> <span class="s2">&quot;--cpus&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="s2">&quot;--ioapic&quot;</span><span class="p">,</span> <span class="s2">&quot;on&quot;</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>provision.sh</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo apt-get update
</span><span class="line">sudo apt-get install -y language-pack-ja
</span><span class="line">
</span><span class="line"><span class="c"># Docker</span>
</span><span class="line">sudo apt-get install -y docker.io
</span><span class="line">sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="osssh">2. ゲストOSにsshログイン</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>vagrant up
</span><span class="line"><span class="nv">$ </span>vagrant ssh
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> /vagrant
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="docker">3. Dockerコンテナのビルド</h2>

<p>ビルド用specファイルを用意して、シェルスクリプトでビルドします。</p>

<p>すると、コンテナにマウントしたボリュームにビルド済みのrpmファイルがコピーされます。</p>

<h3 id="spec">ビルド用specシェルスクリプト</h3>

<p>環境変数RUBY_VERSIONに”2.0.0-p481”や”2.0.0-p451”を設定すれば任意のバージョンをビルドします。</p>

<p><em>※デフォルトの2.0.0-p481以外はそれ用のspecファイルが必要になります。</em></p>

<p>rubybuild.sh</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/env bash</span>
</span><span class="line"><span class="nv">WORKDIR</span><span class="o">=</span>/opt/rpmbuild
</span><span class="line">
</span><span class="line"><span class="nv">RUBY_VER</span><span class="o">=</span><span class="k">${</span><span class="nv">RUBY_VER</span><span class="k">:-</span><span class="s2">&quot;2.0.0-p481&quot;</span><span class="k">}</span>
</span><span class="line"><span class="nv">RUBY_MAJOUR_VER</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$RUBY_VER</span>|cut -d<span class="s2">&quot;-&quot;</span> -f1<span class="k">)</span>
</span><span class="line"><span class="nv">RUBY_MINOR_VER</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$RUBY_VER</span>|cut -d<span class="s2">&quot;-&quot;</span> -f2<span class="k">)</span>
</span><span class="line"><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$RUBY_MINOR_VER&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class="line"><span class="k">  </span><span class="nv">RUBY_TARBALL</span><span class="o">=</span><span class="s2">&quot;ruby-$RUBY_MAJOUR_VER.tar.gz&quot;</span>
</span><span class="line"><span class="k">else</span>
</span><span class="line"><span class="k">  </span><span class="nv">RUBY_TARBALL</span><span class="o">=</span><span class="s2">&quot;ruby-$RUBY_MAJOUR_VER-$RUBY_MINOR_VER.tar.gz&quot;</span>
</span><span class="line"><span class="k">fi</span>
</span><span class="line"><span class="nv">RUBY_REMOTE_FILE</span><span class="o">=</span><span class="s2">&quot;http://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOUR_VER:0:3}/$RUBY_TARBALL&quot;</span>
</span><span class="line">
</span><span class="line">mkdir -p <span class="nv">$WORKDIR</span>/rpm/<span class="o">{</span>BUILD,SRPMS,SPECS,SOURCES,RPMS<span class="o">}</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;%_topdir $WORKDIR/rpm&quot;</span> &gt; <span class="nv">$WORKDIR</span>/.rpmmacros
</span><span class="line"><span class="k">if</span> <span class="o">[</span> ! -f <span class="nv">$WORKDIR</span>/rpm/SOURCES/<span class="nv">$RUBY_TARBALL</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class="line"><span class="k">  </span>wget <span class="nv">$RUBY_REMOTE_FILE</span> -O <span class="nv">$WORKDIR</span>/rpm/SOURCES/<span class="nv">$RUBY_TARBALL</span>
</span><span class="line"><span class="k">fi</span>
</span><span class="line">cp <span class="nv">$WORKDIR</span>/ruby-<span class="k">${</span><span class="nv">RUBY_VER</span><span class="k">}</span>.spec <span class="nv">$WORKDIR</span>/rpm/SPECS/ruby.spec
</span><span class="line">rpmbuild -bb <span class="nv">$WORKDIR</span>/rpm/SPECS/ruby.spec
</span><span class="line">
</span><span class="line">cp <span class="nv">$WORKDIR</span>/rpm/RPMS/x86_64/* /shared/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="dockerrpm">4. Dockerコンテナ内でrpmビルド</h2>

<p>Dockerfile</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">FROM centos:6.4
</span><span class="line">
</span><span class="line"><span class="c"># setup</span>
</span><span class="line">RUN yum update -y
</span><span class="line">RUN yum install -y rpm-build gcc
</span><span class="line">
</span><span class="line"><span class="c"># epel</span>
</span><span class="line">RUN rpm --import http://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-6
</span><span class="line">RUN rpm -ihv http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
</span><span class="line">
</span><span class="line"><span class="c"># ruby-depends</span>
</span><span class="line">RUN yum install —enablerepo<span class="o">=</span>epel -y libyaml-devel
</span><span class="line">RUN yum install -y byacc readline-devel ncourses-devel tcl-devel openssl-devel gdbm-devel db4-devel
</span><span class="line">
</span><span class="line"><span class="c"># build rpm</span>
</span><span class="line">WORKDIR /opt/rpmbuild
</span><span class="line">ADD rubybuild.sh /opt/rpmbuild/rubybuild.sh
</span><span class="line">ADD ruby-2.0.0-p481.spec /opt/rpmbuild/ruby-2.0.0-p481.spec
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="rpm">コンテナ起動してrpmをビルド</h2>

<p>コンテナを起動する際に、カレントディレクトリをマウントしておきます。</p>

<p><em>※<code>--rm</code>オプションでrpm作成完了したらコンテナは破棄します</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo docker build -t &lt;USERNAME&gt;/rpmbuild .
</span><span class="line"><span class="nv">$ </span>sudo docker run --rm -v <span class="nv">$PWD</span>:/shared:rw -it &lt;CONTAINER_ID&gt; /bin/sh ./rubybuild.sh
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>成功すれば、ゲストOSのカレントディレクトリにrpmができてます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>ls *.rpm
</span><span class="line">ruby-2.0.0p481-2.el6.x86_64.rpm
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>これで、rpmコマンド一発で最新のrubyをインストールできます。</p>

<p>rubyインストール済みコンテナを作るなら、Dockerfileに以下のように書けばruby実行環境のできあがりです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">FROM centos:6.4
</span><span class="line">
</span><span class="line"><span class="c"># EPEL</span>
</span><span class="line">RUN rpm --import http://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-6
</span><span class="line">RUN rpm -ihv http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
</span><span class="line">
</span><span class="line"><span class="c"># Install ruby rpm</span>
</span><span class="line">ADD ruby-2.0.0p481-2.el6.x86_64.rpm ruby-2.0.0p481-2.el6.x86_64.rpm
</span><span class="line">RUN yum install -y --enablerepo<span class="o">=</span>epel libyaml-devel
</span><span class="line">RUN rpm -ihv ruby-2.0.0p481-2.el6.x86_64.rpm
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技術系podcastまとめ]]></title>
    <link href="http://blog.restartr.com/2014/04/22/tech-podcast-list/"/>
    <updated>2014-04-22T23:58:29+09:00</updated>
    <id>http://blog.restartr.com/2014/04/22/tech-podcast-list</id>
    <content type="html"><![CDATA[<h3 id="rebuild-podcast">Rebuild Podcast</h3>

<blockquote>
Rebuild はソフトウェア開発、テクノロジー、ガジェットなどの話題を中心に、ゲストと話すギーク、デベロッパー向けのポッドキャスト番組です。
</blockquote>

<ul>
  <li>Hosted by <a href="http://twitter.com/miyagawa">@miyagawa</a></li>
  <li><a href="http://rebuild.fm/">http://rebuild.fm/</a></li>
  <li><a href="http://feeds.rebuild.fm/rebuildfm">RSS</a></li>
  <li><a href="https://itunes.apple.com/jp/podcast/rebuild/id603013428?mt=2">iTunes</a></li>
</ul>

<h3 id="mosaicfm">mosaic.fm</h3>

<blockquote>
次世代 Web Podcast Mozaic
</blockquote>

<ul>
  <li>Hosted by <a href="https://twitter.com/jxck_">@Jxck_</a></li>
  <li><a href="http://mozaic.fm/">http://mozaic.fm/</a></li>
  <li><a href="http://feeds.feedburner.com/mozaicfm">RSS</a></li>
</ul>

<h3 id="section">だんごゆっけの平和な話</h3>

<blockquote>
仲良し三十路男二人。Web業界にいるプランナーとエンジニア。それぞれの日常を平和にまとめあげていきます
</blockquote>

<ul>
  <li>Hosted by <a href="https://twitter.com/kamadango">@kamadango</a>, <a href="https://twitter.com/yusukebe">@yusukebe</a></li>
  <li><a href="http://dandy.fm/">http://dandy.fm/</a></li>
  <li><a href="http://feed.dandy.fm/dandyfm">RSS</a></li>
  <li><a href="https://itunes.apple.com/jp/podcast/id806076544?mt=2">iTunes</a></li>
</ul>

<h3 id="section-1">職質テックトーク</h3>

<ul>
  <li>Hosted by <a href="https://twitter.com/moznion/">@moznion</a></li>
  <li><a href="http://shock-sheets-tech.tumblr.com/">http://shock-sheets-tech.tumblr.com/</a></li>
  <li><a href="http://shock-sheets-tech.tumblr.com/rss">RSS</a></li>
</ul>

<h3 id="backspacefm">backspace.fm</h3>

<blockquote>
一週間分のテック・ガジェットニュースを配信するポッドキャスト
</blockquote>

<ul>
  <li><a href="http://backspace.fm/">http://backspace.fm/</a></li>
  <li><a href="http://feeds.backspace.fm/backspacefm">RSS</a></li>
  <li><a href="https://itunes.apple.com/jp/podcast/backspace.fm/id830709730">iTunes</a></li>
  <li>Hosted by <a href="https://twitter.com/drikin">@drikin</a></li>
</ul>

<h3 id="code-lunch">CODE LUNCH</h3>

<ul>
  <li><a href="http://codelunch.fm/">http://codelunch.fm/</a></li>
  <li><a href="http://codelunch.fm/rss.xml">RSS</a></li>
  <li>Hosted by <a href="https://twitter.com/h13i32maru">@h13i32maru</a>, <a href="https://twitter.com/iizukak">@iizukak</a></li>
</ul>

<h3 id="podcast">ジュンク堂書店Podcast</h3>

<blockquote>
ジュンク堂書店の店頭で行われているトークセッションやイベントなどを配信するポッドキャスト（ベータ版）です。
</blockquote>

<ul>
  <li><a href="http://junkudo.seesaa.net/index20.rdf">RSS</a></li>
  <li><a href="https://itunes.apple.com/jp/podcast/junku-tang-shu-dianpodcast/id398125301">iTunes</a></li>
</ul>

<h2 id="section-2">海外</h2>

<p>海外では<a href="http://5by5.tv/">5by5</a>がポータルっぽい。</p>

<h3 id="ruby-on-rails-podcast">Ruby on Rails Podcast</h3>

<ul>
  <li><a href="http://5by5.tv/rubyonrails/147">http://5by5.tv/rubyonrails/147</a></li>
  <li><a href="http://feeds.5by5.tv/rubyonrails">RSS</a></li>
  <li><a href="https://itunes.apple.com/us/podcast/ruby-on-rails-podcast/id840890158?mt=2&amp;uo=8&amp;at=11laDR">iTunes</a></li>
  <li>Hosted by <a href="http://twitter.com/barelyknown">@barelyknown</a></li>
</ul>

<h3 id="the-changelog">The Changelog</h3>

<blockquote>
The Changelog covers the intersection of software development and open source. Open source moves fast. Keep up!
</blockquote>

<ul>
  <li><a href="http://5by5.tv/changelog/">http://5by5.tv/changelog/</a></li>
  <li><a href="http://feeds.5by5.tv/changelog">RSS</a></li>
  <li><a href="https://itunes.apple.com/us/podcast/the-changelog/id341623264?uo=8&amp;at=11laDR">iTunes</a></li>
</ul>

<h3 id="aws-podcast---listen-and-lean-about-aws">AWS Podcast - Listen and Lean About AWS</h3>

<ul>
  <li><a href="http://aws.amazon.com/jp/apac/awspodcast/">http://aws.amazon.com/jp/apac/awspodcast/</a></li>
  <li><a href="http://d1i0y6b5oi739x.cloudfront.net/feed.xml">RSS</a></li>
  <li><a href="http://itunes.apple.com/sg/podcast/aws-podcast/id526624928">iTunes</a></li>
</ul>

<h3 id="in-beta">In Beta</h3>

<blockquote>
In Beta is a talk show about tech culture, making open source software, and how mobile, social, and web apps are changing the world.
</blockquote>

<ul>
  <li><a href="http://feeds.5by5.tv/inbeta">http://feeds.5by5.tv/inbeta</a></li>
  <li><a href="http://feeds.5by5.tv/inbeta">RSS</a></li>
</ul>

<h3 id="floss">FLOSS</h3>

<blockquote>
We&#8217;re not talking dentistry here; FLOSS all about Free Libre Open Source Software.
</blockquote>

<ul>
  <li><a href="http://twit.tv/floss">http://twit.tv/floss</a></li>
  <li><a href="http://feeds.twit.tv/floss.xml">RSS</a></li>
</ul>

<h3 id="tuxradar">TuxRadar</h3>

<blockquote>
a new TuxRadar podcast all about Linux and free software will be posted here every three weeks for free download
</blockquote>

<ul>
  <li><a href="http://www.tuxradar.com/podcast">http://www.tuxradar.com/podcast</a></li>
  <li><a href="http://www.tuxradar.com/rss">RSS</a></li>
</ul>

<h3 id="the-news">The News</h3>

<blockquote>
A daily update on the latest in tech, Apple, gaming, web, and geek culture. It&#8217;s the only news that matters.
</blockquote>

<ul>
  <li><a href="http://5by5.tv/news">http://5by5.tv/news</a></li>
  <li><a href="http://feeds.5by5.tv/news">RSS</a></li>
  <li><a href="https://itunes.apple.com/us/podcast/the-news/id602266713?mt=2&amp;uo=8&amp;at=11laDR">iTunes</a></li>
  <li>Hosted by <a href="http://twitter.com/imyke">@imyke</a></li>
</ul>

<h3 id="sourcetrunk">Sourcetrunk</h3>

<p>デスクトップアプリ紹介中心</p>

<ul>
  <li><a href="http://www.sourcetrunk.com/">http://www.sourcetrunk.com/</a></li>
  <li><a href="http://feeds.feedburner.com/sourcetrunk">RSS</a></li>
  <li><a href="http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=193827468">iTunes</a></li>
</ul>

<h3 id="sofrware-engineering-radio">Sofrware Engineering Radio</h3>

<ul>
  <li><a href="http://www.se-radio.net/">http://www.se-radio.net/</a></li>
  <li><a href="http://www.se-radio.net/">RSS</a></li>
</ul>

<h3 id="the-engineering-commons-podcast">The Engineering Commons Podcast</h3>

<blockquote>
Practical insights for the engineering crowd
</blockquote>

<ul>
  <li><a href="http://theengineeringcommons.com/">http://theengineeringcommons.com/</a></li>
  <li><a href="http://feeds.feedburner.com/TheEngineeringCommonsPodcast">RSS</a></li>
</ul>

<h2 id="section-3">参考リンク</h2>

<ul>
  <li><a href="http://weblog.bulknews.net/post/58665793844/tech-podcast-5">オススメ Tech Podcast 5選 - Tatsuhiko Miyagawa’s blog</a></li>
  <li><a href="http://www.infoq.com/jp/news/2011/09/archcasts">ソフトウェアアーキテクチャ関連ポッドキャストの薦め</a></li>
  <li><a href="http://overflow-memo.blogspot.jp/2014/01/podcast.html">_overflow: 技術系Podcast・動画ニュースメモ</a></li>
  <li><a href="http://tunein.com/radio/Technology-g2738/">テクノロジーラジオ - Listen Online</a></li>
  <li><a href="http://blackshadow.seesaa.net/article/144207109.html">幻影随想: 科学なポッドキャストをまとめて紹介してみる</a></li>
  <li><a href="https://player.fm/featured/open-source">Best Open Source Podcasts (April, 2014)</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goでmemcachedのstatsを取得する]]></title>
    <link href="http://blog.restartr.com/2014/04/21/golang-memcache-stats-client/"/>
    <updated>2014-04-21T00:17:33+09:00</updated>
    <id>http://blog.restartr.com/2014/04/21/golang-memcache-stats-client</id>
    <content type="html"><![CDATA[<p>YouTubeで使われている<a href="https://github.com/youtube/vitess">vitess</a>の実装をざっと見てたところ、memcachedクライアント実装が簡潔でわかりやすかったので出来る限りラフに実装を写経してみました。</p>

<p>やってることはコマンドラインからアドレスを受け取って、memcachedのstatsを表示するだけです。</p>

<h3 id="section">この写経で学べること</h3>

<ul>
  <li>flagパッケージを使ったコマンドライン引数の取得</li>
  <li>netパッケージを使ったネットワーク接続</li>
  <li>bufioパッケージを使ったストリームの読み出し</li>
</ul>

<h3 id="main">main()</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">// 引数読み出し</span>
</span><span class="line">	<span class="nx">address</span> <span class="o">:=</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">String</span><span class="p">(</span><span class="s">&quot;address&quot;</span><span class="p">,</span> <span class="s">&quot;localhost:11211&quot;</span><span class="p">,</span> <span class="s">&quot;server address&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="nx">flag</span><span class="p">.</span><span class="nx">Parse</span><span class="p">()</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;server: %s\n&quot;</span><span class="p">,</span> <span class="o">*</span><span class="nx">address</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// サーバーに接続</span>
</span><span class="line">	<span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">GetConn</span><span class="p">(</span><span class="o">*</span><span class="nx">address</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%#v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">defer</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">conn</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// stats読み出し</span>
</span><span class="line">	<span class="nx">result</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">Stats</span><span class="p">()</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">実行結果</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>go run ./memcache_stats.go --address<span class="o">=</span>localhost:11211
</span><span class="line">server: localhost:11211
</span><span class="line">STAT pid 23282
</span><span class="line">STAT uptime 12425
</span><span class="line">STAT <span class="nb">time </span>1398007875
</span><span class="line">STAT version 1.4.4
</span><span class="line">STAT pointer_size 64
</span><span class="line">STAT rusage_user 0.335948
</span><span class="line">STAT rusage_system 0.344947
</span><span class="line">  :
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">実装全体</h3>

<div><script src="https://gist.github.com/11116595.js?file=memcache_stats.go"></script>
<noscript><pre><code>package main                                                                                                                                                                          [32/1268]

// 写経 from: https://github.com/youtube/vitess/blob/master/go/memcache/memcache.go
//  * エラーハンドリングをできるかぎり省略して実装.
//  * statsコマンドだけ実装

import (
        &quot;bufio&quot;
        &quot;flag&quot;
        &quot;fmt&quot;
        &quot;net&quot;
        &quot;os&quot;
        &quot;strings&quot;
)

type Connection struct {
        conn net.Conn
        buffered bufio.ReadWriter
}

func GetConn(address string) (conn *Connection, err error) {
        nc, err := net.Dial(&quot;tcp&quot;, address)
        if err != nil {
                return nil, err
        }
        return &amp;Connection{
                conn: nc,
                buffered: bufio.ReadWriter{
                        Reader: bufio.NewReader(nc),
                        Writer: bufio.NewWriter(nc),
                },
        }, err
}

func (mc *Connection) writestring(s string) {
        _, err := mc.buffered.WriteString(s);
        if err!= nil {
                panic(err)
        }
}

func (mc *Connection) readline() string {
        mc.flush()
        l, _, _ := mc.buffered.ReadLine()
        return string(l)
}

func (mc *Connection) flush() {
        err := mc.buffered.Flush()
        if err != nil {
                panic(err)
        }
}

func (mc *Connection) Stats() (result []byte, err error) {
        mc.writestring(&quot;stats\r\n&quot;)
        mc.flush()
        for {
                l := mc.readline()
                if strings.HasPrefix(l, &quot;END&quot;) {
                        break
                }
                if strings.Contains(l, &quot;ERROR&quot;) {
                        panic(&quot;ERROR&quot;)
                }
                result = append(result, l...)
                result = append(result, &#39;\n&#39;)
        }
        return result, err
}

func main() {
        address := flag.String(&quot;address&quot;, &quot;localhost:11211&quot;, &quot;server address&quot;)
        flag.Parse()
        fmt.Printf(&quot;server: %s\n&quot;, *address)

        conn, err := GetConn(*address)
        if err != nil {
                fmt.Printf(&quot;%#v&quot;, err)
                os.Exit(1)
        }
        defer conn.conn.Close()

        result, _ := conn.Stats()
        fmt.Printf(&quot;%s&quot;, result)
}</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimで特定のファイルタイプだけタブインデントにする方法]]></title>
    <link href="http://blog.restartr.com/2014/04/20/vimrc-noexpandtab-in-golang/"/>
    <updated>2014-04-20T16:15:21+09:00</updated>
    <id>http://blog.restartr.com/2014/04/20/vimrc-noexpandtab-in-golang</id>
    <content type="html"><![CDATA[<p>rubyやpythonなど通常のプログラムを書く場合は、基本的にソフトタブ(2spaces)でインデントされるようにvimを設定しています。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">set</span> <span class="nb">noexpandtab</span>
</span><span class="line"><span class="k">set</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">2</span>
</span><span class="line"><span class="k">set</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>けれど、Goの場合はインデントはハードタブが通例。</p>

<p>なので拡張子が”.go”の場合だけハードタブでインデントするための設定を.vimrcに書いておきます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">if</span> expand<span class="p">(</span><span class="s2">&quot;%:t&quot;</span><span class="p">)</span> <span class="p">=~</span> <span class="s2">&quot;.*\.go&quot;</span>
</span><span class="line">  <span class="k">set</span> <span class="nb">noexpandtab</span>
</span><span class="line">  <span class="k">set</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">4</span>
</span><span class="line">  <span class="k">set</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">4</span>
</span><span class="line"><span class="k">endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>%:t</code>はディレクトリ含まないファイル名。</p>

<p>autocmd使うほうが良いかも。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">au</span> <span class="nb">BufNewFile</span><span class="p">,</span><span class="nb">BufRead</span> *.<span class="k">go</span> <span class="k">set</span> <span class="nb">noexpandtab</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">4</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ちなみに、<code>set expandtab</code>してる状態でタブを入力する場合は<code>Ctrl-v + &lt;tab&gt;</code>でハードタブが入力できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VarnishのVCLを再起動なしに再読み込みする]]></title>
    <link href="http://blog.restartr.com/2014/04/06/reload-varnish-vcl/"/>
    <updated>2014-04-06T15:38:08+09:00</updated>
    <id>http://blog.restartr.com/2014/04/06/reload-varnish-vcl</id>
    <content type="html"><![CDATA[<p>/etc/varnish/default.vclを書き換えた時、</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">/etc/init.d/varnishd restart
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ってやってたけど、reloadできることを今更知った。</p>

<h3 id="vcllist-vcl">vcl.list: 現在の読み込んでるVCLの一覧を見る</h3>

<p>CentOSのyumで入れたvarnishはデフォルトでこんなふうになってる</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>varnishadm -T localhost:6082 vcl.list
</span><span class="line">active        579 boot
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="vclload-vcl">vcl.load: 新規にVCLをロードする</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>varnishadm -T localhost:6082 vcl.load boot-<span class="sb">`</span>date+%Y%m%d%H%M%S<span class="sb">`</span> /etc/varnish/default.vcl
</span><span class="line">VCL compiled.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>この時点では利用可能な状態であって、まだ変更は反映されていない</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>varnishadm -T localhost:6082 vcl.list
</span><span class="line">active        579 boot
</span><span class="line">available       0 boot-20140406153127
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="vcluse-vcl">vcl.use: ロードしたVCLに切り替える</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>varnishadm -T localhost:6082 vcl.use boot-20140406153127
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>何も表示されないけどちゃんと切り替わっている</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>varnishadm -T localhost:6082 vcl.list
</span><span class="line">available     526 boot
</span><span class="line">active         53 boot-20140406153127
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ちなみに、真ん中の数値はactiveの場合は経過秒数で、availableになると数値が減っていく。
でも、0になっても居座り続ける。この数値の変化のルールはよくわかってない。</p>

<p>ということで不要な過去のvclは定期的に消さないとずっと残り続けてしまうので注意。</p>

<h3 id="vcldiscard-vcl">vcl.discard: ロード済みvclの破棄</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>varnishadm -T localhost:6082 vcl.discard boot
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ここでも結果が表示されないけどちゃんと消えている。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>varnishadm -T localhost:6082 vcl.list
</span><span class="line">available       11 boot-20140406155155
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>本当はinitスクリプト化すると便利なんだろうけど、手動でも良いかなと。</p>

<ul>
  <li><a href="http://blog.xcir.net/?p=124">Varnishで再起動無しで設定ファイルを適用する方法(reload) » cat /dev/random &gt; /dev/null &amp;</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordpressからOctopressに移行]]></title>
    <link href="http://blog.restartr.com/2014/04/06/move-from-wordpress-to-octopress/"/>
    <updated>2014-04-06T13:00:00+09:00</updated>
    <id>http://blog.restartr.com/2014/04/06/move-from-wordpress-to-octopress</id>
    <content type="html"><![CDATA[<p>もともとさくらのレンサバ上でWordpressで構築していたブログを<a href="http://octopress.org/">Octopress</a>に移行してGithub Pagesでホスティングするように切り替え。
最初は<a href="http://jekyllrb.com/">Jekyll</a>だけでやろうとしてたけど、ブロクとしての機能を見るとOctopressのほうが良さそうだったので途中で方針転換。</p>

<h4 id="section">手順</h4>

<p>詳細な手順は面倒なので割愛するとして、だいたいこんな感じの流れで移行。</p>

<ol>
  <li>作業用環境にjekyll, jekyll-import, mysql2, sequelをgem install</li>
  <li>さくらのレンサバ上のMySQLのデータをmysqldumpしてscp</li>
  <li>dumpデータを作業用環境のMySQLにリストア</li>
  <li>リストアしたデータから<a href="http://import.jekyllrb.com/docs/wordpress/">jekyll-import</a>を使って記事のmarkdownファイルを吐き出す</li>
  <li>octopressをcloneして、<code>rake install</code></li>
  <li>jekyll-importで吐き出されたファイルをoctopressのsource/_posts以下に移動</li>
  <li><code>rake preview</code>で表示を確認しながら、source/_posts以下のmarkdownファイルをひたすら修正</li>
  <li>テーマを調整&amp;元記事のURLパスと同一になるように<code>_config.yml</code>に設定</li>
  <li>githubにpushしてgithub pagesとして公開</li>
  <li>CNAMEを設定してgithub.ioから元のドメイン(blog.restartr.com)に移行</li>
</ol>

<p>さくらのレンサバ内からしかWordpressのDBに接続できないのと、レンサバ内でrubyを使うのはなんか面倒事が多そうだったので、環境整備済みなvpsで移行作業。</p>

<p><em>※wordpressのエクスポート機能で吐き出したxmlからmigrateする方法もあるけど今回は不採用</em></p>

<h4 id="wordpress">Wordpressの時のドメイン、パスを同一にするための設定</h4>

<p>wordpressでは<code>/year/month/day/title</code>というpermalinkを設定していたのでそれと同一にするための作業。</p>

<ul>
  <li>ドメインはgithub pagesのカスタムドメインとCNAME設定で解決</li>
  <li>パスは<code>_config.yml</code>のpermalinkを<code>/:year/:month/:day/:title</code>にして解決</li>
</ul>

<h4 id="section-1">さくらのレンサバ側の独自ドメイン設定</h4>

<p>これでハマりました。さくらのドメインの設定で”blog.restartr.com”のCNAMEを設定したのに、DNSへの問い合わせ結果が常にAレコードしか帰ってこなくてかなり悩んでた。
結論は、さくらのレンサバの設定画面で独自ドメインとして”blog.restartr.com”を登録していて、そっちの設定が邪魔をしていた。</p>

<p>さくらのレンサバの独自ドメイン設定をはずして、さくらのドメインのCNAME設定を追加したら無事に解決。</p>

<p><em>さくらのレンサバの独自ドメインの解除から、2時間以上反映に時間かかるらしい</em></p>

<h4 id="post">postデータの修正</h4>

<p>jekyll-importを使ってmarkdownを吐き出すところまではすんなりいけたけど、なにより面倒だったのが吐き出したmarkdownを修正する作業。</p>

<ul>
  <li>シンタックスハイライトするために<code>[ccW_python]...[/ccW_python]</code>とか<code>&lt;pre class="brush:pyton"&gt;...&lt;/pre&gt;</code>とか独自タグがある</li>
  <li>amazonのリンク生成用タグ<code>[tmkm-amazon]123456[/tmkm-amazon]</code>というタグがある</li>
  <li><code>&lt;p&gt;</code>タグと<code>&lt;br /&gt;</code>タグの嵐</li>
</ul>

<p>これらの対応のためにいちいち置換するのが非常に大変。<code>[ccW]</code>と<code>[tmkm-amazon]</code>タグは置換できたけど、<code>&lt;pre class="brush:..."&gt;</code>についてはハイライトされないだけで表示上問題なさそうなので無視。
あとはmarkdownにhtmlが混じってるのが気持ち悪いので<code>&lt;p&gt;</code>と<code>&lt;br /&gt;</code>を置換して行間を調整。</p>

<p>ドラフト記事をリモートにpushしてなくて別のPCから記事の途中からかけなくて困った…とならないように基本的にVPS上にcloneすることにした。
これで記事編集のための苦痛を感じる事無く純粋なmarkdownで記事がかけるようになる。</p>

<ul>
  <li>参考にした記事</li>
  <li><a href="http://hadihariri.com/2013/12/24/migrating-from-wordpress-to-jekyll/">Migrating from WordPress.com to Jekyll – Hadi Hariri</a></li>
  <li><a href="http://blog.glidenote.com/blog/2011/12/20/how-to-use-custom-domain-on-github-pages/">GitHub PagesでCustom Domainを利用する - Glide Note - グライドノート</a></li>
  <li>ベースにしたテーマ</li>
  <li><a href="https://github.com/bijumon/oct2">bijumon/oct2</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoとPythonをZeroMQで繋ぐ]]></title>
    <link href="http://blog.restartr.com/2013/04/26/connect-go-and-python-with-zeromq/"/>
    <updated>2013-04-26T23:34:48+09:00</updated>
    <id>http://blog.restartr.com/2013/04/26/connect-go-and-python-with-zeromq</id>
    <content type="html"><![CDATA[<p>最近Rubyでプロジェクトオイラーを解きながらRubyに慣れようとしてるのですが、ちょっと飽きてきたので息抜きにGoを書いたりしています。</p>

<p>ついでにZeroMQも試してみたかったので、GoとPythonをZeroMQで繋いでみました。</p>

<p>構成はこんな感じで、Python(かGo)clientを起動し、Goで動くmonitorq経由でGoのserverにつながります。PUB/SUBでmonitorからモニタリングできるのがミソです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">              <span class="o">+----------------------------------------+</span>
</span><span class="line">              <span class="o">|</span>                                        <span class="o">|</span>
</span><span class="line">  <span class="o">+------+</span>        <span class="o">|--------------------------+</span>     <span class="o">+-----+</span> <span class="o">|</span>
</span><span class="line">  <span class="o">|</span><span class="n">client</span><span class="o">|--------|</span><span class="mi">9001</span>     <span class="n">monitorq</span>     <span class="mi">9002</span><span class="o">|-----|</span><span class="n">serv</span> <span class="o">|</span> <span class="o">|</span>
</span><span class="line">  <span class="o">|</span><span class="p">(</span><span class="no">REQ</span><span class="p">)</span> <span class="o">|</span>        <span class="o">|</span><span class="p">(</span><span class="no">ROUTER</span><span class="p">)</span>   <span class="mi">9003</span>   <span class="p">(</span><span class="no">DEALER</span><span class="p">)</span><span class="o">|</span>     <span class="o">|</span><span class="p">(</span><span class="no">REP</span><span class="p">)</span><span class="o">|</span> <span class="o">|</span>
</span><span class="line">  <span class="o">+------+</span>        <span class="o">|--------------------------+</span>     <span class="o">+-----+</span> <span class="o">|</span>
</span><span class="line">              <span class="o">|</span>          <span class="o">|</span><span class="p">(</span><span class="no">PUB</span><span class="p">)</span>                        <span class="o">|</span>
</span><span class="line">              <span class="o">|</span>          <span class="o">|</span>                             <span class="o">|</span>
</span><span class="line">              <span class="o">|</span>          <span class="o">|</span>                             <span class="o">|</span>
</span><span class="line">              <span class="o">|</span>          <span class="o">|</span><span class="p">(</span><span class="no">SUB</span><span class="p">)</span>                        <span class="o">|</span>
</span><span class="line">              <span class="o">|</span>      <span class="o">+-------+</span>                         <span class="o">|</span>
</span><span class="line">              <span class="o">|</span>      <span class="o">|</span><span class="n">monitor</span><span class="o">|</span>                         <span class="o">|</span>
</span><span class="line">              <span class="o">|</span>      <span class="o">+-------+</span>                         <span class="o">|</span>
</span><span class="line">              <span class="o">+----------------------------------------+</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>※client/server/monitorは複数たちあげるとよしなに振り分けてくれます。</em></p>

<ul>
  <li>monitorqでfan-in/outする</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>go run queue.go monitorq
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>clientから”PING”を投げる(と、”PONG#<pid>&#8220;が帰る)</pid></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>python run queue.py client
</span><span class="line">PONG#&lt;28870&gt;
</span><span class="line">PONG#&lt;28870&gt;
</span><span class="line"> :
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>serverから”PONG”を返す(clientからのPINGを表示)</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>go run queue.go serv
</span><span class="line">Recv: PING#&lt;73835&gt;
</span><span class="line">Recv: PING#&lt;73835&gt;
</span><span class="line"> :
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>monitorでリクエスト総数をモニタリング</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>go run queue.go monitor
</span><span class="line">MONITOR: IN: 2082, OUT 2082
</span><span class="line">MONITOR: IN: 2083, OUT 2083
</span><span class="line"> :
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>コードはgistにあげてます。</p>

<ul>
  <li><a href="https://gist.github.com/ReSTARTR/5467656">gist</a></li>
</ul>

<p>ZeroMQなら他にもいろんな構成がとれるので、使いどころは結構あるのではないかと。</p>

<p>今回、不慣れなGoで書いてみましたが、これくらいであればもわりと素直にかけるなぁという印象です。</p>

<p>Goで書かれたZeroMQのサンプルは以下githubリポジトリにたくさんあるので、覗いてみると色々勉強になります。</p>

<ul>
  <li><a href="https://github.com/imatix/zguide/tree/master/examples/Go">zguide/examples/Go at master ? imatix/zguide</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pythonのクロージャに変数を束縛する方法]]></title>
    <link href="http://blog.restartr.com/2013/04/17/bind-a-variable-to-closure-in-python/"/>
    <updated>2013-04-17T22:19:14+09:00</updated>
    <id>http://blog.restartr.com/2013/04/17/bind-a-variable-to-closure-in-python</id>
    <content type="html"><![CDATA[<p>ハマったので。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line"><span class="n">double</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">*</span><span class="n">a</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c"># 8 (=4*2)</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c"># 20 (=10*3)</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c"># 12 # WTF?</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c"># 30</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>doubleというクロージャ内の変数aを、クロージャ宣言時のaで束縛したいのです。</p>

<p>対応は２つ。</p>

<ol>
  <li>lambdaのデフォルト引数で束縛する</li>
  <li>functools.partialで束縛する</li>
</ol>

<h3 id="lambda">1. lambdaのデフォルト引数で束縛する</h3>

<p>参考：<a href="http://stackoverflow.com/questions/10452770/python-lambdas-binding-to-local-values">closures - Python lambda’s binding to local values - Stack Overflow</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line"><span class="n">double</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">a</span><span class="p">:</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c"># 8 (=4*2)</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c"># 20 (=10*3)</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c"># 12 (=4*2)</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c"># 30 (=10*2)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="functoolspartial">2. functools.partialで束縛する</h3>

<p>やってることは1と同じなのですが、一応動くよねということで。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">partial</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line"><span class="n">double</span> <span class="o">=</span> <span class="n">partial</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="bp">None</span><span class="p">:</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">a</span><span class="p">)</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="c"># 8 (=8*2)</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c"># 30 (=10*2)</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c"># 12 (=4*2)</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c"># 30 (=10*2)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section">そもそも変数上書きしなければ良いんじゃない？</h3>

<p>普段は変数の上書きは基本的にやりません。なので変数の束縛とかあまり意識してませんでした。</p>

<p>今回、プロジェクトオイラーを解くにあたって、素数ジェネレータをつくろうとした結果、ハマったのでした。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">ifilter</span><span class="p">,</span> <span class="n">count</span>
</span><span class="line"><span class="k">def</span> <span class="nf">gen_primes</span><span class="p">():</span>
</span><span class="line">    <span class="n">it</span> <span class="o">=</span> <span class="n">count</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="c"># [2, 3, 4, ...]</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">        <span class="n">v</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class="line">        <span class="k">yield</span> <span class="n">v</span>
</span><span class="line">        <span class="n">it</span> <span class="o">=</span> <span class="n">ifilter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">v</span><span class="p">:</span> <span class="n">x</span> <span class="o">%</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="n">it</span><span class="p">)</span>
</span><span class="line">        <span class="c"># 当初は以下のようにしていた</span>
</span><span class="line">        <span class="c"># これだと次のループ時のifilter内でvの値が変わってしまう</span>
</span><span class="line">        <span class="c"># it = ifilter(lambda x: x % v &gt; 0, it)</span>
</span><span class="line"><span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">gen_primes</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span> <span class="n">v</span>
</span><span class="line">    <span class="k">if</span> <span class="n">v</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">:</span>
</span><span class="line">        <span class="k">break</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="functoolspartial-1">余談1: functools.partialの使いどころ</h3>
<p>ちょくちょく<a href="http://docs.python.jp/2.7/library/functools.html#functools.partial">functools.partial</a>使ってましたが、そんなの使わなくてもlambdaで事足りますね。今更気づきました…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">mul</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
</span><span class="line"><span class="n">mul</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>  <span class="c"># 6</span>
</span><span class="line"><span class="c"># lambda</span>
</span><span class="line"><span class="n">double</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">2</span><span class="p">:</span> <span class="n">mul</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>  <span class="c"># 6</span>
</span><span class="line"><span class="c"># functools.partial</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">functools</span>
</span><span class="line"><span class="n">double</span> <span class="o">=</span> <span class="n">functools</span><span class="o">.</span><span class="n">partial</span><span class="p">(</span><span class="n">mul</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>  <span class="c"># 6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>こうなると、functools.partialの使いどころが難しいですね。
戻り値がpartialオブジェクトなので、あとで引数とかが参照できることくらいでしょうか…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">functools</span><span class="o">.</span><span class="n">partial</span><span class="p">(</span><span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">0</span><span class="p">:</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">functools</span><span class="o">.</span><span class="n">partial</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x1092b2ec0</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">args</span>
</span><span class="line"><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">keywords</span>
</span><span class="line"><span class="p">{</span><span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">func</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">function</span> <span class="o">&lt;</span><span class="k">lambda</span><span class="o">&gt;</span> <span class="n">at</span> <span class="mh">0x1092eab18</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">args</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,)</span>  <span class="c"># 引数を後から上書きはできない</span>
</span><span class="line"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class="line">  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class="line"><span class="ne">TypeError</span><span class="p">:</span> <span class="n">readonly</span> <span class="n">attribute</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pythonのテストにpytestを使ってみた]]></title>
    <link href="http://blog.restartr.com/2013/04/05/my-first-pytest/"/>
    <updated>2013-04-05T21:00:24+09:00</updated>
    <id>http://blog.restartr.com/2013/04/05/my-first-pytest</id>
    <content type="html"><![CDATA[<p>pytestを使い始めました。</p>

<ul>
  <li><a href="http://pytest.org/latest/">pytest: helps you write better programs</a></li>
</ul>

<p>まだまだ機能は把握しきれていませんが、良いと思ったことは3つ。</p>

<ol>
  <li>テストがコケた箇所のコードがレポート内容に表示される</li>
  <li>テスト対象を初期化したものの受け渡し方をスマートにできる</li>
  <li>pytest.vimがなかなか使える</li>
</ol>

<h3 id="section">1.テストがコケた箇所のコードがレポート内容に表示される</h3>

<p>これが巷でよく聞く一番のメリットかとは思いますが、コケたときの情報が全然違います。
pytestはかなり詳細に表示してくれるので、レポートの内容だけでどこをどう直せば良いか把握できます。</p>

<h4 id="unittest-v">unittestの実行結果(-vオプション付き)</h4>

<p><a href="http://www.flickr.com/photos/53244662@N04/8621946368/" title="unittest by ReSTARTR_y, on Flickr"><img src="http://farm9.staticflickr.com/8523/8621946368_d7bc9a450d_z.jpg" width="640" height="220" alt="unittest" /></a></p>

<h4 id="pytest-v">pytestの実行結果(-vオプション付き)</h4>

<p><a href="http://www.flickr.com/photos/53244662@N04/8620844529/" title="pytest by ReSTARTR_y, on Flickr"><img src="http://farm9.staticflickr.com/8244/8620844529_ce66ff7f9c_z.jpg" width="640" height="401" alt="pytest" /></a></p>

<p>文字列比較の場合は差分表示してくれたりするので便利です。</p>

<h3 id="section-1">2. テスト対象を初期化したものの受け渡し方をスマートにできる</h3>

<p>これが結構良い感じだと思いました。</p>

<p>かなり単純なクラスを対象にして例を書きます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Hoge</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">v</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">v</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="pythonunittest">python同梱のunittestで書く</h4>

<p>こんな感じで、self.hogeを使ってテスト対象を受け渡します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">hoge</span> <span class="kn">import</span> <span class="n">Hoge</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">unittest</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestHoge1</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">hoge</span> <span class="o">=</span> <span class="n">Hoge</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">test_type</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">assertIsInstance</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hoge</span><span class="p">,</span> <span class="n">Hoge</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">test_val</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hoge</span><span class="o">.</span><span class="n">val</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">hoge</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="s">&#39;hoge&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hoge</span><span class="o">.</span><span class="n">val</span><span class="p">,</span> <span class="s">&#39;hige&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>pytestで書くとこんな感じになります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">hoge</span> <span class="kn">import</span> <span class="n">Hoge</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pytest</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestHoge1</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">pytest_funcarg__hoge</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="n">Hoge</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">test_type</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">hoge</span><span class="p">):</span>
</span><span class="line">        <span class="k">assert</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">hoge</span><span class="p">,</span> <span class="n">Hoge</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">test_val</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">hoge</span><span class="p">):</span>
</span><span class="line">        <span class="k">assert</span> <span class="n">hoge</span><span class="o">.</span><span class="n">val</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">        <span class="n">hoge</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="s">&#39;hoge&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="k">assert</span> <span class="n">hoge</span><span class="o">.</span><span class="n">val</span> <span class="o">==</span> <span class="s">&#39;hige&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">pytest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>何が良いかっていうと、各テストメソッドで必要な初期化済みHogeインスタンスを、pytest_funcarg__hoge()で作って渡してやることができます。pytest_funcarg__NAMEを定義すれば、各テストメソッドでNAMEとして引数にとることができるわけです。(<a href="http://pytest.org/latest-ja/funcargs.html">テスト関数 (funcargs) にオブジェクトを注入</a>)</p>

<p>unittest.TestCaseのsetUpを使う場合、self.hogeに一旦入れてやらないといけないし、各テストメソッドではself.hogeでアクセスする必要も出てきます。</p>

<p>見た目が簡潔になるのはとても良いことです。</p>

<h3 id="pytestvim">3. pytest.vimがなかなか使える</h3>

<p>vimのプラグインにpytest.vimっていうのがありました。
これもなかなか使い勝手が良いです。</p>

<p>詳しくは下記動画を御覧ください。</p>

<ul>
  <li><a href="http://vimeo.com/19774046"> pytest.vim 0.0.5 on Vimeo </a></li>
</ul>

<p>pytestの概要は以下スライドにて。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/14006990" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/pfctdayelise/funcargs-other-fun-with-pytest" title="Funcargs &amp; other fun with pytest" target="_blank">Funcargs &amp; other fun with pytest</a> </strong> from <strong><a href="http://www.slideshare.net/pfctdayelise" target="_blank">Brianna Laugher</a></strong> </div>
<p>他の機能は触りながらおいおい掴んでいければなと。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kauli株式会社を退職しました]]></title>
    <link href="http://blog.restartr.com/2013/04/02/retirement201303/"/>
    <updated>2013-04-02T22:45:29+09:00</updated>
    <id>http://blog.restartr.com/2013/04/02/retirement201303</id>
    <content type="html"><![CDATA[<p><a href="http://www.flickr.com/photos/53244662@N04/8599680561/" title="Cleanup my keyboard by ReSTARTR_y, on Flickr"><img src="http://farm9.staticflickr.com/8106/8599680561_da30653690.jpg" width="500" height="333" alt="Cleanup my keyboard" /></a></p>

<p><em>※2013/04/04 更新:会社名を公開しました</em></p>

<p>3月末付で<a href="http://kau.li">Kauli株式会社</a>を退職しました。</p>

<p>4月1日だと嘘っぽくなるかなと思い、1日ずらしてのご報告です。</p>

<p>2012年01月入社なので、1年3ヶ月という短い間でしたが、これまでで最も充実した1年だったように思います。</p>

<p>大規模な広告配信という技術的に非常に挑戦しがいのある分野で、非常に技術力の高いエンジニアと共にPythonプログラマーとして充実した日々を過ごさせてもらいました。</p>

<p>「大規模なトラフィックを直に感じながらアプリケーション開発に取り組みたい」という希望を胸に入った会社で、</p>

<ul>
  <li>データストアの検証(結果的にRedisを採用)</li>
  <li>合計数十台自作サーバーの組立(参考：<a href="https://gist.github.com/nekoya/3749146" title="Kauli自作サーバ組み立てマニュアル" target="_blank">Kauli自作サーバ組み立てマニュアル</a>)</li>
  <li>開発部総出でデータセンターでサーバーラッキング</li>
  <li>某社SOAP APIに難儀</li>
  <li>開発のベースをgithubに移行</li>
  <li>nginx + Python(werkzeug+uWSGI) + Redisによる広告配信システムの開発</li>
  <li>アプリケーションのパフォーマンスチューニング</li>
</ul>

<p>等々、これまでにない経験を1年ちょっとという短い期間に経験できました。</p>

<p>正直離れるのが勿体無いとも思うのですが、キャリアの見直しをしたかったとか諸々の理由により、退職することを決意しました。</p>

<p>同僚の方々には大変お世話になりました。どうもありがとうございました。</p>

<p>転職先はまだ決まっていないので、転職活動を進めつつ、じっくり勉強しておきたかったことに１つずつ取り組んでいこうかという感じです。</p>

<p>良い会社があればぜひ<a href="https://twitter.com/restartr">@ReSTARTR</a>にご紹介ください＞＜</p>

<p>…</p>

<p>なお、Kauli株式会社は継続してエンジニアを募集中のようですので、</p>

<p>大規模広告配信システムをPythonで開発したい方々は下記からぜひぜひご応募を。</p>

<ul>
  <li><b><a href="http://kau.li/jp/pages/recruit">Kauli - 採用情報</a></b></li>
</ul>

<p>それでは。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プログラマーにとっての『UMLっぽい何か』]]></title>
    <link href="http://blog.restartr.com/2013/04/01/uml-for-programmer/"/>
    <updated>2013-04-01T20:12:54+09:00</updated>
    <id>http://blog.restartr.com/2013/04/01/uml-for-programmer</id>
    <content type="html"><![CDATA[<p>わりと普遍的な話題だったので便乗です。</p>

<p><a href="http://nekoya.github.com/blog/2013/04/01/useful-uml/"> UMLも捨てたもんじゃない - nekoya press </a></p>

<blockquote>
<ul>
<li>UMLは設計の技法ではない</li>
<li>頭の中を整理するため、あるいは人と共有する際の表現技法である</li>
</ul>
</blockquote>
<p>とか、</p>

<blockquote>UMLの厳密な書式ルールには全くこだわりはなく、大まかなイメージだけ伝われば、細かい部分は口頭でフォローすれば十分だと考えていています。そういう意味ではUMLを正しく使っているとは言えないのかも知れませんが、それはそれでいいんじゃないのと。

</blockquote>

<p>は、まったくもって同意見で、「UML」という”なんだか面倒くさそうなイメージ”を捨てて、コードを整理もしくは伝達する補足的なものとして扱うことが大事だと思います。UMLを本を読んできっちり勉強する必要もなくて、英会話が完璧な文法に則る必要がないのと基本的に同じだと思います。</p>

<p>所謂SEが用いるUMLではなくプログラマーにとってのUMLは、もっとくだけたもので良いのです。</p>

<h4 id="section">いつやるか</h4>
<p>どのフェーズでこの図の作成にとりかかるかが問題になると思いますが、自分の場合は以下の場合に作成を試みることが多いです。</p>

<p>（主にクラス図作成の場合を想定しています。）</p>

<p><strong>1. プロトタイプ的に作り始めたコードが、ある程度育ってきて全体が見えづらいと感じた時</strong></p>

<p>これは自分のために作成するもの。なのでUMLのルールに準拠する必要はありませんので、どちらかといえば書き捨て型といえます。</p>

<p>（※ドキュメントの無いコードを読む場合も書き捨て型で作成します。）</p>

<p>そして、この図をもとに設計を見なおしたりします。</p>

<p><strong>2. 自分が作ったコードを他の誰かが読む時</strong></p>

<p>これは他人のために作成するもの。すでに設計が固まった段階のコードを追いかける上での補足情報になります。</p>

<p>完全にUML準拠する必要はないでしょうが、ある程度は従ったほうが余計な誤解もなくなるかもしれません。1である程度整理ができているのでこの段階での作成は非常にそれ程苦ではないはずです。</p>

<p>どちらの場合もコードありきで、後追いでの図形作成になります。注意すべきなのは、図にすべての情報を詰め込むわけではなく、必要最低限の情報に留めることで図をシンプルに保つことは必要です。</p>

<p>とまぁ、これくらいシンプルなルールであれば、普段の開発フローに取り入れることはさほど大きなコストではないと考えます。多くの人はこれくらいのことはやっているんじゃないかとは思いますが、先のブログでも書かれている通り表立って議論されることはあまりないように感じます。</p>

<h4 id="section-1">図を描くためのツール</h4>
<p>図形作成のためにいちいち<a href="http://astah.change-vision.com/ja/index.html">astah*</a>やExcel()のようなアプリケーションを立ち上げるのは面倒ですよね。</p>

<p><a href="https://drive.google.com">Google Drive</a>の「図形描画」や「プレゼンテーション」がオススメです。きっちりUML準拠の図を作成するわけではないので、クラス図(もどき)ならこれで十分ですし、共有も簡単です。シーケンス図はちょっと書きづらいかもしれませんが、そんな時はノートやホワイトボードに書いたものを写真に撮って適当な場所で共有すればOKでしょう。</p>

<p>ところで、オブジェクト指向の場合ではなく、（純粋）関数型の場合はどうなのでしょうかね。数式？</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EventStatsをConnpassに対応させました]]></title>
    <link href="http://blog.restartr.com/2012/12/22/eventstats-support-connpass/"/>
    <updated>2012-12-22T22:54:54+09:00</updated>
    <id>http://blog.restartr.com/2012/12/22/eventstats-support-connpass</id>
    <content type="html"><![CDATA[<p>ふと思い立って、イベントの登録者数の推移が見れるEventStatsをConnpassにも対応させました。</p>

<ul>
  <li><a href="http://eventstats.restartr.com">EventStats - イベントの統計情報が見れます</a></li>
</ul>

<p><a href="http://connpass.com/about/api/">ConnpassのAPI</a>はイベントの参加者リストまでは取得できませんが、イベント検索はほぼatnd準拠。なので追加したコード量はわずかでした。</p>

<p>作った当初は何かいろいろやってたくさんの人に使ってもらえるWebサービスにしたかったれけど、結局は参加者数の推移を見る以外に何の取り柄もないままです。</p>

<h5 id="section">余談</h5>

<p>このWebサービス、クローラーはPython、WebサイトはScalaで書いていて、一年近く前に書いたコードなのでちょっとだけ時間かかりました。仕事で使っているpythonに比べて、シンタックスを見るのも数ヶ月ぶりなScalaは何をやっているか思い出すのにもひと苦労です。もっとScalaにも取り組みたいのですが…</p>

]]></content>
  </entry>
  
</feed>
