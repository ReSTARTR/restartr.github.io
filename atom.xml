<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[I Will Survive]]></title>
  <link href="http://blog.restartr.com/atom.xml" rel="self"/>
  <link href="http://blog.restartr.com/"/>
  <updated>2014-06-29T22:50:26+09:00</updated>
  <id>http://blog.restartr.com/</id>
  <author>
    <name><![CDATA[ReSTARTR]]></name>
    <email><![CDATA[yoshida.masaki+restartr@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker謹製ライブラリのlibchanについて調べてみた]]></title>
    <link href="http://blog.restartr.com/2014/06/28/about-docker-libchan/"/>
    <updated>2014-06-28T14:44:23+09:00</updated>
    <id>http://blog.restartr.com/2014/06/28/about-docker-libchan</id>
    <content type="html"><![CDATA[<p>DockerCon2014で発表された<a href="https://github.com/docker/libchan">libchan</a>について調べたことをまとめてみます。</p>

<p>libchanは<a href="https://github.com/docker/libcontainer">libcontainer</a>や<a href="https://github.com/docker/libswarm">libswarm</a>と共に発表されました。
libswarmはDockerを中心にしたエコシステムにおけるベンダーロックインを回避するためのソリューションであり、libcontainerは<a href="http://d.hatena.ne.jp/mainyaa/20140311/p1">Docker 0.9リリースドキュメント日本語訳: Execution driversとlibcontainer導入 - Happy New World</a>を参照するのがよいでしょう。</p>

<p>では、libchanとは何なのでしょうか。</p>

<p>READMEには<code>like Go channels over the network</code>とあります。ネットワーク上のgo channel?よくかりませんね。。。</p>

<p>README.mdとPROTOCOL.md、いくつかのテストコードをもとに簡単な実装をしてみた結果をまとめます。</p>

<h3 id="libchan">libchanとはなにか</h3>

<ul>
  <li><a href="https://github.com/docker/libchan/README.md">README</a></li>
</ul>

<p>libchanは超軽量なネットワークライブラリであり、多様な通信プロトコルの土台となるものです。
同一プロセス内でも、同一ホストの別プロセス間でも、ネットワークを超えた別ホストの別プロセス間でも双方向通信可能にするための基礎的なAPIを提供しています。
モダンなmicro-serviesなどRPCやRESTプロトコルにはフィットしない領域で、libchanを使うことが想定されています。</p>

<p>利用例はいまのところlibswarmのみです。というかlibswarmから抽出された汎用的な通信ライブラリだと思います。
APIが安定してくると他のフレームワーク等への導入などもあるかもしれません。</p>

<p>では、具体的にどうやって双方向通信を可能にしてるのでしょう。</p>

<h3 id="libchan-1">libchanのプロトコル</h3>

<ul>
  <li><a href="https://github.com/docker/libchan/PROTOCOL.md">PROTOCOL</a></li>
</ul>

<p>libchanは以下のコンポーネントで構成されています。</p>

<ul>
  <li>channel</li>
  <li>session</li>
  <li>message</li>
  <li>byte stream</li>
  <li>nesting</li>
</ul>

<p>channelとは、並行プログラム間の双方向通信用オブジェクトです。goのchannelに似てるけどそのものではありません。Sender/Receiverがそれぞれ1方向ずつの経路を持つため、ソケットというよりパイプの概念に近いです。</p>

<p>この２つの通信経路がsessionとなり、その間を流れるのがbyte stream。
で、byte streamにはmessageが乗っかり、messageにはchannelを含めることができるという概念です。</p>

<h3 id="libchan-2">libchanのメッセージ</h3>

<p>メッセージはlibchan.Message。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">libchan</span><span class="p">.</span><span class="nx">Message</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">Data</span> <span class="p">[]</span><span class="kt">byte</span> <span class="c1">// メッセージの内容</span>
</span><span class="line">  <span class="nx">Fd</span> <span class="o">*</span><span class="nx">os</span><span class="p">.</span><span class="nx">File</span>
</span><span class="line">  <span class="nx">Ret</span> <span class="nx">Sender</span>  <span class="c1">// 受信者が返答するためのchannel</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>このメッセージ型を、各種通信方式に対応したSender/Receiver経由でやりとりすることになります。</p>

<h3 id="section">メッセージの構造化</h3>

<p>メッセージは以下のようにして生成します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">message</span> <span class="o">:=</span> <span class="nx">libchan</span><span class="p">.</span><span class="nx">Message</span><span class="p">{</span><span class="nx">Data</span><span class="p">:</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;Hello, libchan&quot;</span><span class="p">),</span> <span class="nx">Ret</span><span class="p">:</span> <span class="nx">libchan</span><span class="p">.</span><span class="nx">RetPipe</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>で、ただのテキストではなく構造化されたデータも送れます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">import</span> <span class="s">&quot;github.com/docker/libchan/data&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nx">d</span> <span class="o">:=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Empty</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;foo&quot;</span><span class="p">,</span> <span class="s">&quot;bar&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nx">d</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="s">&quot;foo&quot;</span><span class="p">)</span> <span class="c1">// &quot;bar&quot;</span>
</span><span class="line"><span class="nx">d</span><span class="p">.</span><span class="nx">Pretty</span><span class="p">()</span> <span class="c1">// foo=bar</span>
</span><span class="line"><span class="nx">message</span> <span class="o">:=</span> <span class="nx">libchan</span><span class="p">.</span><span class="nx">Message</span><span class="p">{</span><span class="nx">Data</span><span class="p">:</span> <span class="nx">d</span><span class="p">,</span> <span class="nx">Ret</span><span class="p">:</span> <span class="nx">libchan</span><span class="p">.</span><span class="nx">RetPipe</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ちなみに、各メソッド(Add,Set,Get,Del)はMessageのポインタをかえさないので、変数を上書きするかメソッドチェインにする必要があります。</p>

<h3 id="section-1">メッセージの送受信</h3>

<p>作成したメッセージををSender経由で送ります。（ここでのSender/Receiverは擬似コードです）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">sender</span><span class="p">.</span><span class="nx">Send</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">libchan</span><span class="p">.</span><span class="nx">Message</span><span class="p">{</span><span class="nx">Data</span><span class="p">:</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">msg</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>で、Receiverが受信したメッセージは<code>data.Decode()</code>で<code>map[string][]string</code>に変換できます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">message</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">receiver</span><span class="p">.</span><span class="nx">Receive</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="nx">decoded</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">Data</span><span class="p">))</span>
</span><span class="line"><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%$v\n&quot;</span><span class="p">,</span> <span class="nx">docoded</span><span class="p">)</span> <span class="c1">// map[string][]string{&quot;foo&quot;:[]string{&quot;bar&quot;}}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="senderreceiver">Sender/Receiver</h3>

<p>実際にメッセージを送受信するのは、Send/Receiverメソッドを持つinterfaceを実装したものを使います。
定義はだいたいこんなかんじになっています。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">Sender</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">Send</span><span class="p">(</span><span class="nx">msg</span> <span class="o">*</span><span class="nx">Message</span><span class="p">)</span> <span class="p">(</span><span class="nx">Receiver</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Sender</span><span class="p">)</span> <span class="nx">Send</span><span class="p">(</span><span class="nx">msg</span> <span class="o">*</span><span class="nx">libchan</span><span class="p">.</span><span class="nx">Message</span><span class="p">)</span> <span class="p">(</span><span class="nx">libchan</span><span class="p">.</span><span class="nx">Receiver</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">Receiver</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">Receiver</span><span class="p">(</span><span class="nx">mode</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">Message</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">Receiver</span><span class="p">)</span> <span class="nx">Receive</span><span class="p">(</span><span class="nx">mode</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">libchan</span><span class="p">.</span><span class="nx">Message</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>主要な実装は以下</p>

<ul>
  <li><a href="https://github.com/docker/libchan/blob/master/nop.go">nop</a></li>
  <li><a href="https://github.com/docker/libchan/blob/master/inmem.go">inmem</a></li>
  <li><a href="https://github.com/docker/libchan/blob/master/unix">unix</a></li>
  <li><a href="https://github.com/docker/libchan/blob/master/http2">http2</a></li>
</ul>

<h3 id="inmem-in-memory-go-channel">inmem (In-memory Go channel)</h3>

<p><a href="https://github.com/docker/libchan/blob/master/inmem_test.go">inmem_test.go</a>を参考に実装してみます。</p>

<p>まずは<code>libchan.Pipe()</code>を使って、receiver/senderを取得します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">receiver</span><span class="p">,</span> <span class="nx">sender</span> <span class="o">:=</span> <span class="nx">libchan</span><span class="p">.</span><span class="nx">Pipe</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>送信側はgorutine内でsender経由でメッセージを送信して、送信側から受信したメッセージに対してさらに返信します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">recv</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">sender</span><span class="p">.</span><span class="nx">Send</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">libchan</span><span class="p">.</span><span class="nx">Message</span><span class="p">{</span>
</span><span class="line">    <span class="nx">Data</span><span class="p">:</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">),</span>
</span><span class="line">    <span class="nx">Ret</span><span class="p">:</span> <span class="nx">libchan</span><span class="p">.</span><span class="nx">RetPipe</span><span class="p">,</span>
</span><span class="line">  <span class="p">)</span>
</span><span class="line">  <span class="nx">msg</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">recv</span><span class="p">.</span><span class="nx">Receive</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">// mode=0で自動Close()</span>
</span><span class="line">  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">Data</span><span class="p">))</span> <span class="c1">// &quot;World&quot;</span>
</span><span class="line"><span class="p">}()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>受信側はreceiver経由でメッセージ受信して、それに対して返信します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">msg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">receiver</span><span class="p">.</span><span class="nx">Receive</span><span class="p">(</span><span class="nx">libchan</span><span class="p">.</span><span class="nx">Ret</span><span class="p">)</span>
</span><span class="line"><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">Data</span><span class="p">))</span> <span class="c1">// &quot;Hello&quot;</span>
</span><span class="line"><span class="c1">// msg.Retが返信用のchannelとなっている</span>
</span><span class="line"><span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">Ret</span><span class="p">.</span><span class="nx">Send</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">libchan</span><span class="p">.</span><span class="nx">Message</span><span class="p">{</span><span class="nx">Data</span><span class="p">:</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;World&quot;</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="unixhttp2">unix/http2の実装</h3>

<p>それぞれにテストコードがあるので覗いてみるとだいたいのイメージがつかめます。</p>

<ul>
  <li><a href="https://github.com/docker/libchan/blob/master/unix/unix_test.go">unix/unix_test.go</a></li>
  <li><a href="https://github.com/docker/libchan/blob/master/http2/listener_test.go">http2/listener_test.go</a></li>
</ul>

<h2 id="section-2">まとめ</h2>

<p>libchanにおけるchannelとgoのchannel、名前は同じでも別モノです。
今のところこれといった用途が思いつかないですが、libswarmから派生したものとすると多様なプロトコルの差異を吸収するためのアダプター実装を手助けしてくれるレイヤーと考えるのがよさそうです。</p>

<p>というか、DockerConでちょくちょく言及されていた「マイクロサービス」という概念のほうが興味あります。</p>

<h2 id="section-3">追記</h2>

<blockquote class="twitter-tweet" lang="ja"><p>そういえば書き忘れてたけど、アプリケーションが成長する過程においてlibchanの統一的なインターフェースによって比較的容易にスケールできるんだよ、ってことをDockerConのキーノートでいってたような。。。あとでみかえそう。</p>&mdash; Masaki YOSHIDA (@ReSTARTR) <a href="https://twitter.com/ReSTARTR/statuses/482775493511376896">2014, 6月 28</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>ということに気づき、再度キーノートを見返してました。libchanについては以下動画の30:45あたりからどうぞ。</p>

<iframe width="640" height="360" src="//www.youtube.com/embed/_DOXBVrlW78" frameborder="0" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerを使って任意のrubyバージョンのrpmを作成する]]></title>
    <link href="http://blog.restartr.com/2014/05/11/build-rpm-on-docker-container/"/>
    <updated>2014-05-11T00:00:00+09:00</updated>
    <id>http://blog.restartr.com/2014/05/11/build-rpm-on-docker-container</id>
    <content type="html"><![CDATA[<p>CentOSを使ってて不便なのがruby2系のインストール。</p>

<p>rbenvやruby-buildを使うかソースからインストールするのですが、この場合、環境を構築するたびにビルドすることになり時間もかかるし大変面倒です。</p>

<p>なのでDockerを使ってクリーンな環境でRubyの最新rpmをビルドしてみました。</p>

<p>Dockerを使えばビルド環境がすぐに立ち上げられるので、rpmビルドに必要なパッケージを確認したりするのに最適です。</p>

<p>今回のソースはgithubにpushしてあります。</p>

<ul>
  <li><a href="https://github.com/ReSTARTR/ruby-rpmbuild-container">ReSTARTR/ruby-rpmbuild-container</a></li>
</ul>

<h2 id="section">環境</h2>

<ul>
  <li>ゲストOS：Vagrantで起動したUbuntu-14.04</li>
  <li>コンテナ：centos:6.4</li>
</ul>

<h2 id="section-1">ファイルの配置</h2>

<p>以下ファイルを同一ディレクトリに入れておきます。</p>

<ul>
  <li>Vagrantfile</li>
  <li>provision.sh</li>
  <li>Dockerfile</li>
  <li>rubybuild.sh</li>
  <li>ruby-2.0.0-p481.spec</li>
</ul>

<h2 id="section-2">手順</h2>

<ol>
  <li>ゲストOSの起動(Vagrant)</li>
  <li>ゲストOSにsshログイン</li>
  <li>Dockerコンテナのビルド</li>
  <li>Dockerコンテナ内でrpmビルド</li>
</ol>

<h2 id="os">1. ゲストOSの起動</h2>

<p>Vagrantfile</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># -*- mode: ruby -*-</span>
</span><span class="line"><span class="c1"># vi: set ft=ruby :</span>
</span><span class="line"><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class="line">
</span><span class="line"><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;ubuntu/trusty64&quot;</span>
</span><span class="line">
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;/vagrant&quot;</span>
</span><span class="line">
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">path</span><span class="p">:</span> <span class="s1">&#39;provision.sh&#39;</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># お好みで</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:virtualbox</span> <span class="k">do</span> <span class="o">|</span><span class="n">vb</span><span class="o">|</span>
</span><span class="line">    <span class="n">vb</span><span class="o">.</span><span class="n">customize</span> <span class="o">[</span><span class="s2">&quot;modifyvm&quot;</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;--memory&quot;</span><span class="p">,</span> <span class="s2">&quot;2048&quot;</span><span class="p">,</span> <span class="s2">&quot;--cpus&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="s2">&quot;--ioapic&quot;</span><span class="p">,</span> <span class="s2">&quot;on&quot;</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>provision.sh</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo apt-get update
</span><span class="line">sudo apt-get install -y language-pack-ja
</span><span class="line">
</span><span class="line"><span class="c"># Docker</span>
</span><span class="line">sudo apt-get install -y docker.io
</span><span class="line">sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="osssh">2. ゲストOSにsshログイン</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>vagrant up
</span><span class="line"><span class="nv">$ </span>vagrant ssh
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> /vagrant
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="docker">3. Dockerコンテナのビルド</h2>

<p>ビルド用specファイルを用意して、シェルスクリプトでビルドします。</p>

<p>すると、コンテナにマウントしたボリュームにビルド済みのrpmファイルがコピーされます。</p>

<h3 id="spec">ビルド用specシェルスクリプト</h3>

<p>環境変数RUBY_VERSIONに”2.0.0-p481”や”2.0.0-p451”を設定すれば任意のバージョンをビルドします。</p>

<p><em>※デフォルトの2.0.0-p481以外はそれ用のspecファイルが必要になります。</em></p>

<p>rubybuild.sh</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/env bash</span>
</span><span class="line"><span class="nv">WORKDIR</span><span class="o">=</span>/opt/rpmbuild
</span><span class="line">
</span><span class="line"><span class="nv">RUBY_VER</span><span class="o">=</span><span class="k">${</span><span class="nv">RUBY_VER</span><span class="k">:-</span><span class="s2">&quot;2.0.0-p481&quot;</span><span class="k">}</span>
</span><span class="line"><span class="nv">RUBY_MAJOUR_VER</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$RUBY_VER</span>|cut -d<span class="s2">&quot;-&quot;</span> -f1<span class="k">)</span>
</span><span class="line"><span class="nv">RUBY_MINOR_VER</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$RUBY_VER</span>|cut -d<span class="s2">&quot;-&quot;</span> -f2<span class="k">)</span>
</span><span class="line"><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$RUBY_MINOR_VER&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class="line"><span class="k">  </span><span class="nv">RUBY_TARBALL</span><span class="o">=</span><span class="s2">&quot;ruby-$RUBY_MAJOUR_VER.tar.gz&quot;</span>
</span><span class="line"><span class="k">else</span>
</span><span class="line"><span class="k">  </span><span class="nv">RUBY_TARBALL</span><span class="o">=</span><span class="s2">&quot;ruby-$RUBY_MAJOUR_VER-$RUBY_MINOR_VER.tar.gz&quot;</span>
</span><span class="line"><span class="k">fi</span>
</span><span class="line"><span class="nv">RUBY_REMOTE_FILE</span><span class="o">=</span><span class="s2">&quot;http://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOUR_VER:0:3}/$RUBY_TARBALL&quot;</span>
</span><span class="line">
</span><span class="line">mkdir -p <span class="nv">$WORKDIR</span>/rpm/<span class="o">{</span>BUILD,SRPMS,SPECS,SOURCES,RPMS<span class="o">}</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;%_topdir $WORKDIR/rpm&quot;</span> &gt; <span class="nv">$WORKDIR</span>/.rpmmacros
</span><span class="line"><span class="k">if</span> <span class="o">[</span> ! -f <span class="nv">$WORKDIR</span>/rpm/SOURCES/<span class="nv">$RUBY_TARBALL</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class="line"><span class="k">  </span>wget <span class="nv">$RUBY_REMOTE_FILE</span> -O <span class="nv">$WORKDIR</span>/rpm/SOURCES/<span class="nv">$RUBY_TARBALL</span>
</span><span class="line"><span class="k">fi</span>
</span><span class="line">cp <span class="nv">$WORKDIR</span>/ruby-<span class="k">${</span><span class="nv">RUBY_VER</span><span class="k">}</span>.spec <span class="nv">$WORKDIR</span>/rpm/SPECS/ruby.spec
</span><span class="line">rpmbuild -bb <span class="nv">$WORKDIR</span>/rpm/SPECS/ruby.spec
</span><span class="line">
</span><span class="line">cp <span class="nv">$WORKDIR</span>/rpm/RPMS/x86_64/* /shared/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="dockerrpm">4. Dockerコンテナ内でrpmビルド</h2>

<p>Dockerfile</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">FROM centos:6.4
</span><span class="line">
</span><span class="line"><span class="c"># setup</span>
</span><span class="line">RUN yum update -y
</span><span class="line">RUN yum install -y rpm-build gcc
</span><span class="line">
</span><span class="line"><span class="c"># epel</span>
</span><span class="line">RUN rpm --import http://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-6
</span><span class="line">RUN rpm -ihv http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
</span><span class="line">
</span><span class="line"><span class="c"># ruby-depends</span>
</span><span class="line">RUN yum install —enablerepo<span class="o">=</span>epel -y libyaml-devel
</span><span class="line">RUN yum install -y byacc readline-devel ncourses-devel tcl-devel openssl-devel gdbm-devel db4-devel
</span><span class="line">
</span><span class="line"><span class="c"># build rpm</span>
</span><span class="line">WORKDIR /opt/rpmbuild
</span><span class="line">ADD rubybuild.sh /opt/rpmbuild/rubybuild.sh
</span><span class="line">ADD ruby-2.0.0-p481.spec /opt/rpmbuild/ruby-2.0.0-p481.spec
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="rpm">コンテナ起動してrpmをビルド</h2>

<p>コンテナを起動する際に、カレントディレクトリをマウントしておきます。</p>

<p><em>※<code>--rm</code>オプションでrpm作成完了したらコンテナは破棄します</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo docker build -t &lt;USERNAME&gt;/rpmbuild .
</span><span class="line"><span class="nv">$ </span>sudo docker run --rm -v <span class="nv">$PWD</span>:/shared:rw -it &lt;CONTAINER_ID&gt; /bin/sh ./rubybuild.sh
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>成功すれば、ゲストOSのカレントディレクトリにrpmができてます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>ls *.rpm
</span><span class="line">ruby-2.0.0p481-2.el6.x86_64.rpm
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>これで、rpmコマンド一発で最新のrubyをインストールできます。</p>

<p>rubyインストール済みコンテナを作るなら、Dockerfileに以下のように書けばruby実行環境のできあがりです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">FROM centos:6.4
</span><span class="line">
</span><span class="line"><span class="c"># EPEL</span>
</span><span class="line">RUN rpm --import http://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-6
</span><span class="line">RUN rpm -ihv http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
</span><span class="line">
</span><span class="line"><span class="c"># Install ruby rpm</span>
</span><span class="line">ADD ruby-2.0.0p481-2.el6.x86_64.rpm ruby-2.0.0p481-2.el6.x86_64.rpm
</span><span class="line">RUN yum install -y --enablerepo<span class="o">=</span>epel libyaml-devel
</span><span class="line">RUN rpm -ihv ruby-2.0.0p481-2.el6.x86_64.rpm
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技術系podcastまとめ]]></title>
    <link href="http://blog.restartr.com/2014/04/22/tech-podcast-list/"/>
    <updated>2014-04-22T23:58:29+09:00</updated>
    <id>http://blog.restartr.com/2014/04/22/tech-podcast-list</id>
    <content type="html"><![CDATA[<h3 id="rebuild-podcast">Rebuild Podcast</h3>

<blockquote>
Rebuild はソフトウェア開発、テクノロジー、ガジェットなどの話題を中心に、ゲストと話すギーク、デベロッパー向けのポッドキャスト番組です。
</blockquote>

<ul>
  <li>Hosted by <a href="http://twitter.com/miyagawa">@miyagawa</a></li>
  <li><a href="http://rebuild.fm/">http://rebuild.fm/</a></li>
  <li><a href="http://feeds.rebuild.fm/rebuildfm">RSS</a></li>
  <li><a href="https://itunes.apple.com/jp/podcast/rebuild/id603013428?mt=2">iTunes</a></li>
</ul>

<h3 id="mosaicfm">mosaic.fm</h3>

<blockquote>
次世代 Web Podcast Mozaic
</blockquote>

<ul>
  <li>Hosted by <a href="https://twitter.com/jxck_">@Jxck_</a></li>
  <li><a href="http://mozaic.fm/">http://mozaic.fm/</a></li>
  <li><a href="http://feeds.feedburner.com/mozaicfm">RSS</a></li>
</ul>

<h3 id="section">だんごゆっけの平和な話</h3>

<blockquote>
仲良し三十路男二人。Web業界にいるプランナーとエンジニア。それぞれの日常を平和にまとめあげていきます
</blockquote>

<ul>
  <li>Hosted by <a href="https://twitter.com/kamadango">@kamadango</a>, <a href="https://twitter.com/yusukebe">@yusukebe</a></li>
  <li><a href="http://dandy.fm/">http://dandy.fm/</a></li>
  <li><a href="http://feed.dandy.fm/dandyfm">RSS</a></li>
  <li><a href="https://itunes.apple.com/jp/podcast/id806076544?mt=2">iTunes</a></li>
</ul>

<h3 id="section-1">職質テックトーク</h3>

<ul>
  <li>Hosted by <a href="https://twitter.com/moznion/">@moznion</a></li>
  <li><a href="http://shock-sheets-tech.tumblr.com/">http://shock-sheets-tech.tumblr.com/</a></li>
  <li><a href="http://shock-sheets-tech.tumblr.com/rss">RSS</a></li>
</ul>

<h3 id="backspacefm">backspace.fm</h3>

<blockquote>
一週間分のテック・ガジェットニュースを配信するポッドキャスト
</blockquote>

<ul>
  <li><a href="http://backspace.fm/">http://backspace.fm/</a></li>
  <li><a href="http://feeds.backspace.fm/backspacefm">RSS</a></li>
  <li><a href="https://itunes.apple.com/jp/podcast/backspace.fm/id830709730">iTunes</a></li>
  <li>Hosted by <a href="https://twitter.com/drikin">@drikin</a></li>
</ul>

<h3 id="code-lunch">CODE LUNCH</h3>

<ul>
  <li><a href="http://codelunch.fm/">http://codelunch.fm/</a></li>
  <li><a href="http://codelunch.fm/rss.xml">RSS</a></li>
  <li>Hosted by <a href="https://twitter.com/h13i32maru">@h13i32maru</a>, <a href="https://twitter.com/iizukak">@iizukak</a></li>
</ul>

<h3 id="podcast">ジュンク堂書店Podcast</h3>

<blockquote>
ジュンク堂書店の店頭で行われているトークセッションやイベントなどを配信するポッドキャスト（ベータ版）です。
</blockquote>

<ul>
  <li><a href="http://junkudo.seesaa.net/index20.rdf">RSS</a></li>
  <li><a href="https://itunes.apple.com/jp/podcast/junku-tang-shu-dianpodcast/id398125301">iTunes</a></li>
</ul>

<h2 id="section-2">海外</h2>

<p>海外では<a href="http://5by5.tv/">5by5</a>がポータルっぽい。</p>

<h3 id="ruby-on-rails-podcast">Ruby on Rails Podcast</h3>

<ul>
  <li><a href="http://5by5.tv/rubyonrails/147">http://5by5.tv/rubyonrails/147</a></li>
  <li><a href="http://feeds.5by5.tv/rubyonrails">RSS</a></li>
  <li><a href="https://itunes.apple.com/us/podcast/ruby-on-rails-podcast/id840890158?mt=2&amp;uo=8&amp;at=11laDR">iTunes</a></li>
  <li>Hosted by <a href="http://twitter.com/barelyknown">@barelyknown</a></li>
</ul>

<h3 id="the-changelog">The Changelog</h3>

<blockquote>
The Changelog covers the intersection of software development and open source. Open source moves fast. Keep up!
</blockquote>

<ul>
  <li><a href="http://5by5.tv/changelog/">http://5by5.tv/changelog/</a></li>
  <li><a href="http://feeds.5by5.tv/changelog">RSS</a></li>
  <li><a href="https://itunes.apple.com/us/podcast/the-changelog/id341623264?uo=8&amp;at=11laDR">iTunes</a></li>
</ul>

<h3 id="aws-podcast---listen-and-lean-about-aws">AWS Podcast - Listen and Lean About AWS</h3>

<ul>
  <li><a href="http://aws.amazon.com/jp/apac/awspodcast/">http://aws.amazon.com/jp/apac/awspodcast/</a></li>
  <li><a href="http://d1i0y6b5oi739x.cloudfront.net/feed.xml">RSS</a></li>
  <li><a href="http://itunes.apple.com/sg/podcast/aws-podcast/id526624928">iTunes</a></li>
</ul>

<h3 id="in-beta">In Beta</h3>

<blockquote>
In Beta is a talk show about tech culture, making open source software, and how mobile, social, and web apps are changing the world.
</blockquote>

<ul>
  <li><a href="http://feeds.5by5.tv/inbeta">http://feeds.5by5.tv/inbeta</a></li>
  <li><a href="http://feeds.5by5.tv/inbeta">RSS</a></li>
</ul>

<h3 id="floss">FLOSS</h3>

<blockquote>
We&#8217;re not talking dentistry here; FLOSS all about Free Libre Open Source Software.
</blockquote>

<ul>
  <li><a href="http://twit.tv/floss">http://twit.tv/floss</a></li>
  <li><a href="http://feeds.twit.tv/floss.xml">RSS</a></li>
</ul>

<h3 id="tuxradar">TuxRadar</h3>

<blockquote>
a new TuxRadar podcast all about Linux and free software will be posted here every three weeks for free download
</blockquote>

<ul>
  <li><a href="http://www.tuxradar.com/podcast">http://www.tuxradar.com/podcast</a></li>
  <li><a href="http://www.tuxradar.com/rss">RSS</a></li>
</ul>

<h3 id="the-news">The News</h3>

<blockquote>
A daily update on the latest in tech, Apple, gaming, web, and geek culture. It&#8217;s the only news that matters.
</blockquote>

<ul>
  <li><a href="http://5by5.tv/news">http://5by5.tv/news</a></li>
  <li><a href="http://feeds.5by5.tv/news">RSS</a></li>
  <li><a href="https://itunes.apple.com/us/podcast/the-news/id602266713?mt=2&amp;uo=8&amp;at=11laDR">iTunes</a></li>
  <li>Hosted by <a href="http://twitter.com/imyke">@imyke</a></li>
</ul>

<h3 id="sourcetrunk">Sourcetrunk</h3>

<p>デスクトップアプリ紹介中心</p>

<ul>
  <li><a href="http://www.sourcetrunk.com/">http://www.sourcetrunk.com/</a></li>
  <li><a href="http://feeds.feedburner.com/sourcetrunk">RSS</a></li>
  <li><a href="http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=193827468">iTunes</a></li>
</ul>

<h3 id="sofrware-engineering-radio">Sofrware Engineering Radio</h3>

<ul>
  <li><a href="http://www.se-radio.net/">http://www.se-radio.net/</a></li>
  <li><a href="http://www.se-radio.net/">RSS</a></li>
</ul>

<h3 id="the-engineering-commons-podcast">The Engineering Commons Podcast</h3>

<blockquote>
Practical insights for the engineering crowd
</blockquote>

<ul>
  <li><a href="http://theengineeringcommons.com/">http://theengineeringcommons.com/</a></li>
  <li><a href="http://feeds.feedburner.com/TheEngineeringCommonsPodcast">RSS</a></li>
</ul>

<h2 id="section-3">参考リンク</h2>

<ul>
  <li><a href="http://weblog.bulknews.net/post/58665793844/tech-podcast-5">オススメ Tech Podcast 5選 - Tatsuhiko Miyagawa’s blog</a></li>
  <li><a href="http://www.infoq.com/jp/news/2011/09/archcasts">ソフトウェアアーキテクチャ関連ポッドキャストの薦め</a></li>
  <li><a href="http://overflow-memo.blogspot.jp/2014/01/podcast.html">_overflow: 技術系Podcast・動画ニュースメモ</a></li>
  <li><a href="http://tunein.com/radio/Technology-g2738/">テクノロジーラジオ - Listen Online</a></li>
  <li><a href="http://blackshadow.seesaa.net/article/144207109.html">幻影随想: 科学なポッドキャストをまとめて紹介してみる</a></li>
  <li><a href="https://player.fm/featured/open-source">Best Open Source Podcasts (April, 2014)</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goでmemcachedのstatsを取得する]]></title>
    <link href="http://blog.restartr.com/2014/04/21/golang-memcache-stats-client/"/>
    <updated>2014-04-21T00:17:33+09:00</updated>
    <id>http://blog.restartr.com/2014/04/21/golang-memcache-stats-client</id>
    <content type="html"><![CDATA[<p>YouTubeで使われている<a href="https://github.com/youtube/vitess">vitess</a>の実装をざっと見てたところ、memcachedクライアント実装が簡潔でわかりやすかったので出来る限りラフに実装を写経してみました。</p>

<p>やってることはコマンドラインからアドレスを受け取って、memcachedのstatsを表示するだけです。</p>

<h3 id="section">この写経で学べること</h3>

<ul>
  <li>flagパッケージを使ったコマンドライン引数の取得</li>
  <li>netパッケージを使ったネットワーク接続</li>
  <li>bufioパッケージを使ったストリームの読み出し</li>
</ul>

<h3 id="main">main()</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">// 引数読み出し</span>
</span><span class="line">	<span class="nx">address</span> <span class="o">:=</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">String</span><span class="p">(</span><span class="s">&quot;address&quot;</span><span class="p">,</span> <span class="s">&quot;localhost:11211&quot;</span><span class="p">,</span> <span class="s">&quot;server address&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="nx">flag</span><span class="p">.</span><span class="nx">Parse</span><span class="p">()</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;server: %s\n&quot;</span><span class="p">,</span> <span class="o">*</span><span class="nx">address</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// サーバーに接続</span>
</span><span class="line">	<span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">GetConn</span><span class="p">(</span><span class="o">*</span><span class="nx">address</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%#v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">		<span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">defer</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">conn</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// stats読み出し</span>
</span><span class="line">	<span class="nx">result</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">Stats</span><span class="p">()</span>
</span><span class="line">	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">実行結果</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>go run ./memcache_stats.go --address<span class="o">=</span>localhost:11211
</span><span class="line">server: localhost:11211
</span><span class="line">STAT pid 23282
</span><span class="line">STAT uptime 12425
</span><span class="line">STAT <span class="nb">time </span>1398007875
</span><span class="line">STAT version 1.4.4
</span><span class="line">STAT pointer_size 64
</span><span class="line">STAT rusage_user 0.335948
</span><span class="line">STAT rusage_system 0.344947
</span><span class="line">  :
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">実装全体</h3>

<div><script src="https://gist.github.com/11116595.js?file=memcache_stats.go"></script>
<noscript><pre><code>package main                                                                                                                                                                          [32/1268]

// 写経 from: https://github.com/youtube/vitess/blob/master/go/memcache/memcache.go
//  * エラーハンドリングをできるかぎり省略して実装.
//  * statsコマンドだけ実装

import (
        &quot;bufio&quot;
        &quot;flag&quot;
        &quot;fmt&quot;
        &quot;net&quot;
        &quot;os&quot;
        &quot;strings&quot;
)

type Connection struct {
        conn net.Conn
        buffered bufio.ReadWriter
}

func GetConn(address string) (conn *Connection, err error) {
        nc, err := net.Dial(&quot;tcp&quot;, address)
        if err != nil {
                return nil, err
        }
        return &amp;Connection{
                conn: nc,
                buffered: bufio.ReadWriter{
                        Reader: bufio.NewReader(nc),
                        Writer: bufio.NewWriter(nc),
                },
        }, err
}

func (mc *Connection) writestring(s string) {
        _, err := mc.buffered.WriteString(s);
        if err!= nil {
                panic(err)
        }
}

func (mc *Connection) readline() string {
        mc.flush()
        l, _, _ := mc.buffered.ReadLine()
        return string(l)
}

func (mc *Connection) flush() {
        err := mc.buffered.Flush()
        if err != nil {
                panic(err)
        }
}

func (mc *Connection) Stats() (result []byte, err error) {
        mc.writestring(&quot;stats\r\n&quot;)
        mc.flush()
        for {
                l := mc.readline()
                if strings.HasPrefix(l, &quot;END&quot;) {
                        break
                }
                if strings.Contains(l, &quot;ERROR&quot;) {
                        panic(&quot;ERROR&quot;)
                }
                result = append(result, l...)
                result = append(result, &#39;\n&#39;)
        }
        return result, err
}

func main() {
        address := flag.String(&quot;address&quot;, &quot;localhost:11211&quot;, &quot;server address&quot;)
        flag.Parse()
        fmt.Printf(&quot;server: %s\n&quot;, *address)

        conn, err := GetConn(*address)
        if err != nil {
                fmt.Printf(&quot;%#v&quot;, err)
                os.Exit(1)
        }
        defer conn.conn.Close()

        result, _ := conn.Stats()
        fmt.Printf(&quot;%s&quot;, result)
}</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimで特定のファイルタイプだけタブインデントにする方法]]></title>
    <link href="http://blog.restartr.com/2014/04/20/vimrc-noexpandtab-in-golang/"/>
    <updated>2014-04-20T16:15:21+09:00</updated>
    <id>http://blog.restartr.com/2014/04/20/vimrc-noexpandtab-in-golang</id>
    <content type="html"><![CDATA[<p>rubyやpythonなど通常のプログラムを書く場合は、基本的にソフトタブ(2spaces)でインデントされるようにvimを設定しています。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">set</span> <span class="nb">noexpandtab</span>
</span><span class="line"><span class="k">set</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">2</span>
</span><span class="line"><span class="k">set</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>けれど、Goの場合はインデントはハードタブが通例。</p>

<p>なので拡張子が”.go”の場合だけハードタブでインデントするための設定を.vimrcに書いておきます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">if</span> expand<span class="p">(</span><span class="s2">&quot;%:t&quot;</span><span class="p">)</span> <span class="p">=~</span> <span class="s2">&quot;.*\.go&quot;</span>
</span><span class="line">  <span class="k">set</span> <span class="nb">noexpandtab</span>
</span><span class="line">  <span class="k">set</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">4</span>
</span><span class="line">  <span class="k">set</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">4</span>
</span><span class="line"><span class="k">endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>%:t</code>はディレクトリ含まないファイル名。</p>

<p>autocmd使うほうが良いかも。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">au</span> <span class="nb">BufNewFile</span><span class="p">,</span><span class="nb">BufRead</span> *.<span class="k">go</span> <span class="k">set</span> <span class="nb">noexpandtab</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">4</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ちなみに、<code>set expandtab</code>してる状態でタブを入力する場合は<code>Ctrl-v + &lt;tab&gt;</code>でハードタブが入力できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VarnishのVCLを再起動なしに再読み込みする]]></title>
    <link href="http://blog.restartr.com/2014/04/06/reload-varnish-vcl/"/>
    <updated>2014-04-06T15:38:08+09:00</updated>
    <id>http://blog.restartr.com/2014/04/06/reload-varnish-vcl</id>
    <content type="html"><![CDATA[<p>/etc/varnish/default.vclを書き換えた時、</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">/etc/init.d/varnishd restart
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ってやってたけど、reloadできることを今更知った。</p>

<h3 id="vcllist-vcl">vcl.list: 現在の読み込んでるVCLの一覧を見る</h3>

<p>CentOSのyumで入れたvarnishはデフォルトでこんなふうになってる</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>varnishadm -T localhost:6082 vcl.list
</span><span class="line">active        579 boot
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="vclload-vcl">vcl.load: 新規にVCLをロードする</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>varnishadm -T localhost:6082 vcl.load boot-<span class="sb">`</span>date+%Y%m%d%H%M%S<span class="sb">`</span> /etc/varnish/default.vcl
</span><span class="line">VCL compiled.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>この時点では利用可能な状態であって、まだ変更は反映されていない</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>varnishadm -T localhost:6082 vcl.list
</span><span class="line">active        579 boot
</span><span class="line">available       0 boot-20140406153127
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="vcluse-vcl">vcl.use: ロードしたVCLに切り替える</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>varnishadm -T localhost:6082 vcl.use boot-20140406153127
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>何も表示されないけどちゃんと切り替わっている</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>varnishadm -T localhost:6082 vcl.list
</span><span class="line">available     526 boot
</span><span class="line">active         53 boot-20140406153127
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ちなみに、真ん中の数値はactiveの場合は経過秒数で、availableになると数値が減っていく。
でも、0になっても居座り続ける。この数値の変化のルールはよくわかってない。</p>

<p>ということで不要な過去のvclは定期的に消さないとずっと残り続けてしまうので注意。</p>

<h3 id="vcldiscard-vcl">vcl.discard: ロード済みvclの破棄</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>varnishadm -T localhost:6082 vcl.discard boot
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ここでも結果が表示されないけどちゃんと消えている。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>varnishadm -T localhost:6082 vcl.list
</span><span class="line">available       11 boot-20140406155155
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>本当はinitスクリプト化すると便利なんだろうけど、手動でも良いかなと。</p>

<ul>
  <li><a href="http://blog.xcir.net/?p=124">Varnishで再起動無しで設定ファイルを適用する方法(reload) » cat /dev/random &gt; /dev/null &amp;</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordpressからOctopressに移行]]></title>
    <link href="http://blog.restartr.com/2014/04/06/move-from-wordpress-to-octopress/"/>
    <updated>2014-04-06T13:00:00+09:00</updated>
    <id>http://blog.restartr.com/2014/04/06/move-from-wordpress-to-octopress</id>
    <content type="html"><![CDATA[<p>もともとさくらのレンサバ上でWordpressで構築していたブログを<a href="http://octopress.org/">Octopress</a>に移行してGithub Pagesでホスティングするように切り替え。
最初は<a href="http://jekyllrb.com/">Jekyll</a>だけでやろうとしてたけど、ブロクとしての機能を見るとOctopressのほうが良さそうだったので途中で方針転換。</p>

<h4 id="section">手順</h4>

<p>詳細な手順は面倒なので割愛するとして、だいたいこんな感じの流れで移行。</p>

<ol>
  <li>作業用環境にjekyll, jekyll-import, mysql2, sequelをgem install</li>
  <li>さくらのレンサバ上のMySQLのデータをmysqldumpしてscp</li>
  <li>dumpデータを作業用環境のMySQLにリストア</li>
  <li>リストアしたデータから<a href="http://import.jekyllrb.com/docs/wordpress/">jekyll-import</a>を使って記事のmarkdownファイルを吐き出す</li>
  <li>octopressをcloneして、<code>rake install</code></li>
  <li>jekyll-importで吐き出されたファイルをoctopressのsource/_posts以下に移動</li>
  <li><code>rake preview</code>で表示を確認しながら、source/_posts以下のmarkdownファイルをひたすら修正</li>
  <li>テーマを調整&amp;元記事のURLパスと同一になるように<code>_config.yml</code>に設定</li>
  <li>githubにpushしてgithub pagesとして公開</li>
  <li>CNAMEを設定してgithub.ioから元のドメイン(blog.restartr.com)に移行</li>
</ol>

<p>さくらのレンサバ内からしかWordpressのDBに接続できないのと、レンサバ内でrubyを使うのはなんか面倒事が多そうだったので、環境整備済みなvpsで移行作業。</p>

<p><em>※wordpressのエクスポート機能で吐き出したxmlからmigrateする方法もあるけど今回は不採用</em></p>

<h4 id="wordpress">Wordpressの時のドメイン、パスを同一にするための設定</h4>

<p>wordpressでは<code>/year/month/day/title</code>というpermalinkを設定していたのでそれと同一にするための作業。</p>

<ul>
  <li>ドメインはgithub pagesのカスタムドメインとCNAME設定で解決</li>
  <li>パスは<code>_config.yml</code>のpermalinkを<code>/:year/:month/:day/:title</code>にして解決</li>
</ul>

<h4 id="section-1">さくらのレンサバ側の独自ドメイン設定</h4>

<p>これでハマりました。さくらのドメインの設定で”blog.restartr.com”のCNAMEを設定したのに、DNSへの問い合わせ結果が常にAレコードしか帰ってこなくてかなり悩んでた。
結論は、さくらのレンサバの設定画面で独自ドメインとして”blog.restartr.com”を登録していて、そっちの設定が邪魔をしていた。</p>

<p>さくらのレンサバの独自ドメイン設定をはずして、さくらのドメインのCNAME設定を追加したら無事に解決。</p>

<p><em>さくらのレンサバの独自ドメインの解除から、2時間以上反映に時間かかるらしい</em></p>

<h4 id="post">postデータの修正</h4>

<p>jekyll-importを使ってmarkdownを吐き出すところまではすんなりいけたけど、なにより面倒だったのが吐き出したmarkdownを修正する作業。</p>

<ul>
  <li>シンタックスハイライトするために<code>[ccW_python]...[/ccW_python]</code>とか<code>&lt;pre class="brush:pyton"&gt;...&lt;/pre&gt;</code>とか独自タグがある</li>
  <li>amazonのリンク生成用タグ<code>[tmkm-amazon]123456[/tmkm-amazon]</code>というタグがある</li>
  <li><code>&lt;p&gt;</code>タグと<code>&lt;br /&gt;</code>タグの嵐</li>
</ul>

<p>これらの対応のためにいちいち置換するのが非常に大変。<code>[ccW]</code>と<code>[tmkm-amazon]</code>タグは置換できたけど、<code>&lt;pre class="brush:..."&gt;</code>についてはハイライトされないだけで表示上問題なさそうなので無視。
あとはmarkdownにhtmlが混じってるのが気持ち悪いので<code>&lt;p&gt;</code>と<code>&lt;br /&gt;</code>を置換して行間を調整。</p>

<p>ドラフト記事をリモートにpushしてなくて別のPCから記事の途中からかけなくて困った…とならないように基本的にVPS上にcloneすることにした。
これで記事編集のための苦痛を感じる事無く純粋なmarkdownで記事がかけるようになる。</p>

<ul>
  <li>参考にした記事</li>
  <li><a href="http://hadihariri.com/2013/12/24/migrating-from-wordpress-to-jekyll/">Migrating from WordPress.com to Jekyll – Hadi Hariri</a></li>
  <li><a href="http://blog.glidenote.com/blog/2011/12/20/how-to-use-custom-domain-on-github-pages/">GitHub PagesでCustom Domainを利用する - Glide Note - グライドノート</a></li>
  <li>ベースにしたテーマ</li>
  <li><a href="https://github.com/bijumon/oct2">bijumon/oct2</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoとPythonをZeroMQで繋ぐ]]></title>
    <link href="http://blog.restartr.com/2013/04/26/connect-go-and-python-with-zeromq/"/>
    <updated>2013-04-26T23:34:48+09:00</updated>
    <id>http://blog.restartr.com/2013/04/26/connect-go-and-python-with-zeromq</id>
    <content type="html"><![CDATA[<p>最近Rubyでプロジェクトオイラーを解きながらRubyに慣れようとしてるのですが、ちょっと飽きてきたので息抜きにGoを書いたりしています。</p>

<p>ついでにZeroMQも試してみたかったので、GoとPythonをZeroMQで繋いでみました。</p>

<p>構成はこんな感じで、Python(かGo)clientを起動し、Goで動くmonitorq経由でGoのserverにつながります。PUB/SUBでmonitorからモニタリングできるのがミソです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">              <span class="o">+----------------------------------------+</span>
</span><span class="line">              <span class="o">|</span>                                        <span class="o">|</span>
</span><span class="line">  <span class="o">+------+</span>        <span class="o">|--------------------------+</span>     <span class="o">+-----+</span> <span class="o">|</span>
</span><span class="line">  <span class="o">|</span><span class="n">client</span><span class="o">|--------|</span><span class="mi">9001</span>     <span class="n">monitorq</span>     <span class="mi">9002</span><span class="o">|-----|</span><span class="n">serv</span> <span class="o">|</span> <span class="o">|</span>
</span><span class="line">  <span class="o">|</span><span class="p">(</span><span class="no">REQ</span><span class="p">)</span> <span class="o">|</span>        <span class="o">|</span><span class="p">(</span><span class="no">ROUTER</span><span class="p">)</span>   <span class="mi">9003</span>   <span class="p">(</span><span class="no">DEALER</span><span class="p">)</span><span class="o">|</span>     <span class="o">|</span><span class="p">(</span><span class="no">REP</span><span class="p">)</span><span class="o">|</span> <span class="o">|</span>
</span><span class="line">  <span class="o">+------+</span>        <span class="o">|--------------------------+</span>     <span class="o">+-----+</span> <span class="o">|</span>
</span><span class="line">              <span class="o">|</span>          <span class="o">|</span><span class="p">(</span><span class="no">PUB</span><span class="p">)</span>                        <span class="o">|</span>
</span><span class="line">              <span class="o">|</span>          <span class="o">|</span>                             <span class="o">|</span>
</span><span class="line">              <span class="o">|</span>          <span class="o">|</span>                             <span class="o">|</span>
</span><span class="line">              <span class="o">|</span>          <span class="o">|</span><span class="p">(</span><span class="no">SUB</span><span class="p">)</span>                        <span class="o">|</span>
</span><span class="line">              <span class="o">|</span>      <span class="o">+-------+</span>                         <span class="o">|</span>
</span><span class="line">              <span class="o">|</span>      <span class="o">|</span><span class="n">monitor</span><span class="o">|</span>                         <span class="o">|</span>
</span><span class="line">              <span class="o">|</span>      <span class="o">+-------+</span>                         <span class="o">|</span>
</span><span class="line">              <span class="o">+----------------------------------------+</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>※client/server/monitorは複数たちあげるとよしなに振り分けてくれます。</em></p>

<ul>
  <li>monitorqでfan-in/outする</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>go run queue.go monitorq
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>clientから”PING”を投げる(と、”PONG#<pid>&#8220;が帰る)</pid></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>python run queue.py client
</span><span class="line">PONG#&lt;28870&gt;
</span><span class="line">PONG#&lt;28870&gt;
</span><span class="line"> :
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>serverから”PONG”を返す(clientからのPINGを表示)</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>go run queue.go serv
</span><span class="line">Recv: PING#&lt;73835&gt;
</span><span class="line">Recv: PING#&lt;73835&gt;
</span><span class="line"> :
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>monitorでリクエスト総数をモニタリング</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>go run queue.go monitor
</span><span class="line">MONITOR: IN: 2082, OUT 2082
</span><span class="line">MONITOR: IN: 2083, OUT 2083
</span><span class="line"> :
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>コードはgistにあげてます。</p>

<ul>
  <li><a href="https://gist.github.com/ReSTARTR/5467656">gist</a></li>
</ul>

<p>ZeroMQなら他にもいろんな構成がとれるので、使いどころは結構あるのではないかと。</p>

<p>今回、不慣れなGoで書いてみましたが、これくらいであればもわりと素直にかけるなぁという印象です。</p>

<p>Goで書かれたZeroMQのサンプルは以下githubリポジトリにたくさんあるので、覗いてみると色々勉強になります。</p>

<ul>
  <li><a href="https://github.com/imatix/zguide/tree/master/examples/Go">zguide/examples/Go at master ? imatix/zguide</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pythonのクロージャに変数を束縛する方法]]></title>
    <link href="http://blog.restartr.com/2013/04/17/bind-a-variable-to-closure-in-python/"/>
    <updated>2013-04-17T22:19:14+09:00</updated>
    <id>http://blog.restartr.com/2013/04/17/bind-a-variable-to-closure-in-python</id>
    <content type="html"><![CDATA[<p>ハマったので。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line"><span class="n">double</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">*</span><span class="n">a</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c"># 8 (=4*2)</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c"># 20 (=10*3)</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c"># 12 # WTF?</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c"># 30</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>doubleというクロージャ内の変数aを、クロージャ宣言時のaで束縛したいのです。</p>

<p>対応は２つ。</p>

<ol>
  <li>lambdaのデフォルト引数で束縛する</li>
  <li>functools.partialで束縛する</li>
</ol>

<h3 id="lambda">1. lambdaのデフォルト引数で束縛する</h3>

<p>参考：<a href="http://stackoverflow.com/questions/10452770/python-lambdas-binding-to-local-values">closures - Python lambda’s binding to local values - Stack Overflow</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line"><span class="n">double</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">a</span><span class="p">:</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c"># 8 (=4*2)</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c"># 20 (=10*3)</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c"># 12 (=4*2)</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c"># 30 (=10*2)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="functoolspartial">2. functools.partialで束縛する</h3>

<p>やってることは1と同じなのですが、一応動くよねということで。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">partial</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line"><span class="n">double</span> <span class="o">=</span> <span class="n">partial</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="bp">None</span><span class="p">:</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">a</span><span class="p">)</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="c"># 8 (=8*2)</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c"># 30 (=10*2)</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c"># 12 (=4*2)</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c"># 30 (=10*2)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section">そもそも変数上書きしなければ良いんじゃない？</h3>

<p>普段は変数の上書きは基本的にやりません。なので変数の束縛とかあまり意識してませんでした。</p>

<p>今回、プロジェクトオイラーを解くにあたって、素数ジェネレータをつくろうとした結果、ハマったのでした。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">ifilter</span><span class="p">,</span> <span class="n">count</span>
</span><span class="line"><span class="k">def</span> <span class="nf">gen_primes</span><span class="p">():</span>
</span><span class="line">    <span class="n">it</span> <span class="o">=</span> <span class="n">count</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="c"># [2, 3, 4, ...]</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">        <span class="n">v</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class="line">        <span class="k">yield</span> <span class="n">v</span>
</span><span class="line">        <span class="n">it</span> <span class="o">=</span> <span class="n">ifilter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">v</span><span class="p">:</span> <span class="n">x</span> <span class="o">%</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="n">it</span><span class="p">)</span>
</span><span class="line">        <span class="c"># 当初は以下のようにしていた</span>
</span><span class="line">        <span class="c"># これだと次のループ時のifilter内でvの値が変わってしまう</span>
</span><span class="line">        <span class="c"># it = ifilter(lambda x: x % v &gt; 0, it)</span>
</span><span class="line"><span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">gen_primes</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span> <span class="n">v</span>
</span><span class="line">    <span class="k">if</span> <span class="n">v</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">:</span>
</span><span class="line">        <span class="k">break</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="functoolspartial-1">余談1: functools.partialの使いどころ</h3>
<p>ちょくちょく<a href="http://docs.python.jp/2.7/library/functools.html#functools.partial">functools.partial</a>使ってましたが、そんなの使わなくてもlambdaで事足りますね。今更気づきました…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">mul</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
</span><span class="line"><span class="n">mul</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>  <span class="c"># 6</span>
</span><span class="line"><span class="c"># lambda</span>
</span><span class="line"><span class="n">double</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">2</span><span class="p">:</span> <span class="n">mul</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>  <span class="c"># 6</span>
</span><span class="line"><span class="c"># functools.partial</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">functools</span>
</span><span class="line"><span class="n">double</span> <span class="o">=</span> <span class="n">functools</span><span class="o">.</span><span class="n">partial</span><span class="p">(</span><span class="n">mul</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="n">double</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>  <span class="c"># 6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>こうなると、functools.partialの使いどころが難しいですね。
戻り値がpartialオブジェクトなので、あとで引数とかが参照できることくらいでしょうか…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">functools</span><span class="o">.</span><span class="n">partial</span><span class="p">(</span><span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">0</span><span class="p">:</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">functools</span><span class="o">.</span><span class="n">partial</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x1092b2ec0</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">args</span>
</span><span class="line"><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">keywords</span>
</span><span class="line"><span class="p">{</span><span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">func</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">function</span> <span class="o">&lt;</span><span class="k">lambda</span><span class="o">&gt;</span> <span class="n">at</span> <span class="mh">0x1092eab18</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">args</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,)</span>  <span class="c"># 引数を後から上書きはできない</span>
</span><span class="line"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class="line">  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class="line"><span class="ne">TypeError</span><span class="p">:</span> <span class="n">readonly</span> <span class="n">attribute</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pythonのテストにpytestを使ってみた]]></title>
    <link href="http://blog.restartr.com/2013/04/05/my-first-pytest/"/>
    <updated>2013-04-05T21:00:24+09:00</updated>
    <id>http://blog.restartr.com/2013/04/05/my-first-pytest</id>
    <content type="html"><![CDATA[<p>pytestを使い始めました。</p>

<ul>
  <li><a href="http://pytest.org/latest/">pytest: helps you write better programs</a></li>
</ul>

<p>まだまだ機能は把握しきれていませんが、良いと思ったことは3つ。</p>

<ol>
  <li>テストがコケた箇所のコードがレポート内容に表示される</li>
  <li>テスト対象を初期化したものの受け渡し方をスマートにできる</li>
  <li>pytest.vimがなかなか使える</li>
</ol>

<h3 id="section">1.テストがコケた箇所のコードがレポート内容に表示される</h3>

<p>これが巷でよく聞く一番のメリットかとは思いますが、コケたときの情報が全然違います。
pytestはかなり詳細に表示してくれるので、レポートの内容だけでどこをどう直せば良いか把握できます。</p>

<h4 id="unittest-v">unittestの実行結果(-vオプション付き)</h4>

<p><a href="http://www.flickr.com/photos/53244662@N04/8621946368/" title="unittest by ReSTARTR_y, on Flickr"><img src="http://farm9.staticflickr.com/8523/8621946368_d7bc9a450d_z.jpg" width="640" height="220" alt="unittest" /></a></p>

<h4 id="pytest-v">pytestの実行結果(-vオプション付き)</h4>

<p><a href="http://www.flickr.com/photos/53244662@N04/8620844529/" title="pytest by ReSTARTR_y, on Flickr"><img src="http://farm9.staticflickr.com/8244/8620844529_ce66ff7f9c_z.jpg" width="640" height="401" alt="pytest" /></a></p>

<p>文字列比較の場合は差分表示してくれたりするので便利です。</p>

<h3 id="section-1">2. テスト対象を初期化したものの受け渡し方をスマートにできる</h3>

<p>これが結構良い感じだと思いました。</p>

<p>かなり単純なクラスを対象にして例を書きます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Hoge</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">v</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">v</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="pythonunittest">python同梱のunittestで書く</h4>

<p>こんな感じで、self.hogeを使ってテスト対象を受け渡します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">hoge</span> <span class="kn">import</span> <span class="n">Hoge</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">unittest</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestHoge1</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">hoge</span> <span class="o">=</span> <span class="n">Hoge</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">test_type</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">assertIsInstance</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hoge</span><span class="p">,</span> <span class="n">Hoge</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">test_val</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hoge</span><span class="o">.</span><span class="n">val</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">hoge</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="s">&#39;hoge&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hoge</span><span class="o">.</span><span class="n">val</span><span class="p">,</span> <span class="s">&#39;hige&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>pytestで書くとこんな感じになります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">hoge</span> <span class="kn">import</span> <span class="n">Hoge</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pytest</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestHoge1</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">pytest_funcarg__hoge</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="n">Hoge</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">test_type</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">hoge</span><span class="p">):</span>
</span><span class="line">        <span class="k">assert</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">hoge</span><span class="p">,</span> <span class="n">Hoge</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">test_val</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">hoge</span><span class="p">):</span>
</span><span class="line">        <span class="k">assert</span> <span class="n">hoge</span><span class="o">.</span><span class="n">val</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">        <span class="n">hoge</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="s">&#39;hoge&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="k">assert</span> <span class="n">hoge</span><span class="o">.</span><span class="n">val</span> <span class="o">==</span> <span class="s">&#39;hige&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">pytest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>何が良いかっていうと、各テストメソッドで必要な初期化済みHogeインスタンスを、pytest_funcarg__hoge()で作って渡してやることができます。pytest_funcarg__NAMEを定義すれば、各テストメソッドでNAMEとして引数にとることができるわけです。(<a href="http://pytest.org/latest-ja/funcargs.html">テスト関数 (funcargs) にオブジェクトを注入</a>)</p>

<p>unittest.TestCaseのsetUpを使う場合、self.hogeに一旦入れてやらないといけないし、各テストメソッドではself.hogeでアクセスする必要も出てきます。</p>

<p>見た目が簡潔になるのはとても良いことです。</p>

<h3 id="pytestvim">3. pytest.vimがなかなか使える</h3>

<p>vimのプラグインにpytest.vimっていうのがありました。
これもなかなか使い勝手が良いです。</p>

<p>詳しくは下記動画を御覧ください。</p>

<ul>
  <li><a href="http://vimeo.com/19774046"> pytest.vim 0.0.5 on Vimeo </a></li>
</ul>

<p>pytestの概要は以下スライドにて。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/14006990" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/pfctdayelise/funcargs-other-fun-with-pytest" title="Funcargs &amp; other fun with pytest" target="_blank">Funcargs &amp; other fun with pytest</a> </strong> from <strong><a href="http://www.slideshare.net/pfctdayelise" target="_blank">Brianna Laugher</a></strong> </div>
<p>他の機能は触りながらおいおい掴んでいければなと。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kauli株式会社を退職しました]]></title>
    <link href="http://blog.restartr.com/2013/04/02/retirement201303/"/>
    <updated>2013-04-02T22:45:29+09:00</updated>
    <id>http://blog.restartr.com/2013/04/02/retirement201303</id>
    <content type="html"><![CDATA[<p><a href="http://www.flickr.com/photos/53244662@N04/8599680561/" title="Cleanup my keyboard by ReSTARTR_y, on Flickr"><img src="http://farm9.staticflickr.com/8106/8599680561_da30653690.jpg" width="500" height="333" alt="Cleanup my keyboard" /></a></p>

<p><em>※2013/04/04 更新:会社名を公開しました</em></p>

<p>3月末付で<a href="http://kau.li">Kauli株式会社</a>を退職しました。</p>

<p>4月1日だと嘘っぽくなるかなと思い、1日ずらしてのご報告です。</p>

<p>2012年01月入社なので、1年3ヶ月という短い間でしたが、これまでで最も充実した1年だったように思います。</p>

<p>大規模な広告配信という技術的に非常に挑戦しがいのある分野で、非常に技術力の高いエンジニアと共にPythonプログラマーとして充実した日々を過ごさせてもらいました。</p>

<p>「大規模なトラフィックを直に感じながらアプリケーション開発に取り組みたい」という希望を胸に入った会社で、</p>

<ul>
  <li>データストアの検証(結果的にRedisを採用)</li>
  <li>合計数十台自作サーバーの組立(参考：<a href="https://gist.github.com/nekoya/3749146" title="Kauli自作サーバ組み立てマニュアル" target="_blank">Kauli自作サーバ組み立てマニュアル</a>)</li>
  <li>開発部総出でデータセンターでサーバーラッキング</li>
  <li>某社SOAP APIに難儀</li>
  <li>開発のベースをgithubに移行</li>
  <li>nginx + Python(werkzeug+uWSGI) + Redisによる広告配信システムの開発</li>
  <li>アプリケーションのパフォーマンスチューニング</li>
</ul>

<p>等々、これまでにない経験を1年ちょっとという短い期間に経験できました。</p>

<p>正直離れるのが勿体無いとも思うのですが、キャリアの見直しをしたかったとか諸々の理由により、退職することを決意しました。</p>

<p>同僚の方々には大変お世話になりました。どうもありがとうございました。</p>

<p>転職先はまだ決まっていないので、転職活動を進めつつ、じっくり勉強しておきたかったことに１つずつ取り組んでいこうかという感じです。</p>

<p>良い会社があればぜひ<a href="https://twitter.com/restartr">@ReSTARTR</a>にご紹介ください＞＜</p>

<p>…</p>

<p>なお、Kauli株式会社は継続してエンジニアを募集中のようですので、</p>

<p>大規模広告配信システムをPythonで開発したい方々は下記からぜひぜひご応募を。</p>

<ul>
  <li><b><a href="http://kau.li/jp/pages/recruit">Kauli - 採用情報</a></b></li>
</ul>

<p>それでは。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プログラマーにとっての『UMLっぽい何か』]]></title>
    <link href="http://blog.restartr.com/2013/04/01/uml-for-programmer/"/>
    <updated>2013-04-01T20:12:54+09:00</updated>
    <id>http://blog.restartr.com/2013/04/01/uml-for-programmer</id>
    <content type="html"><![CDATA[<p>わりと普遍的な話題だったので便乗です。</p>

<p><a href="http://nekoya.github.com/blog/2013/04/01/useful-uml/"> UMLも捨てたもんじゃない - nekoya press </a></p>

<blockquote>
<ul>
<li>UMLは設計の技法ではない</li>
<li>頭の中を整理するため、あるいは人と共有する際の表現技法である</li>
</ul>
</blockquote>
<p>とか、</p>

<blockquote>UMLの厳密な書式ルールには全くこだわりはなく、大まかなイメージだけ伝われば、細かい部分は口頭でフォローすれば十分だと考えていています。そういう意味ではUMLを正しく使っているとは言えないのかも知れませんが、それはそれでいいんじゃないのと。

</blockquote>

<p>は、まったくもって同意見で、「UML」という”なんだか面倒くさそうなイメージ”を捨てて、コードを整理もしくは伝達する補足的なものとして扱うことが大事だと思います。UMLを本を読んできっちり勉強する必要もなくて、英会話が完璧な文法に則る必要がないのと基本的に同じだと思います。</p>

<p>所謂SEが用いるUMLではなくプログラマーにとってのUMLは、もっとくだけたもので良いのです。</p>

<h4 id="section">いつやるか</h4>
<p>どのフェーズでこの図の作成にとりかかるかが問題になると思いますが、自分の場合は以下の場合に作成を試みることが多いです。</p>

<p>（主にクラス図作成の場合を想定しています。）</p>

<p><strong>1. プロトタイプ的に作り始めたコードが、ある程度育ってきて全体が見えづらいと感じた時</strong></p>

<p>これは自分のために作成するもの。なのでUMLのルールに準拠する必要はありませんので、どちらかといえば書き捨て型といえます。</p>

<p>（※ドキュメントの無いコードを読む場合も書き捨て型で作成します。）</p>

<p>そして、この図をもとに設計を見なおしたりします。</p>

<p><strong>2. 自分が作ったコードを他の誰かが読む時</strong></p>

<p>これは他人のために作成するもの。すでに設計が固まった段階のコードを追いかける上での補足情報になります。</p>

<p>完全にUML準拠する必要はないでしょうが、ある程度は従ったほうが余計な誤解もなくなるかもしれません。1である程度整理ができているのでこの段階での作成は非常にそれ程苦ではないはずです。</p>

<p>どちらの場合もコードありきで、後追いでの図形作成になります。注意すべきなのは、図にすべての情報を詰め込むわけではなく、必要最低限の情報に留めることで図をシンプルに保つことは必要です。</p>

<p>とまぁ、これくらいシンプルなルールであれば、普段の開発フローに取り入れることはさほど大きなコストではないと考えます。多くの人はこれくらいのことはやっているんじゃないかとは思いますが、先のブログでも書かれている通り表立って議論されることはあまりないように感じます。</p>

<h4 id="section-1">図を描くためのツール</h4>
<p>図形作成のためにいちいち<a href="http://astah.change-vision.com/ja/index.html">astah*</a>やExcel()のようなアプリケーションを立ち上げるのは面倒ですよね。</p>

<p><a href="https://drive.google.com">Google Drive</a>の「図形描画」や「プレゼンテーション」がオススメです。きっちりUML準拠の図を作成するわけではないので、クラス図(もどき)ならこれで十分ですし、共有も簡単です。シーケンス図はちょっと書きづらいかもしれませんが、そんな時はノートやホワイトボードに書いたものを写真に撮って適当な場所で共有すればOKでしょう。</p>

<p>ところで、オブジェクト指向の場合ではなく、（純粋）関数型の場合はどうなのでしょうかね。数式？</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EventStatsをConnpassに対応させました]]></title>
    <link href="http://blog.restartr.com/2012/12/22/eventstats-support-connpass/"/>
    <updated>2012-12-22T22:54:54+09:00</updated>
    <id>http://blog.restartr.com/2012/12/22/eventstats-support-connpass</id>
    <content type="html"><![CDATA[<p>ふと思い立って、イベントの登録者数の推移が見れるEventStatsをConnpassにも対応させました。</p>

<ul>
  <li><a href="http://eventstats.restartr.com">EventStats - イベントの統計情報が見れます</a></li>
</ul>

<p><a href="http://connpass.com/about/api/">ConnpassのAPI</a>はイベントの参加者リストまでは取得できませんが、イベント検索はほぼatnd準拠。なので追加したコード量はわずかでした。</p>

<p>作った当初は何かいろいろやってたくさんの人に使ってもらえるWebサービスにしたかったれけど、結局は参加者数の推移を見る以外に何の取り柄もないままです。</p>

<h5 id="section">余談</h5>

<p>このWebサービス、クローラーはPython、WebサイトはScalaで書いていて、一年近く前に書いたコードなのでちょっとだけ時間かかりました。仕事で使っているpythonに比べて、シンタックスを見るのも数ヶ月ぶりなScalaは何をやっているか思い出すのにもひと苦労です。もっとScalaにも取り組みたいのですが…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[はてなダイアリーからTumblrへデータ移行するpythonスクリプト]]></title>
    <link href="http://blog.restartr.com/2012/03/25/python-script-for-moving-from-movabletype-to-tumblr/"/>
    <updated>2012-03-25T02:30:19+09:00</updated>
    <id>http://blog.restartr.com/2012/03/25/python-script-for-moving-from-movabletype-to-tumblr</id>
    <content type="html"><![CDATA[<p>どうも。もうすぐ入社３ヶ月が経って試用期間が終わろうとしている状況な僕です。</p>

<p>すっかり停滞気味のブログですが保守も兼ねて投稿を。</p>

<h3 id="deldeltumblr">はてダから<del>はてブロ</del>Tumblrへ</h3>

<p>とあるブログをはてなダイアリーで書いていたのですが、Tumblrへブログのデータを移行したいという要求が出てきました。ということでpythonで移行スクリプトを書いてみました。</p>

<h3 id="section">ソースコード</h3>

<p>例によってGitHubにて公開しておきます。</p>

<ul>
  <li><a href="https://github.com/ReSTARTR/mt2tumblr">https://github.com/ReSTARTR/mt2tumblr</a></li>
</ul>

<p>python2.6以外はテストしてません( ｰ`дｰ´)ｷﾘｯ</p>

<h3 id="section-1">使い方</h3>

<p>oauth2に依存しているので、実行前にインストールしておいてください。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">pip</span> <span class="n">install</span> <span class="n">oauth2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>使い方はREADMEどおりです。いつもどおりのテキトー英文です。</p>

<ol>
  <li>はてなダイアリーの管理画面から”管理 &gt; インポート/エクスポート”でMovableType形式のファイルをダウンロード</li>
  <li>ダウンロードしたファイルをresourcesディレクトリに配置</li>
  <li>tumblrにアプリケーションを登録( <a href="http://www.tumblr.com/oauth/apps">http://www.tumblr.com/oauth/apps</a> )</li>
  <li>consumer_keyとconsumer_secretを入手</li>
  <li>config.pyを編集する</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">CONSUMER_KEY</span> <span class="o">=</span> <span class="s">&#39;&lt;consumer_key&gt;&#39;</span>
</span><span class="line"><span class="n">CONSUMER_SECRET</span> <span class="o">=</span> <span class="s">&#39;&lt;consumer_secret&gt;&#39;</span>
</span><span class="line"><span class="n">BASE_HOSTNAME</span> <span class="o">=</span> <span class="s">&#39;&lt;your_tumblr_url&gt;&#39;</span> <span class="c"># &#39;&lt;your-id&gt;.tumblr.com&#39;のように&quot;http://&quot;は抜きで。</span>
</span><span class="line"><span class="n">PARSE_FILE_PATH</span> <span class="o">=</span> <span class="s">&#39;path/to/movable_type_data.txt&#39;</span>
</span><span class="line"><span class="n">POST_STATE</span> <span class="o">=</span> <span class="s">&#39;publish&#39;</span> <span class="c"># 動作テストしたいなら&#39;draft&#39;にすると良いです。</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>実行する</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">python run.py
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>まずはファイルの内容を読み込んで、日時、カテゴリ、タイトルが表示されるので問題ないか確認</li>
</ul>

<p>OAuth認証する。</p>

<ul>
  <li>下記のようにURLが表示されるのでブラウザでアクセス。</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="nb">open</span> <span class="ow">in</span> <span class="n">browser</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">tumblr</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">oauth</span><span class="o">/</span><span class="n">authorize</span><span class="err">?</span><span class="n">oauth_token</span><span class="o">=</span><span class="p">{</span><span class="n">OAUTH_TOKEN</span><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">oauth_verifier</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>リダイレクト先のURLに含まれる”oauth_verifier”の値をコピーしてターミナルにペースト。
    <ul>
      <li>リダイレクト先は404になりますが、oauth_verifierが欲しいだけなのでそれで問題なしです。</li>
    </ul>
  </li>
</ul>

<p>これで、Tumblerへのインポートが始まります。</p>

<p>(ﾟдﾟ)ｳﾏｰ</p>

<h3 id="section-2">注意事項</h3>

<ul>
  <li>APIの呼び出し回数の制限に引っかかるかもしれませんがそのへんのエラー制御はできていません。</li>
  <li>MovableType形式のデータをTumblrに移行するスクリプトとしてつくっていますが、実際にははてなダイアリーからMovableType形式でエクスポートしたデータでしかテストしていません。それ以外で動くかは保証できません…</li>
  <li>投稿時間はJSTからGMTに変換してます。不要なら適当に編集してください。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EventStatsはherokuとMongoLabとさくらVPSで動いている]]></title>
    <link href="http://blog.restartr.com/2011/12/28/eventstats-consist-of-heroku-mongolab-and-sakura-vps/"/>
    <updated>2011-12-28T21:27:52+09:00</updated>
    <id>http://blog.restartr.com/2011/12/28/eventstats-consist-of-heroku-mongolab-and-sakura-vps</id>
    <content type="html"><![CDATA[<p>今月頭に<a href="http://blog.restartr.com/2011/12/10/eventststs">ブログ書きました</a>が、EventStatsという勉強会の参加者の推移が見れるサービスを公開しました。</p>

<ul>
  <li><a href="http://eventstats.restartr.com">EventStats - イベントの統計情報が見れます</a></li>
</ul>

<p>まぁ自分が欲しかっただけなんですけど、使ってみて頂ければ幸いです。
今回はそのサービスの構成とかについて書いてみます。</p>

<h3 id="section">アジェンダ</h3>

<ol>
  <li>全体像</li>
  <li>システム構成</li>
  <li>Gitリポジトリ</li>
  <li>MongoDBのPaaS</li>
  <li>各イベント管理サービスAPIの違い</li>
  <li>開発メモ</li>
</ol>

<h3 id="section-1">1.全体像</h3>

<p>開発環境も含めて全体像を図にしてみました。(初Cacooですが超べんりですね！)</p>

<p>赤い線がGit操作で、黒い点線がMongoDBへのアクセスです。</p>

<p><a href="https://cacoo.com/diagrams/Cp2yo6tQNlxCm5av"><img border="1" alt="全体像" src="https://cacoo.com/diagrams/Cp2yo6tQNlxCm5av-2260A.png" /></a></p>

<h3 id="section-2">2.システム構成</h3>

<p>大きく分けてwebとクローラーの２つです。
webはherokuに、クローラーはさくらのVPSに配置。</p>

<p>まずは優先してデータ蓄積を…ということでクローラーをpythonとmongodbで作成しました。
(サービス的にはやいとこデータためないと意味ないので。)</p>

<p>クローラーは５分おきに起動するのでScalaよりPythonを選択しました。起動コスト重視です。
(Scalaでサクサク開発できる程のスキルではないというのもありますが… )</p>

<p>実行場所はherokuのworkerも考えたましたが、最終的に既に利用していたさくらVPSでcronジョブとして運用することに。</p>

<p>ということでScalaのWebはデータ参照のみで、データの更新はしません。</p>

<h3 id="git">3.Gitリポジトリ</h3>

<p>webとクローラーは分けてGitで管理。リモートリポジトリはどちらもさくらのVPS上においています。
ただし、本番リリースは開発PCからherokuに別途pushします。</p>

<p>※webもさくらVPSにリモートリポジトリを持って、本番データを参照するステージング環境として利用しています。</p>

<h4 id="eventstats-web">eventstats-web</h4>

<ul>
  <li>host: <a href="http://www.heroku.com/">heroku</a> (Chedar)</li>
  <li>scala
    <ul>
      <li>フレームワーク: <a href="https://github.com/unfiltered/unfiltered">unfiltered</a> 0.5.1</li>
      <li>mongodb接続: <a href="http://api.mongodb.org/scala/casbah/2.1.5.0/">casbah</a> 2.1.5-1</li>
      <li>テンプレートエンジン: <a href="https://github.com/unfiltered/unfiltered/tree/master/scalate">unfiltered-scalate</a> (ssp)</li>
      <li>テスティングライブラリ: <a href="https://github.com/unfiltered/unfiltered/tree/master/spec">unfiltered-specs</a></li>
    </ul>
  </li>
  <li>チャートのレンダリング: <a href="http://code.google.com/apis/chart/index.html">Google Chart Tools</a></li>
</ul>

<h4 id="eventstats-crawler">eventstats-crawler</h4>

<ul>
  <li>host: さくらのvps</li>
  <li>python 2.6
    <ul>
      <li>フレームワーク: なし</li>
      <li>mongodb接続: <a href="http://api.mongodb.org/python/1.11/">pymongo</a> 1.11</li>
      <li>テスティングライブラリ: <a href="http://readthedocs.org/docs/nose/en/latest/">nose</a></li>
      <li>その他: <a href="http://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a> (<em>partake.inのwebスクレイピングに利用</em>)</li>
    </ul>
  </li>
</ul>

<h3 id="mongodbpaas">4.MongoDBのPaas</h3>

<p>herokuプラグインとして<a href="https://addons.heroku.com/mongolab">MongoLab</a>と<a href="https://addons.heroku.com/mongohq">MongoHQ</a>の２つが提供されています。どちらも無料枠があるのですが、MongoLabの方が無料で利用できる容量が大きいのでこちらを選択。</p>

<p>月額の利用料金は以下です。（括弧内は1MBあたりの金額の目安です）
<em>これ以上の容量も利用可能ですが個人で払う範囲ではないと思い除外してます。</em></p>

<h4 id="mongolab">MongoLab</h4>
<ul>
  <li>$ 0.00/240MB</li>
  <li>$10.00/0.5GB  ($0.020/MB)</li>
  <li>$20.00/2.0GB  ($0.009/MB)</li>
</ul>

<h4 id="mongohq">MongoHQ</h4>

<ul>
  <li>$ 0.00/ 16MB</li>
  <li>$ 5.00/256MB  ($0.019/MB)</li>
  <li>$15.00/2.0GB  ($0.007/MB)</li>
</ul>

<h3 id="api">5.各イベント管理サービスAPIの違い</h3>

<p>まずは<strong>atnd, zusaar, partake.inの３サービスに対応</strong>。</p>

<p>それぞれ検索APIを提供してくれているのですが、当然ながら規格とかもないのでリクエストもレスポンスも違いがあります。</p>

<p>データ蓄積する際にそのAPIの差異を吸収して、webアプリから参照する際は気にしなくていい戦略をとりました。
APIの違い検索のみに特化して違いをまとめると以下の通りです。</p>

<h4 id="atnd">atnd</h4>

<p>イベント数も多いので、このAPIをスタンダードに設定。
* API仕様
 * <a href="http://api.atnd.org/">http://api.atnd.org/</a>
* リクエストパス
 * <a href="http://api.atnd.org/events/">/events/</a>
   * イベントの検索
 * <a href="http://api.atnd.org/events/users/">/events/users/</a>
   * イベントに参加しているユーザーの検索</p>

<h4 id="zusaar">zusaar</h4>

<p>基本的にはatnd準拠っぽい感じだけど細かい違いがあります。
 * API仕様
   * <a href="http://www.zusaar.com/doc/api.html">http://www.zusaar.com/doc/api.html</a>
 * リクエストパス
   * <a href="http://www.zusaar.com/api/event/">/api/event/</a>
     * イベントの検索
   * <a href="http://www.zusaar.com/api/event/user/">/api/event/user/</a>
     * イベントに参加しているユーザーの検索
atndとの違い
 * エントリポイントやデータのキー名が単数形
   * events→event
   * users→user
 * 明確なフィールドとしてのtwitter_idが無い
    * 管理者も参加ユーザーも
 * ハッシュタグがない
 * レスポンスはjson一択</p>

<h4 id="partakein">partake.in</h4>

<p>全然違うAPI。APIリストにあっても未実装がほとんどなので、利用する際はソースを確認したほうが良いです。
今回必要になりそうなAPIは２つくらいでした。</p>

<ul>
  <li>API仕様
    <ul>
      <li><a href="http://code.google.com/p/partakein/wiki/PublicWebAPI">http://code.google.com/p/partakein/wiki/PublicWebAPI</a></li>
    </ul>
  </li>
  <li>リクエストパス
    <ul>
      <li><a href="http://partake.in/api/event/search/">/api/event/search</a>
        <ul>
          <li>イベントの検索</li>
        </ul>
      </li>
      <li><a href="http://partake.in/api/event/get/">/api/event/get</a>
        <ul>
          <li>イベントの詳細データ取得</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>APIのソース(抜粋)
    <ul>
      <li><a href="http://code.google.com/p/partakein/source/browse/trunk/Partake/src/main/java/in/partake/controller/api/event/SearchAction.java">in.partake.controller.api.event.SearchAction.java</a></li>
      <li><a href="http://code.google.com/p/partakein/source/browse/trunk/Partake/src/main/java/in/partake/controller/api/event/EventAction.java">in.partake.controller.api.event.EventAction.java</a></li>
    </ul>
  </li>
</ul>

<p>その他の特徴は以下。</p>

<ul>
  <li>複数イベントを特定して一括取得するAPIはない</li>
  <li>フィールド名がcamelCase形式</li>
  <li>レスポンスはjson一択</li>
  <li>検索パラメータも特殊かつ少数</li>
  <li>検索APIで取得できるのはイベントの固定情報のみ
    <ul>
      <li>参加枠数はAPIから取得可能</li>
      <li>変動するユーザー数は取得不可能</li>
      <li>→Webページをスクレイピングするしかないという結論</li>
    </ul>
  </li>
</ul>

<p>上記をふまえ、atnd/zusaarはJSON形式でAPIからデータ取得。</p>

<p>partake.inのみイベントのリストをAPIから取得して、ユーザー数はWebページのスクレイピングで対応しました。</p>

<h3 id="section-3">6.開発メモ</h3>

<h4 id="webherokuvps">web(heroku)からもクローラー(さくらのvps)からも離れた場所にある</h4>

<p>開発PC上だと気にならなかったのですが、1件1件findしてinsertやupdateをしていると当然遅いです。なのである程度まとめて一気にinsertする方針に変更しました(ベンチ結果はありません ^^;)。
更新はクローラーの１プロセスからのみ実行されるので、トランザクションとか意識しなくて良いです。なので比較的自由な構成がとれます。</p>

<h4 id="scalajson-api">ScalaでJSON API</h4>

<p>まずはUnfilteredでJSON APIを作成。けど、jsでjson取得〜チャート生成の実行時間が思いの外大きいので、jsonも１枚のHTMLに埋め込む方針に変更。</p>

<h3 id="section-4">さいごに</h3>

<p>ざっと書きだすとこんな感じです。まぁこんな構成もあるよ、ってくらいにしか言えませんが。</p>

<p>webとクローラーを分けたことで、開発中のスキーマ変更が柔軟に行えたのは良かったのですが、スキーマ定義を共通で管理していないので、そのあたりうまく管理できると良いなと思ったり。
当初はもう少しwebの機能も多かったのですが、効率化をしているうちにシンプルな形に落ち着きました。Scalaのコードもかなり小規模なものになっています。
イベント管理者の方からのご意見ご要望などいただけると嬉しいです :)</p>

<ul>
  <li><a href="http://eventstats.restartr.com">EventStats - イベントの統計情報が見れます</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[イベントの参加人数の遷移が見れるサービス『EventStats』を作りました。 #atnd #zusaar #partake]]></title>
    <link href="http://blog.restartr.com/2011/12/10/eventstats/"/>
    <updated>2011-12-10T18:58:51+09:00</updated>
    <id>http://blog.restartr.com/2011/12/10/eventstats</id>
    <content type="html"><![CDATA[<h3>イベント管理サービスについて</h3>
<p>勉強会などでよく利用されるのが、イベント管理サービス。

ATNDやZusaar,Partakeなど、様々なサービスがあり、現在も新しいものが生まれている状況。</p>
<p>今や勉強会を開催する上で必須のサービスとなっていますよね。</p>
<p>ですが、主催者や参加者にとってそれらのサービスで閲覧できるのは『今どのような状況か』ということだけです。それまでどのように参加者が増えてきたのか、その後も参加者が増えそうか、ということまでは見ることができません。</p>
<p>「今」ではなく「過去」を知りたい。(by @ReSTARTR)</p>
<p>ということで作りました。</p>
<h3>イベントごとに登録数、補欠数、枠数を記録するサービス「EventStats｣</h3>
<ul>
<li><a href="http://eventstats.restartr.com">EventStats - イベントの統計情報が見れます</a></li>
</ul>
<p>簡単にいうと<a href="http://klout.com">Klout</a>の勉強会バージョン（のとっかかり）です。

このサービスを使えば、登録数と枠数の推移を時系列のチャートで確認することができます。

5分おきに各イベント管理サービスの情報を取得して蓄積し、情報を表示しているだけのシンプルなサービスです。

<em>(※ SVGベースのチャートのため、androidでは2.4/3.0以降でないと見れません)</em></p>
<p>あと、2011年11月頭くらいからデータ蓄積開始したのでそれ以前のイベントの履歴は見れない場合があるのと、Partakeの枠数が0人なのも蓄積ミスです。</p>
<h3>使い方</h3>
<ol>
<li><a href="javascript:(function(){s=window.location.href.split('/');type='';if(s[2]=='atnd.org'&amp;&amp;s[3]=='events')type='atnd';else if(s[2]=='www.zusaar.com'&amp;&amp;s[3]=='event')type='zusaar';else if(s[2]=='partake.in'&amp;&amp;s[3]=='events')type='partake';else return false; window.location.href=['http://eventstats.restartr.com/events/'+type,s[4]].join('/');})();">ブックマークレット</a>をブラウザに登録する</li>
<li>履歴を知りたいイベント管理サービスの詳細ページに移動する</li>
<li>ブックマークレットを実行する</li>
</ol>
<h3>技術的なこと</h3>
<p>とりあえずHeroku上でScalaのUnfilteredを使って動かしています。

技術的な話しは追々。</p>
<h3>今後どう料理するか</h3>
<p>実はMA7の締切りぎりぎりに公開してました。（証拠↓）</p>
<p><a href="https://ma7.mashupaward.jp/works/478?locale=ja">https://ma7.mashupaward.jp/works/478?locale=ja</a></p>
<p>が、リソースが足りてないさくらのVPSで動かしていたので、公開したことはとくにアナウンスとかしてませんでした。（MA7には当然のごとく選考漏れでしたが。）で、それからHerokuへの移行を進めつつ機能の修正などをやってたという訳です。</p>
<p>今後は蓄積したデータをもとに、勉強会運営や勉強会への参加の助けとなる数値を加えていければいいなと。

実はテストとか負荷試験とかあんまりできてないのであまりイジメないでください^^;</p>
<ul>
<li><a href="http://eventstats.restartr.com">EventStats - イベントの統計情報が見れます</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[（もうすぐ）退職します。]]></title>
    <link href="http://blog.restartr.com/2011/12/02/dropped-out/"/>
    <updated>2011-12-02T21:27:57+09:00</updated>
    <id>http://blog.restartr.com/2011/12/02/dropped-out</id>
    <content type="html"><![CDATA[<p>私事ですが現職の会社を退職することになり、本日無事に最終出社を終えてきました。</p>

<p>退職日は年明けですが、これから有給消化期間に入ります。</p>

<p>ということで記念碑的に退職エントリを書いておこうと思います。</p>

<p>有益な退職エントリをご希望の方は下記まとめに移動することをオススメします。</p>

<ul>
  <li><a href="http://matome.naver.jp/odai/2128832350940033301">「退職しました」ブログエントリのまとめ - NAVER まとめ</a></li>
  <li><a href="http://matome.naver.jp/odai/2132023611765736801">「退職しました。」系エントリーに学びが多い件 - NAVER まとめ</a></li>
</ul>

<h3 id="section">現職のはなし</h3>

<p>現職では、2006年に新卒入社してから約5年半、某ポータルサイトの開発全般を担当してました。</p>

<p>1年に1回部署異動が発生するくらい頻繁に体制変更があったおかげで様々な経験をさせてもらい、「自分がやりたいこと」を見つけるにはとても良い環境だったと思います。</p>

<p>入社してすぐ営業研修で外回りとか経験した後、データ入稿まわりを担当。その後1年間で二度のサイトリニューアルプロジェクトを経験。1年間のサイト運用期間を経て、今担当しているログシステムの開発をやりました。</p>

<p>入社から数年はPHP+RDBMSを中心としたWebアプリ開発に従事してましたが、ここ1年くらいはログシステムをHadoop/Hiveにリプレースする担当をやってました。年を経るごとにインフラに近づいていってる感じです。</p>

<h3 id="section-1">技術的知見が広がるシロモノ</h3>

<p>Hadoopって技術的には上から下まで幅広い知識とか素養が必要なんですよね。</p>

<p>実際のクラスタ構築はインフラチームの担当でしたが、それに至るまでの導入実験とかは自分でもひと通り経験していて、それにを肌で実感していくうちにもっとシステム全般に関わりたいと思うようになりました。現職ではアプリケーションとそれを載せるインフラの担当が明確に分かれていました。そのおかげで我々はアプリケーションの開発に専念できるのですが、一方でインフラにはどうしても疎くなりがちでした。(現在社内ではその垣根を改善する動きが出てきているので今後はもっと良い体制に変わっていくと思います)</p>

<p>そういう意味でHadoopは「技術の交差点」なんだと思います。非常に低いレイヤーからアルゴリズムまでがごっちゃごちゃに混ざったおもちゃ箱のような。それまでPHPのステートレスなシングルスレッド内であれこれするだけしたが、そこでは得られなかったものに興味関心が広がっていきました。Hadoopで実際何を実現するかはさておき、それをひと通り経験することで技術者として一歩前にすすむことができるし、その中でさらに深堀りしたいものを見つけることのできるシロモノだったと思います。</p>

<h3 id="section-2">オープンソースコミュニティ</h3>

<p>ここ1年ほどは社外のカンファレンスや勉強会へも平日休日問わずよく参加してたのですが、上司にもそれついてよく理解して頂き、本当自分の動きたいようにさせてもらえたことは有難い限りです。</p>

<p>外の世界は自分が想像している以上でした。勉強会で発表を聴いたり懇親会で話しをさせていただいたりすることで、自分の足りないところが嫌でも見えてきました。現職に限らず今後どのように成長したいのか、について改めて考えるきっかけにもなりました。</p>

<p>今はちょっとメンタル的な問題もあって勉強会参加は自粛していますが、年明け以降にまた少しづつ参加させていただこうと思ってます。</p>

<h3 id="section-3">さいごに</h3>

<p>年明けまでは旅行とか帰省とかしてゆっくり静養しつつ、技術的な取り組みも継続していこうと思います。暇を見つけて開発しているものもあるのですが、それも近々公開できると思います。あと、次の会社も決まっているのですが今後の話しはまたあらためて別の機会に。</p>

<p>（このブログの読者に現職の方がどれくらいいるのかわかりませんが）とにかく現職で関わった皆様には本当に大変お世話になりました。改めて御礼もうしあげます。</p>

<p>約5年半、どうもありがとうございました。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第二回 #Playframework 勉強会 in Tokyo #play_ja に行ってきた]]></title>
    <link href="http://blog.restartr.com/2011/10/10/play-framework-study-in-tokyo/"/>
    <updated>2011-10-10T15:59:13+09:00</updated>
    <id>http://blog.restartr.com/2011/10/10/play-framework-study-in-tokyo</id>
    <content type="html"><![CDATA[<ul>
  <li><a href="http://atnd.org/events/19107">第二回 #Playframework 勉強会 in Tokyo #play_ja</a></li>
</ul>

<p><a href="http://atnd.org/events/17724">第一回</a>は大阪開催だったのとそもそも開催を知らなくて参加できませんでしたが、第二回は有難いことに休日に東京で開催されたので行ってきました。運営の皆様、参加者の皆様、懇親会でお話させて頂いた皆様、どうも有難うございました。</p>

<h3 id="section">勉強会のまとめ記事</h3>

<p>下記ブログにありますのでそちらをどうぞ。</p>

<ul>
  <li><a href="http://d.hatena.ne.jp/ikeike443/20111009/p1">第二回 Playframework 勉強会 in Tokyo やりました #play_ja - 複雑系スパゲティソース(はてな版)</a></li>
  <li>まとめ記事へのリンクが最後にあります。</li>
  <li><a href="http://ponta027.blogspot.com/2011/10/playframework.html">Playframework勉強会#2まとめ（スライド）</a></li>
  <li>発表資料をまとめてあります。</li>
</ul>

<p>なのでここでは、全体的な話しではなく関心の強いところに関してのみ書こうと思います。</p>

<p>ただの感想文です。</p>

<h3 id="play">Play!の今とこれから</h3>

<p>Play!がどのような分野で使われ、どのように変化していくのかが今の大きな関心事であり、今回の参加理由でした。</p>

<p>今回の発表を聞いていると、Java界隈の救世主（候補）的な位置づけとして期待されているという段階なのでしょう。</p>

<p>主催者の@<a href="https://twitter.com/ikeike443">ikeike443</a>さんの会社のシャノンさんでは実際業務でPlay!を使われていたり、@<a href="https://twitter.com/genki_">genki_</a>さんは今まさに<a href="http://harp.ruru.ne.jp/sol/play/play2.pdf">SI案件で業務アプリケーションにPlay!を導入しようとしている</a>ところだそうで。</p>

<h3 id="play2x">Play!2.x系による変化</h3>

<p>ただ、Play!が今後2.x系でScalaベースでの開発に切り替わるので、それによって今の勢いがどう変わっていくのでしょうか。JavaベースのPlay!1.xにScalaユーザーを引き込むのと、ScalaベースのPlay!2.xにJavaユーザーを引きこむのでは、大きく状況が変わってくると思います。自分はScalaユーザーなのでこの動きは非常に嬉しいですが、もしかしたら勢いが減速してしまうのではとちょっと不安になったり。</p>

<p>（プラグインのサポートがどちらか一方の言語に限定されていて、結局導入を見送るなんてこともあると思います。）</p>

<h3 id="play-1">Play!の外部環境</h3>

<p>とはいえ、外部環境としてはPlay!のサポートPassSがちょくちょく出てきているので当分は勢いが衰えることはないと思います。単体でサーバーとして動作させることが可能なだけでなく、war化も可能なのでTomcatやJettyに載っけることができる環境なら動かせてしまいます。とくに@<a href="http://twitter.com/hagikuratakeshi">hagikuratakeshi</a>さんや@<a href="https://twitter.com/mitsuhiro">mitsuhiro</a>さんが取り上げていたようにHerokuのPlay!サポートによって趣味プログラミングとして手を出しやすくなってますし。</p>

<h3 id="scalaplay">ScalaのフレームワークとしてのPlay!</h3>

<p>Scala界隈ではUnfilteredやBlueEyesのような積極的にScalaの機能を利用したFWが注目されています。（少なくとも私のTwitterのTL上では…)ただし、日本語ベースのScalaのフレームワークのリファレンスや関連記事はまだまだ少ないのが現状です。</p>

<p>Play!の場合は翻訳も積極的に行われていますし、勉強会に100人近く参加するような日本のPlay!コミュニティの存在は正直無視できないと思います。今後のPlay!界隈の動向に注目です。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scalaで設定ファイルを使いたい時どうしたらいいの？]]></title>
    <link href="http://blog.restartr.com/2011/08/30/config-libraries-in-scala/"/>
    <updated>2011-08-30T00:02:15+09:00</updated>
    <id>http://blog.restartr.com/2011/08/30/config-libraries-in-scala</id>
    <content type="html"><![CDATA[<p><em style="color:red">2011.08.31 kmizushimaさんから頂いた<a href="http://blog.restartr.com/2011/08/30/config-libraries-in-scala/?preview=true&amp;preview_id=1049&amp;preview_nonce=ad0bbeeef6#comment-108">コメント</a>を元に、下記の記述を修正＆追記しました。</em></p>

<ul>
  <li>Twitterのutil-evalの一時ファイル生成について</li>
  <li>AkkaのConfigファイルのパース手法について
&lt;/em&gt;</li>
</ul>

<p>TwitterのOAuthの鍵やDB接続情報など、アプリを書く上で環境によって切り替える設定が大抵の場合あると思います。普段使っているPHPの場合、設定を外部ファイルに書きだす場合、ini,yaml,xml,phpのいずれかを使うことが多いのですが、Scalaの場合、設定ファイルってどうするのか気になりました。</p>

<p>ということで、適当に思いついたライブラリやフレームワークがどのように対応しているのか調査。</p>

<h2 id="section">ライブラリ</h2>

<h3 id="properties">propertiesファイル</h3>

<ul>
  <li>javaの古くから使われている</li>
  <li>キーと値のみ設定可能</li>
  <li>依存関係がないので手軽。</li>
  <li>すべてが文字列</li>
  <li>例えばこんな感じ</li>
</ul>

<p>path/to/conf.properties</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">hoge</span> <span class="k">=</span> <span class="s">&quot;moge&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">p</span> <span class="k">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Properties</span><span class="o">()</span>
</span><span class="line"><span class="k">val</span> <span class="n">config</span> <span class="k">=</span> <span class="n">p</span><span class="o">.</span><span class="n">load</span><span class="o">(</span><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="nc">FileInputStream</span><span class="o">(</span><span class="s">&quot;path/to/conf.properties&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;hoge&quot;</span><span class="o">)</span> <span class="c1">// &quot;moge&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="twitterconfiggy">twitterのconfiggy</h3>

<ul>
  <li><a href="https://github.com/robey/configgy">https://github.com/robey/configgy</a></li>
  <li>独自フォーマット</li>
  <li>オワコン</li>
</ul>

<h3 id="twitterutil-eval">twitterのutil-eval</h3>

<ul>
  <li><a href="http://twitter.github.com/util/">http://twitter.github.com/util/</a></li>
  <li>Evalした値をそのまま利用</li>
  <li>Scalaのコンパイラに任せられる。つまりScalaコードがそのまま設定ファイルに。</li>
  <li>型安全</li>
  <li>詳しいことはこちらを参照
    <ul>
      <li><a href="http://d.hatena.ne.jp/xuwei/20110805/1312551980">twitter が Scala 大好きすぎて (?) 設定ファイルまで Scala のソースコードな件 - scalaとか・・・</a></li>
      <li><a href="http://blog.youhei.jp/scala-util-eval">Scala アプリケーションのコンフィグレーションに Twitter 製の util-eval を使ってみた - blog.youhei.jp</a></li>
    </ul>
  </li>
  <li>下記処理にて設定クラスインスタンスをapply経由で取り出せる
    <ul>
      <li><a href="https://github.com/twitter/util/blob/master/util-eval/src/main/scala/com/twitter/util/Eval.scala#L247">com.twitter.util.Eval#L247</a></li>
    </ul>
  </li>
  <li><del>一時的にjarファイルを生成するので環境に制約あるとダメ（たぶん）</del>
    <ul>
      <li>一時ファイルを生成するのは、ローカルにcloneした古いままのバージョン（1.2.5）で動作確認していたためでした。</li>
      <li>古いコード: <a href="https://github.com/twitter/util/blob/7c81842286f30aee4b2176bceb8c79ded710c88e/src/main/scala/com/twitter/util/Evaluator.scala">com.twitter.util.Evaluator</a>のコメントに<a href="https://github.com/twitter/util/blob/7c81842286f30aee4b2176bceb8c79ded710c88e/src/main/scala/com/twitter/util/Evaluator.scala#L57">All generated .scala and .class files are stored, by default, in System.getProperty(“java.io.tmpdir”)</a>と書いてあったので、「一時ファイルが生成される」と認識し、実際の動作確認でもその一時ファイルが確認できていました。</li>
      <li>しかし、新しいコード: <a href="https://github.com/twitter/util/blob/master/util-eval/src/main/scala/com/twitter/util/Eval.scala">com.twitter.util.Eval</a>のコメントには<a href="https://github.com/twitter/util/blob/master/util-eval/src/main/scala/com/twitter/util/Eval.scala#L50">If target is None, the results are compiled to memory (and are therefore ephemeral)</a>とある通り、パス指定がない場合はメモリ上の仮想ディレクトリに対して操作を行う模様です。</li>
    </ul>
  </li>
  <li>使い方</li>
</ul>

<p>設定のtraitを定義</p>

<p>src/main/scala/com/restartr/utilSample/MyConfig.scala</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">package</span> <span class="nn">com.restartr.utilSample</span>
</span><span class="line">
</span><span class="line"><span class="k">trait</span> <span class="nc">MyConfig</span> <span class="o">{</span>
</span><span class="line">  <span class="k">val</span> <span class="n">num</span><span class="k">:</span> <span class="kt">Int</span>
</span><span class="line">  <span class="k">val</span> <span class="n">str</span><span class="k">:</span> <span class="kt">String</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>実際の設定ファイルでは、設定のTraitを継承してインスタンス生成</p>

<p>※クラスインスタンスでなくても文字列やリストでもOK。</p>

<p>path/to/config/MyConfig.scala</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">import</span> <span class="nn">com.restartr.utilSample.MyConfig</span>
</span><span class="line"><span class="k">new</span> <span class="nc">MyConfig</span> <span class="o">{</span>
</span><span class="line">  <span class="k">val</span> <span class="n">num</span> <span class="k">=</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">val</span> <span class="n">str</span> <span class="k">=</span> <span class="s">&quot;san&quot;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>使いたい場所でEval。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">conf</span> <span class="k">=</span> <span class="nc">Eval</span><span class="o">[</span><span class="kt">MyConfig</span><span class="o">](</span><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="nc">File</span><span class="o">(</span><span class="s">&quot;path/to/config/MyConfig.scala&quot;</span><span class="o">))</span>
</span><span class="line"><span class="n">conf</span><span class="o">.</span><span class="n">num</span> <span class="c1">// 1</span>
</span><span class="line"><span class="n">conf</span><span class="o">.</span><span class="n">str</span> <span class="c1">// &quot;san&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="configrity">configrity</h3>

<ul>
  <li><a href="https://github.com/paradigmatic/Configrity">https://github.com/paradigmatic/Configrity</a></li>
  <li>akkaのフォーマットと同等
    <ul>
      <li><a href="https://github.com/paradigmatic/Configrity/wiki/Formats">設定のフォーマット</a></li>
      <li>Scala 2.9以上対象。</li>
      <li>configファイルの<strong>読み書き</strong>ができる
        <ul>
          <li>immutable, thread safe, allow functional design pattern</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="section-1">各種フレームワーク</h2>

<p>以下のフレームワークはすべて独自実装でした。Propertiesじゃ役不足だし、かといってデファクトな設定用ライブラリがないからなのでしょうか。</p>

<h3 id="akkaconfig">akkaのconfig</h3>

<ul>
  <li>akka.confとかがそれ。</li>
  <li>独自パーサーを使用
    <ul>
      <li>70行程度のシンプルなパーサー</li>
      <li><a href="https://github.com/jboner/akka/blob/master/akka-actor/src/main/scala/akka/config/ConfigParser.scala">akka.config.ConfigParser</a></li>
      <li><del>正規表現で定義されてる</del>Scalaのパーザコンビネータ(RegexParsersを継承)で定義されている</li>
      <li>”{“と”}”で階層構造を表現</li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">akka</span> <span class="o">{</span>
</span><span class="line">  <span class="n">cluster</span><span class="o">{</span>
</span><span class="line">    <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;test-cluster&quot;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>使える型</li>
  <li>数値</li>
  <li>文字列</li>
  <li>真偽値（on/off , true/false)</li>
  <li>リスト [1,2,3] / [“hoge”,”moge”]</li>
</ul>

<h3 id="playframeworkconfig">play!frameworkのconfig</h3>

<ul>
  <li>独自パーサー
    <ul>
      <li><a href="https://github.com/playframework/play/blob/master/framework/src/play/utils/OrderSafeProperties.java">play.utils.OrderSafeProperties</a></li>
    </ul>
  </li>
  <li>java.util.propertiesを継承したもの。</li>
  <li>環境ごとにIDを割り当てられる
    <ul>
      <li>http://playdocja.appspot.com/documentation/1.2.1/production</li>
      <li>http://playdocja.appspot.com/documentation/1.2.1/guide11</li>
      <li>IDごとに%{ID}を頭につければ切り替えてくれるみたい</li>
    </ul>
  </li>
</ul>

<h3 id="lift">Lift</h3>

<ul>
  <li>LiftRulesが設定をもつ
    <ul>
      <li><a href="http://simply.liftweb.net/index-3.1.html#toc-Subsection-3.1.2">http://simply.liftweb.net/index-3.1.html#toc-Subsection-3.1.2</a></li>
      <li>実装はここ
*<a href="https://github.com/lift/framework/blob/master/web/webkit/src/main/scala/net/liftweb/http/LiftRules.scala">net.liftweb.http.LiftRules</a></li>
      <li>たぶんこのへん
        <ul>
          <li><a href="https://github.com/lift/framework/blob/master/core/util/src/main/scala/net/liftweb/util/Props.scala">net.liftweb.util.Props</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>ざっと調べて使ってみたところ、手軽にやるならProperties、フレームワークを使うならそれに則り、厳密にやるならTwitterのEvalや、設定ファイルを読み書きできる独特なConfigrityなんかがよさそうです。</p>

<p>XMLは…まぁないでしょうね。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScalaのORMapperのSquerylを試してみてハマった３つのこと]]></title>
    <link href="http://blog.restartr.com/2011/08/16/3-things-that-i-was-in-trouble-using-squeryl/"/>
    <updated>2011-08-16T08:00:15+09:00</updated>
    <id>http://blog.restartr.com/2011/08/16/3-things-that-i-was-in-trouble-using-squeryl</id>
    <content type="html"><![CDATA[<p>ScalaのORMとしてSquerylってのがあります。</p>

<ul>
<li><a href="http://squeryl.org/index.html">Squeryl - A Scala ORM for SQL Databases</a></li>
</ul>
<p>使い方は上記リンク先を見ればだいたいわかります。</p>

<p>あと、<a href="http://twitter.com/jugyo">@jugyo</a>さんのブログに導入あたりはまとまっていますし、つまづいたらGoogleGroupで検索すれば何か見つかるかもしれません。</p>

<ul>
<li><a href="http://blog.twiwt.org/e/f34763"> Twiwt:Blog / jugyo : squeryl を試す </a></li>
<li><a href="http://blog.twiwt.org/e/7e40ce">Twiwt:Blog / jugyo : Squeryl の使い方 - セットアップ, モデルの定義, テーブル作成</a></li>
<li><a href="https://groups.google.com/group/squeryl/about"> Squeryl | Google Groups </a></li>
</ul>
<p>さて、今回はTwitterっぽいものを想定して機能を試してみたのですが、３つほどハマったところを記しておきます。</p>

<p>環境はScala2.9.0.1、Sbt0.7.7、MySQL5.5、Squeryl0.9.4です。</p>

<p>ソースはgistに登録。それを本文末尾にも掲載しておきました。</p>

<h3>１．プライマリーキーの指定での嵌りどころ</h3>
<p>1つのカラムがPKとなるテーブルスキーマの場合、org.squeryl.KeyedEntity[T]を継承して使います。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">class</span> <span class="nc">Users</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">KeyedEntity</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>KeyedEntityにはidというフィールドが用意されていて、継承時に型を指定することで、PKの型に適用させることができます。今回の場合であればLong型のPK「id」ということになります。</p>

<p>ただし、この場合、PKはautoincrementedになってしまいます。</p>

<p>コード的には下記のようにKeyedEntity[T]を使わずSchema継承時に定義するのと同等になるわけです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">class</span> <span class="nc">Users</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Db</span> <span class="k">extends</span> <span class="nc">Schema</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">val</span> <span class="n">users</span> <span class="k">=</span> <span class="n">table</span><span class="o">[</span><span class="kt">User</span><span class="o">](</span><span class="s">&quot;users&quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="n">on</span><span class="o">(</span><span class="n">users</span><span class="o">)(</span><span class="n">u</span> <span class="k">=&gt;</span> <span class="n">declare</span><span class="o">(</span>
</span><span class="line">
</span><span class="line">    <span class="n">u</span><span class="o">.</span><span class="n">id</span> <span class="n">is</span> <span class="o">(</span><span class="n">primaryKey</span><span class="o">,</span> <span class="n">autoincremented</span><span class="o">))</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>これは結構困ります。そんな場合はSchemaを継承するときに定義を上書きすればOK。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">class</span> <span class="nc">Users</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">KeyedEntity</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Db</span> <span class="k">extends</span> <span class="nc">Schema</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">val</span> <span class="n">users</span> <span class="k">=</span> <span class="n">table</span><span class="o">[</span><span class="kt">User</span><span class="o">](</span><span class="s">&quot;users&quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="n">on</span><span class="o">(</span><span class="n">users</span><span class="o">)(</span><span class="n">u</span> <span class="k">=&gt;</span> <span class="n">declare</span><span class="o">(</span>
</span><span class="line">
</span><span class="line">    <span class="n">u</span><span class="o">.</span><span class="n">id</span> <span class="n">is</span> <span class="o">(</span><span class="n">primaryKey</span><span class="o">))</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>これはSquerylのGoogleGroupに書いてました。</p>

<ul>
<li><a href="https://groups.google.com/forum/#!topic/squeryl/BTrKBwikMqs">how to cancel &#8220;autoincremented&#8221; from KeyedEntity[T]</a></li>
</ul>
<h3>２．DDLのカラムの順番の嵌りどころ</h3>
<p>Db.printDdlを実行した時にカラムの順番が予測できません。</p>

<p>PKが最初にくるのかと思えばそうでもないみたい。ここは細かく追ってないですが、これもGoogleGroupに答えがありました。</p>

<ul>
<li><a href="https://groups.google.com/forum/#!topic/squeryl/ZwiDf5Q-IUI">CREATE TABLE columns in order of constructor arguments</a></li>
</ul>
<p>答えとしては、org.squeryl.internals.DatabaseAdapter:: writeCreateTableあたりをorverrideしてなんとかしてくれとのこと。</p>

<p><a href="https://github.com/max-l/Squeryl/blob/master/src/main/scala/org/squeryl/internals/DatabaseAdapter.scala#L255">https://github.com/max-l/Squeryl/blob/master/src/main/scala/org/squeryl/internals/DatabaseAdapter.scala#L255</a></p>

<p>なんか良い方法はないの…</p>

<p>とりあえず、printDdlした結果をコピーして、順番だけ書き換えて、手動で直接DBにクエリ発行すればなんとかなるでしょう。</p>

<h3>３．外部キーの利用でのはまりどころ</h3>
<p>２つのテーブルにRelationを設定してからDb.createした際、外部キーが設定されない問題がありました。</p>

<p>MySQLは5.5を使っているので外部キーに対応していない訳でもないです。</p>

<p>問題はAdapterの選定にありました。</p>

<p>org.squeryl.adapter.MySQLAdapter</p>

<p>をつかっていたのですが、</p>

<p>org.squeryl.adapter.MySQLInnoDBAdapter</p>

<p>を使えばOKでした。</p>

<p>根本の原因は、org.squeryl.adapter.MySQLAdapterに</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">override</span> <span class="k">def</span> <span class="n">supportsForeignKeyConstraints</span> <span class="k">=</span> <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>と定義してあり、一方のorg.squeryl.adapter.MySQLInnoDBAdapterには</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">override</span> <span class="k">def</span> <span class="n">supportsForeignKeyConstraints</span> <span class="k">=</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>と定義してあります。</p>

<p>この値がtrueになっていないとForeignKeyの制約がDDLに含まれなくなってしまうので注意です。</p>

<p><a href="https://github.com/max-l/Squeryl/blob/master/src/main/scala/org/squeryl/adapters/MySQLAdapter.scala#L75">Docコメントにも書いてある</a>ので注意です。</p>

<p>以上、Squerylを弄ってみて嵌ったことをまとめてみました。</p>

<h3>Squerylの使用感</h3>
<p>ちょっと前にTwitterのStreamAPIのデータをMySQLに格納するためにSquerylを使ったのと今回少し弄ってみただけなのでまだまだ知らないことだらけです。他にも機能的はたくさん用意されていると思いますし、APIも割となじみやすいので複雑すぎないテーブル定義の場合には積極的にSquerylを使っていこうと思います。</p>

<p><em>※ドキュメントや本体のソースを追いかけたりしながら使い方を学ぶのは非常に楽しいです:)</em></p>

<p>で、ソースは以下です。</p>

<script src="https://gist.github.com/1146854.js"> </script>

]]></content>
  </entry>
  
</feed>
